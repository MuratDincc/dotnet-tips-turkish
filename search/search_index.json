{"config":{"lang":["tr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dotnet Tavsiyeleri Rehberine Ho\u015f Geldiniz","text":"<p>\ud83c\udf89 Ho\u015f Geldiniz!</p> <p>.NET geli\u015ftiricileri i\u00e7in \u00f6zenle haz\u0131rlanm\u0131\u015f, k\u0131sa ve etkili ipu\u00e7lar\u0131 koleksiyonuna ho\u015f geldiniz. Bu rehber, .NET ekosisteminde verimlili\u011finizi art\u0131rmay\u0131 hedefleyen ipu\u00e7lar\u0131 ve p\u00fcf noktalar\u0131 i\u00e7ermektedir.</p> <p>Bu proje, s\u00fcrekli g\u00fcncellenmekte ve geli\u015ftirilmektedir. \u0130lerleyen g\u00fcnlerde yeni i\u00e7erikler ve ba\u015fl\u0131klar eklenmeye devam edecektir.</p>"},{"location":"#icerik-baslklar","title":"\u0130\u00e7erik Ba\u015fl\u0131klar\u0131","text":"<p>Bu rehber a\u015fa\u011f\u0131daki ba\u015fl\u0131klar\u0131 i\u00e7ermektedir:</p> <ul> <li>C#: C# dilinin incelikleri ve pratik kod \u00f6nerileri</li> <li>.NET: Framework \u00f6zellikleri, performans ipu\u00e7lar\u0131 ve yayg\u0131n senaryolar</li> <li>Entity Framework: Veri eri\u015fimi ve performans optimizasyonlar\u0131na dair p\u00fcf noktalar\u0131</li> <li>Dapper: Performans odakl\u0131 veri eri\u015fimi ve optimize sorgular i\u00e7in pratik \u00e7\u00f6z\u00fcmler</li> <li>Garbage Collector: Bellek y\u00f6netimi ve yeni GC \u00f6zellikleri</li> <li>Async/Await: Asenkron programlamada en iyi uygulamalar</li> <li>LINQ: Performansl\u0131 LINQ kullan\u0131m\u0131 ve yayg\u0131n hatalar</li> <li>Resiliency ve Hata Y\u00f6netimi: Da\u011f\u0131t\u0131k sistemlerde hata tolerans\u0131 ve sistem dayan\u0131kl\u0131l\u0131\u011f\u0131n\u0131 art\u0131ran pratikler</li> <li>MediatR ve CQRS: Command Query Responsibility Segregation pattern\u2019\u0131 ve MediatR kullan\u0131m\u0131na dair ipu\u00e7lar\u0131.</li> </ul> <p>Her ba\u015fl\u0131k alt\u0131nda, \u00f6\u011frenimi kolayla\u015ft\u0131rmak i\u00e7in k\u0131sa a\u00e7\u0131klamalar ve \u00f6rnek kod par\u00e7alar\u0131 bulabilirsiniz.</p>"},{"location":"#destek-olun","title":"Destek Olun","text":"<p>Projeyi faydal\u0131 buluyorsan\u0131z, l\u00fctfen GitHub\u2019da \u2b50 vererek destek olmay\u0131 unutmay\u0131n!</p>"},{"location":"#iletisim","title":"\u0130leti\u015fim","text":"<p>Sorular\u0131n\u0131z veya \u00f6nerileriniz varsa, bana ula\u015fabilirsiniz:</p> <p> </p> <p>\ud83d\ude80 Hadi ba\u015flayal\u0131m ve kod kalitenizi birlikte y\u00fckseltelim!</p> <p>Sevgiler, Murat</p>"},{"location":"csharp/async-streams/","title":"Async Streams","text":"<p>Async streams, veri ak\u0131\u015flar\u0131n\u0131 asenkron olarak i\u015flemek i\u00e7in g\u00fc\u00e7l\u00fc bir ara\u00e7t\u0131r. Do\u011fru \u015fekilde kullan\u0131ld\u0131\u011f\u0131nda performans\u0131 art\u0131r\u0131r ve kodunuzu daha verimli hale getirir. Ancak, yanl\u0131\u015f kullan\u0131mlar performans sorunlar\u0131na ve beklenmeyen davran\u0131\u015flara yol a\u00e7abilir.</p>"},{"location":"csharp/async-streams/#1-asenkron-akslarn-yanls-kullanm","title":"1. Asenkron Ak\u0131\u015flar\u0131n Yanl\u0131\u015f Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm veri setini bellekte tutarak i\u015flem yapmak.</p> <pre><code>var data = await GetDataAsync();\nforeach (var item in data)\n{\n    Console.WriteLine(item);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Asenkron veri ak\u0131\u015f\u0131n\u0131 <code>await foreach</code> ile t\u00fcketmek.</p> <pre><code>await foreach (var item in GetDataAsync())\n{\n    Console.WriteLine(item);\n}\n</code></pre>"},{"location":"csharp/async-streams/#2-exception-yonetimini-ihmal-etmek","title":"2. Exception Y\u00f6netimini \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Asenkron ak\u0131\u015flar s\u0131ras\u0131nda hatalar\u0131 g\u00f6z ard\u0131 etmek.</p> <pre><code>await foreach (var data in GetDataAsync())\n{\n    ProcessData(data); // Hatalar\u0131 ele almaz\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hatalar\u0131 <code>try-catch</code> blo\u011fu ile y\u00f6netmek.</p> <pre><code>try\n{\n    await foreach (var data in GetDataAsync())\n    {\n        ProcessData(data);\n    }\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Hata: {ex.Message}\");\n}\n</code></pre>"},{"location":"csharp/async-streams/#3-performans-optimize-etmemek","title":"3. Performans\u0131 Optimize Etmemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm elemanlar\u0131 ayn\u0131 anda i\u015flemek.</p> <pre><code>await foreach (var item in GetLargeDataAsync())\n{\n    ProcessItem(item);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ak\u0131\u015f\u0131n erken sonland\u0131r\u0131labilece\u011fi durumlarda d\u00f6ng\u00fcy\u00fc zaman\u0131nda durdurmak.</p> <pre><code>await foreach (var item in GetLargeDataAsync())\n{\n    if (ShouldStopProcessing(item)) break;\n    ProcessItem(item);\n}\n</code></pre>"},{"location":"csharp/async-streams/#4-cancellationtoken-kullanmn-ihmal-etmek","title":"4. <code>CancellationToken</code> Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Asenkron ak\u0131\u015flarda iptal deste\u011fini g\u00f6z ard\u0131 etmek.</p> <pre><code>await foreach (var item in GetDataAsync())\n{\n    Console.WriteLine(item);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>CancellationToken</code> kullanarak i\u015flem iptalini desteklemek.</p> <pre><code>await foreach (var item in GetDataAsync().WithCancellation(cancellationToken))\n{\n    Console.WriteLine(item);\n}\n</code></pre>"},{"location":"csharp/async-streams/#5-gereksiz-veri-filtreleme","title":"5. Gereksiz Veri Filtreleme","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ak\u0131\u015ftan al\u0131nan verileri d\u00f6ng\u00fc i\u00e7inde filtrelemek.</p> <pre><code>await foreach (var item in GetDataAsync())\n{\n    if (item.IsRelevant)\n    {\n        Console.WriteLine(item);\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ak\u0131\u015f s\u0131ras\u0131nda veri filtrelemeyi optimize etmek.</p> <pre><code>await foreach (var item in GetFilteredDataAsync())\n{\n    Console.WriteLine(item);\n}\n</code></pre>"},{"location":"csharp/async-streams/#6-bagmsz-islemleri-senkronize-calstrmak","title":"6. Ba\u011f\u0131ms\u0131z \u0130\u015flemleri Senkronize \u00c7al\u0131\u015ft\u0131rmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ba\u011f\u0131ms\u0131z i\u015flemleri s\u0131rayla \u00e7al\u0131\u015ft\u0131rmak.</p> <pre><code>await foreach (var item in GetDataAsync())\n{\n    await ProcessItemAsync(item); // Ba\u011f\u0131ms\u0131z i\u015flemler s\u0131ral\u0131 \u00e7al\u0131\u015f\u0131r\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130\u015flemleri paralel olarak \u00e7al\u0131\u015ft\u0131rmak i\u00e7in <code>Task.WhenAll</code> kullan\u0131n.</p> <pre><code>var tasks = new List&lt;Task&gt;();\nawait foreach (var item in GetDataAsync())\n{\n    tasks.Add(ProcessItemAsync(item));\n}\nawait Task.WhenAll(tasks);\n</code></pre>"},{"location":"csharp/deconstruction/","title":"Deconstruction","text":"<p>Deconstruction, bir nesnenin bile\u015fenlerini par\u00e7alara ay\u0131rarak daha okunabilir ve d\u00fczenli kod yazmay\u0131 sa\u011flar. Ancak, yanl\u0131\u015f kullan\u0131m durumlar\u0131 kodun karma\u015f\u0131kla\u015fmas\u0131na ve hatalara yol a\u00e7abilir.</p>"},{"location":"csharp/deconstruction/#1-deconstruction-kullanmn-ihmal-etmek","title":"1. Deconstruction Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Deconstruction yerine manuel atamalar yapmak.</p> <pre><code>var point = GetPoint();\nvar x = point.X;\nvar y = point.Y;\nConsole.WriteLine($\"X: {x}, Y: {y}\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Deconstruction kullanarak daha k\u0131sa ve okunabilir kod yaz\u0131n.</p> <pre><code>var (x, y) = GetPoint();\nConsole.WriteLine($\"X: {x}, Y: {y}\");\n</code></pre> <p>Metot Tan\u0131m\u0131: <pre><code>public (int X, int Y) GetPoint() =&gt; (10, 20);\n</code></pre></p>"},{"location":"csharp/deconstruction/#2-deconstruction-icin-anlamsz-isimler-kullanmak","title":"2. Deconstruction \u0130\u00e7in Anlams\u0131z \u0130simler Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Deconstruction\u2019da anlams\u0131z de\u011fi\u015fken isimleri kullanmak.</p> <pre><code>var (a, b) = GetDimensions();\nConsole.WriteLine($\"Width: {a}, Height: {b}\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Deconstruction s\u0131ras\u0131nda anlaml\u0131 de\u011fi\u015fken isimleri kullan\u0131n.</p> <pre><code>var (width, height) = GetDimensions();\nConsole.WriteLine($\"Width: {width}, Height: {height}\");\n</code></pre> <p>Metot Tan\u0131m\u0131: <pre><code>public (int Width, int Height) GetDimensions() =&gt; (1920, 1080);\n</code></pre></p>"},{"location":"csharp/deconstruction/#3-fazla-karmask-yaplar-kullanmaya-calsmak","title":"3. Fazla Karma\u015f\u0131k Yap\u0131lar Kullanmaya \u00c7al\u0131\u015fmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Karma\u015f\u0131k t\u00fcrlerde deconstruction yapmaya \u00e7al\u0131\u015fmak.</p> <pre><code>var data = GetComplexData();\nvar a = data.Item1;\nvar b = data.Item2.X;\nvar c = data.Item2.Y;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Deconstruction ile daha d\u00fczenli bir yap\u0131 kullan\u0131n.</p> <pre><code>var (id, (x, y)) = GetComplexData();\nConsole.WriteLine($\"ID: {id}, X: {x}, Y: {y}\");\n</code></pre> <p>Metot Tan\u0131m\u0131: <pre><code>public (int ID, (int X, int Y) Coordinates) GetComplexData() =&gt; (1, (10, 20));\n</code></pre></p>"},{"location":"csharp/deconstruction/#4-gereksiz-deconstruction-yapmak","title":"4. Gereksiz Deconstruction Yapmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Basit i\u015flemler i\u00e7in gereksiz deconstruction.</p> <pre><code>var (x, y) = (10, 20);\nConsole.WriteLine($\"X: {x}, Y: {y}\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gereksiz deconstruction\u2019dan ka\u00e7\u0131n\u0131n.</p> <pre><code>var point = (10, 20);\nConsole.WriteLine($\"X: {point.Item1}, Y: {point.Item2}\");\n</code></pre>"},{"location":"csharp/deconstruction/#5-deconstruction-ile-nullable-turleri-yanls-yonetmek","title":"5. Deconstruction ile Nullable T\u00fcrleri Yanl\u0131\u015f Y\u00f6netmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Nullable t\u00fcrlerde null kontrol\u00fc yapmamak.</p> <pre><code>var (x, y) = GetNullablePoint(); // Hata riski\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Nullable t\u00fcrlerde g\u00fcvenli deconstruction kullan\u0131n.</p> <pre><code>var point = GetNullablePoint();\nif (point.HasValue)\n{\n    var (x, y) = point.Value;\n    Console.WriteLine($\"X: {x}, Y: {y}\");\n}\nelse\n{\n    Console.WriteLine(\"Point is null.\");\n}\n</code></pre> <p>Metot Tan\u0131m\u0131: <pre><code>public (int X, int Y)? GetNullablePoint() =&gt; null;\n</code></pre></p>"},{"location":"csharp/default-interface-methods/","title":"Default Interface Methods","text":"<p>Default interface methods, C# 8.0 ile gelen bir \u00f6zellik olup, arabirimlere varsay\u0131lan metot tan\u0131mlamalar\u0131 eklemenizi sa\u011flar. Bu, arabirimlerin geriye d\u00f6n\u00fck uyumlulu\u011funu art\u0131r\u0131r, ancak yanl\u0131\u015f kullan\u0131mlar\u0131 kodun karma\u015f\u0131k hale gelmesine ve bak\u0131m\u0131 zorla\u015fmas\u0131na neden olabilir.</p>"},{"location":"csharp/default-interface-methods/#1-default-methodlar-gereksiz-yere-kullanmak","title":"1. Default Method\u2019lar\u0131 Gereksiz Yere Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Default method\u2019lar\u0131 temel s\u0131n\u0131f i\u015flevsellikleri i\u00e7in kullanmak.</p> <pre><code>public interface ILogger\n{\n    void Log(string message);\n\n    void LogError(string message) // Gereksiz bir default method\n    {\n        Console.WriteLine($\"Error: {message}\");\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Default method\u2019lar\u0131 yaln\u0131zca geriye d\u00f6n\u00fck uyumluluk i\u00e7in kullan\u0131n.</p> <pre><code>public interface ILogger\n{\n    void Log(string message);\n\n    void LogError(string message)\n    {\n        Log($\"Error: {message}\");\n    }\n}\n</code></pre>"},{"location":"csharp/default-interface-methods/#2-karmask-is-mantg-eklemek","title":"2. Karma\u015f\u0131k \u0130\u015f Mant\u0131\u011f\u0131 Eklemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Default method\u2019larda karma\u015f\u0131k i\u015f mant\u0131\u011f\u0131 tan\u0131mlamak.</p> <pre><code>public interface IDataProcessor\n{\n    void ProcessData(string data);\n\n    void ValidateData(string data)\n    {\n        if (string.IsNullOrEmpty(data))\n        {\n            throw new ArgumentException(\"Data is required.\");\n        }\n        // Daha karma\u015f\u0131k i\u015flemler...\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Karma\u015f\u0131k mant\u0131\u011f\u0131 s\u0131n\u0131flarda veya ayr\u0131 hizmetlerde ele al\u0131n.</p> <pre><code>public interface IDataProcessor\n{\n    void ProcessData(string data);\n\n    void ValidateData(string data)\n    {\n        if (string.IsNullOrEmpty(data))\n        {\n            throw new ArgumentException(\"Data is required.\");\n        }\n    }\n}\n</code></pre>"},{"location":"csharp/default-interface-methods/#3-varsaylan-yontemleri-skca-kullanarak-arabirimi-sisirmek","title":"3. Varsay\u0131lan Y\u00f6ntemleri S\u0131k\u00e7a Kullanarak Arabirimi \u015ei\u015firmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Arabirimlere a\u015f\u0131r\u0131 say\u0131da varsay\u0131lan metot eklemek.</p> <pre><code>public interface IReportGenerator\n{\n    void GenerateReport();\n    void ExportReport(string format) { Console.WriteLine($\"Exporting in {format} format.\"); }\n    void PrintReport() { Console.WriteLine(\"Printing report.\"); }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Arabirimi sade tutun ve gerekti\u011finde yeni arabirimler olu\u015fturun.</p> <pre><code>public interface IReportGenerator\n{\n    void GenerateReport();\n    void ExportReport(string format)\n    {\n        Console.WriteLine($\"Exporting in {format} format.\");\n    }\n}\n</code></pre>"},{"location":"csharp/default-interface-methods/#4-default-methodlar-tum-snflarda-kullanmamak","title":"4. Default Method\u2019lar\u0131 T\u00fcm S\u0131n\u0131flarda Kullanmamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm arabirim implementasyonlar\u0131nda default method\u2019u g\u00f6z ard\u0131 etmek.</p> <pre><code>public interface INotifier\n{\n    void Notify(string message);\n\n    void NotifyAll(string[] messages)\n    {\n        foreach (var message in messages)\n        {\n            Notify(message);\n        }\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Default method\u2019un avantajlar\u0131n\u0131 t\u00fcm implementasyonlarda kullan\u0131n.</p> <pre><code>public interface INotifier\n{\n    void Notify(string message);\n\n    void NotifyAll(string[] messages)\n    {\n        foreach (var message in messages)\n        {\n            Notify(message);\n        }\n    }\n}\n</code></pre>"},{"location":"csharp/default-interface-methods/#5-test-edilebilirligi-goz-ard-etmek","title":"5. Test Edilebilirli\u011fi G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Default method\u2019lar\u0131 test edilebilirlik a\u00e7\u0131s\u0131ndan zorla\u015ft\u0131rmak.</p> <pre><code>public interface IService\n{\n    void PerformAction();\n\n    void DefaultAction()\n    {\n        Console.WriteLine(\"Default action performed.\");\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Default method\u2019lar\u0131 bir temel s\u0131n\u0131f veya ba\u011f\u0131ml\u0131l\u0131k \u00fczerinden test edilebilir hale getirin.</p> <pre><code>public interface IService\n{\n    void PerformAction();\n\n    void DefaultAction()\n    {\n        PerformAction();\n    }\n}\n</code></pre>"},{"location":"csharp/expression-bodied-members/","title":"Expression-Bodied Members","text":"<p>Expression-bodied members, C# dilinde k\u0131sa ve \u00f6z kod yazmay\u0131 sa\u011flar. Ancak, yanl\u0131\u015f kullan\u0131m durumlar\u0131 kodun okunabilirli\u011fini ve s\u00fcrd\u00fcr\u00fclebilirli\u011fini etkileyebilir.</p>"},{"location":"csharp/expression-bodied-members/#1-gereksiz-yerine-getirme-yontemleri","title":"1. Gereksiz Yerine Getirme Y\u00f6ntemleri","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Basit d\u00f6n\u00fc\u015fleri tam metot g\u00f6vdesiyle yazmak.</p> <pre><code>public string GetName()\n{\n    return \"Murat\";\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Expression-bodied members ile metotlar\u0131 sadele\u015ftirin.</p> <pre><code>public string GetName() =&gt; \"Murat\";\n</code></pre>"},{"location":"csharp/expression-bodied-members/#2-karmask-ifadeleri-expression-bodied-members-ile-yazmak","title":"2. Karma\u015f\u0131k \u0130fadeleri Expression-Bodied Members ile Yazmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7ok sat\u0131rl\u0131 ifadeleri tek bir expression-bodied member ile yazmak.</p> <pre><code>public string GetFullName(string firstName, string lastName) =&gt; \n    $\"{firstName} {lastName}\".ToUpper() + $\" Length: {firstName.Length + lastName.Length}\";\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Karma\u015f\u0131k ifadeleri birden fazla sat\u0131rda a\u00e7\u0131k\u00e7a yaz\u0131n.</p> <pre><code>public string GetFullName(string firstName, string lastName)\n{\n    var fullName = $\"{firstName} {lastName}\";\n    return $\"{fullName.ToUpper()} Length: {fullName.Length}\";\n}\n</code></pre>"},{"location":"csharp/expression-bodied-members/#3-kapsaml-property-govdeleri-kullanmak","title":"3. Kapsaml\u0131 Property G\u00f6vdeleri Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Property\u2019ler i\u00e7in tam g\u00f6vde kullanmak.</p> <pre><code>private string _name;\n\npublic string Name\n{\n    get { return _name; }\n    set { _name = value; }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Expression-bodied members ile property\u2019leri k\u0131salt\u0131n.</p> <pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"csharp/expression-bodied-members/#4-exception-frlatma-islemlerinde-expression-bodied-kullanm","title":"4. Exception F\u0131rlatma \u0130\u015flemlerinde Expression-Bodied Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Exception f\u0131rlatma i\u015flemlerini expression-bodied members ile karma\u015f\u0131k hale getirmek.</p> <pre><code>public string Name =&gt; throw new ArgumentNullException(nameof(Name), \"Name is required.\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Exception i\u015flemlerini a\u00e7\u0131k bir \u015fekilde yaz\u0131n.</p> <pre><code>public string Name\n{\n    get =&gt; throw new ArgumentNullException(nameof(Name), \"Name is required.\");\n}\n</code></pre>"},{"location":"csharp/expression-bodied-members/#5-constructorlarda-expression-bodied-kullanmn-yanls-yapmak","title":"5. Constructor\u2019larda Expression-Bodied Kullan\u0131m\u0131n\u0131 Yanl\u0131\u015f Yapmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Constructor\u2019lar\u0131 gereksiz yere expression-bodied olarak yazmak.</p> <pre><code>public Person(string name) =&gt; Name = name ?? throw new ArgumentNullException(nameof(name));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Constructor\u2019larda expression-bodied kullan\u0131m\u0131n\u0131 sade tutun.</p> <pre><code>public Person(string name)\n{\n    Name = name ?? throw new ArgumentNullException(nameof(name));\n}\n</code></pre>"},{"location":"csharp/expression-bodied-members/#6-basit-islemleri-ack-govdelerle-yazmak","title":"6. Basit \u0130\u015flemleri A\u00e7\u0131k G\u00f6vdelerle Yazmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Basit property\u2019ler i\u00e7in tam metot g\u00f6vdesi kullanmak.</p> <pre><code>public string Description\n{\n    get { return \"A short description.\"; }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Expression-bodied members ile basit i\u015flemleri optimize edin.</p> <pre><code>public string Description =&gt; \"A short description.\";\n</code></pre>"},{"location":"csharp/extension-methods/","title":"Extension Methods","text":"<p>Extension methods, mevcut s\u0131n\u0131flara veya arabirimlere yeni metotlar eklemenin etkili bir yoludur. Ancak, yanl\u0131\u015f kullan\u0131m durumlar\u0131 kodun anla\u015f\u0131labilirli\u011fini ve bak\u0131m\u0131n\u0131 zorla\u015ft\u0131rabilir.</p>"},{"location":"csharp/extension-methods/#1-extension-methodlar-yanls-kapsamda-kullanmak","title":"1. Extension Methodlar\u0131 Yanl\u0131\u015f Kapsamda Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Extension method\u2019lar\u0131 gereksiz yere genel (<code>global</code>) hale getirmek.</p> <pre><code>public static class GlobalExtensions\n{\n    public static string ToUpperCase(this string input) =&gt; input.ToUpper();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Extension method\u2019lar\u0131 belirli bir ba\u011flam veya amaca y\u00f6nelik kapsama s\u0131n\u0131rlay\u0131n.</p> <pre><code>public static class StringExtensions\n{\n    public static string ToUpperCase(this string input) =&gt; input.ToUpper();\n}\n</code></pre>"},{"location":"csharp/extension-methods/#2-extension-methodlar-yanls-sekilde-adlandrmak","title":"2. Extension Methodlar\u0131 Yanl\u0131\u015f \u015eekilde Adland\u0131rmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Extension method\u2019lara anlaml\u0131 olmayan isimler vermek.</p> <pre><code>public static string Func(this string input) =&gt; input.ToUpper();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Extension method\u2019lara anlaml\u0131 ve a\u00e7\u0131klay\u0131c\u0131 isimler verin.</p> <pre><code>public static string ToUpperCase(this string input) =&gt; input.ToUpper();\n</code></pre>"},{"location":"csharp/extension-methods/#3-extension-methodlarda-gereksiz-kontroller","title":"3. Extension Methodlarda Gereksiz Kontroller","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gerekli olmayan null kontrolleri yapmak.</p> <pre><code>public static string SafeToUpperCase(this string input)\n{\n    if (input == null) return string.Empty;\n    return input.ToUpper();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gereksiz kontrollerden ka\u00e7\u0131n\u0131n ve kullan\u0131c\u0131y\u0131 y\u00f6nlendirin.</p> <pre><code>public static string ToUpperCase(this string input) =&gt; input?.ToUpper() ?? throw new ArgumentNullException(nameof(input));\n</code></pre>"},{"location":"csharp/extension-methods/#4-gereksiz-parametreler-kullanmak","title":"4. Gereksiz Parametreler Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Extension method\u2019da gereksiz ek parametreler kullanmak.</p> <pre><code>public static string AppendSuffix(this string input, string suffix)\n{\n    return input + suffix;\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gereksiz parametrelerden ka\u00e7\u0131n\u0131n.</p> <pre><code>public static string AppendSuffix(this string input, string suffix = \"Default\")\n{\n    return input + suffix;\n}\n</code></pre>"},{"location":"csharp/extension-methods/#5-extension-methodlar-karmask-hale-getirmek","title":"5. Extension Methodlar\u0131 Karma\u015f\u0131k Hale Getirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7ok fazla i\u015flevselli\u011fi tek bir extension method\u2019da birle\u015ftirmek.</p> <pre><code>public static string TransformText(this string input, bool toUpper, bool addSuffix)\n{\n    var result = input;\n    if (toUpper) result = result.ToUpper();\n    if (addSuffix) result += \"_Suffix\";\n    return result;\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130\u015flevleri birden fazla extension method\u2019a b\u00f6l\u00fcn.</p> <pre><code>public static string ToUpperCase(this string input) =&gt; input.ToUpper();\n\npublic static string AddSuffix(this string input, string suffix) =&gt; input + suffix;\n</code></pre>"},{"location":"csharp/extension-methods/#6-extension-methodlarn-kullanmn-belgelememek","title":"6. Extension Methodlar\u0131n Kullan\u0131m\u0131n\u0131 Belgelememek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Extension method\u2019lar\u0131n nas\u0131l kullan\u0131laca\u011f\u0131n\u0131 a\u00e7\u0131klamamak.</p> <pre><code>public static string AddPrefix(this string input, string prefix)\n{\n    return prefix + input;\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Extension method\u2019lar\u0131n kullan\u0131m\u0131n\u0131 yorumlarla a\u00e7\u0131klay\u0131n.</p> <pre><code>/// &lt;summary&gt;\n/// Belirtilen metnin ba\u015f\u0131na bir \u00f6nek ekler.\n/// &lt;/summary&gt;\n/// &lt;param name=\"input\"&gt;Orijinal metin.&lt;/param&gt;\n/// &lt;param name=\"prefix\"&gt;Eklenecek \u00f6nek.&lt;/param&gt;\n/// &lt;returns&gt;\u00d6nek eklenmi\u015f metin.&lt;/returns&gt;\npublic static string AddPrefix(this string input, string prefix)\n{\n    return prefix + input;\n}\n</code></pre>"},{"location":"csharp/immutable-collections/","title":"Immutable Collections","text":"<p>Immutable collections, veri yap\u0131lar\u0131nda de\u011fi\u015fiklik yap\u0131lmas\u0131n\u0131 engelleyerek veri tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flar. Performans avantajlar\u0131 ve e\u015f zamanl\u0131 i\u015flemlerde g\u00fcvenilirlik sunar. Ancak, yanl\u0131\u015f kullan\u0131mlar\u0131 gereksiz bellek t\u00fcketimine ve karma\u015f\u0131kl\u0131\u011fa yol a\u00e7abilir.</p>"},{"location":"csharp/immutable-collections/#1-immutable-collections-yerine-mutable-collections-kullanmak","title":"1. Immutable Collections Yerine Mutable Collections Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Veri tutarl\u0131l\u0131\u011f\u0131 gerektiren durumlarda mutable koleksiyonlar\u0131 kullanmak.</p> <pre><code>var list = new List&lt;int&gt; { 1, 2, 3 };\nlist.Add(4); // Liste de\u011fi\u015ftirilebilir\nConsole.WriteLine(string.Join(\", \", list));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: De\u011fi\u015ftirilemez bir koleksiyon kullanarak veri tutarl\u0131l\u0131\u011f\u0131n\u0131 koruyun.</p> <pre><code>var immutableList = ImmutableList.Create(1, 2, 3);\nvar newList = immutableList.Add(4); // Yeni bir koleksiyon olu\u015fturulur\nConsole.WriteLine(string.Join(\", \", newList));\n</code></pre>"},{"location":"csharp/immutable-collections/#2-performans-goz-ard-etmek","title":"2. Performans\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri k\u00fcmelerinde gereksiz immutable d\u00f6n\u00fc\u015f\u00fcmler yapmak.</p> <pre><code>var list = new List&lt;int&gt;();\nfor (int i = 0; i &lt; 1000; i++)\n{\n    list = list.Append(i).ToList(); // Her d\u00f6n\u00fc\u015f\u00fcmde yeni bir liste olu\u015fturulur\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Immutable koleksiyonlarla performans dostu i\u015flemler ger\u00e7ekle\u015ftirin.</p> <pre><code>var builder = ImmutableList.CreateBuilder&lt;int&gt;();\nfor (int i = 0; i &lt; 1000; i++)\n{\n    builder.Add(i);\n}\nvar immutableList = builder.ToImmutable();\nConsole.WriteLine(string.Join(\", \", immutableList));\n</code></pre>"},{"location":"csharp/immutable-collections/#3-immutable-collections-yanls-anlamak","title":"3. Immutable Collections\u2019\u0131 Yanl\u0131\u015f Anlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Immutable koleksiyonun mevcut koleksiyonu de\u011fi\u015ftirdi\u011fini d\u00fc\u015f\u00fcnmek.</p> <pre><code>var immutableList = ImmutableList.Create(1, 2, 3);\nimmutableList.Add(4); // Yeni koleksiyon olu\u015fturur, ama atama yap\u0131lmaz\nConsole.WriteLine(string.Join(\", \", immutableList)); // Eski liste\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: De\u011fi\u015fiklikleri yeni bir koleksiyona atay\u0131n.</p> <pre><code>var immutableList = ImmutableList.Create(1, 2, 3);\nvar updatedList = immutableList.Add(4);\nConsole.WriteLine(string.Join(\", \", updatedList)); // G\u00fcncellenmi\u015f liste\n</code></pre>"},{"location":"csharp/immutable-collections/#4-gereksiz-veri-kopyalama","title":"4. Gereksiz Veri Kopyalama","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her i\u015flemde yeni bir immutable koleksiyon olu\u015fturmak.</p> <pre><code>var immutableList = ImmutableList.Create&lt;int&gt;();\nfor (int i = 0; i &lt; 100; i++)\n{\n    immutableList = immutableList.Add(i); // Her seferinde yeni bir liste olu\u015fturulur\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Builder nesnesi ile gereksiz kopyalamalardan ka\u00e7\u0131n\u0131n.</p> <pre><code>var builder = ImmutableList.CreateBuilder&lt;int&gt;();\nfor (int i = 0; i &lt; 100; i++)\n{\n    builder.Add(i);\n}\nvar immutableList = builder.ToImmutable();\nConsole.WriteLine(string.Join(\", \", immutableList));\n</code></pre>"},{"location":"csharp/immutable-collections/#5-yanls-koleksiyon-turunu-kullanmak","title":"5. Yanl\u0131\u015f Koleksiyon T\u00fcr\u00fcn\u00fc Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u0130htiyaca uygun olmayan immutable koleksiyon t\u00fcrlerini kullanmak.</p> <pre><code>var immutableStack = ImmutableStack&lt;int&gt;.Empty;\nimmutableStack = immutableStack.Push(1);\nimmutableStack = immutableStack.Push(2);\nConsole.WriteLine(immutableStack.Peek()); // 2\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130\u015flem t\u00fcr\u00fcne uygun immutable koleksiyon se\u00e7in.</p> <pre><code>var immutableQueue = ImmutableQueue&lt;int&gt;.Empty;\nimmutableQueue = immutableQueue.Enqueue(1);\nimmutableQueue = immutableQueue.Enqueue(2);\nConsole.WriteLine(immutableQueue.Peek()); // 1\n</code></pre>"},{"location":"csharp/local-functions/","title":"Local Functions","text":"<p>Local functions, bir metot i\u00e7inde tan\u0131mlanan ve yaln\u0131zca o metot i\u00e7inde kullan\u0131lan k\u00fc\u00e7\u00fck i\u015flevlerdir. Bu, kodun okunabilirli\u011fini art\u0131r\u0131r, gereksiz metot tan\u0131mlamalar\u0131n\u0131 \u00f6nler ve kapsam\u0131 daraltarak kodun daha d\u00fczenli olmas\u0131n\u0131 sa\u011flar. Ancak, yanl\u0131\u015f kullan\u0131mlar performans sorunlar\u0131na ve karma\u015f\u0131kl\u0131\u011fa yol a\u00e7abilir.</p>"},{"location":"csharp/local-functions/#1-gereksiz-local-function-kullanm","title":"1. Gereksiz Local Function Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Anlaml\u0131 bir gereksinim olmadan local function tan\u0131mlamak.</p> <pre><code>void PerformCalculation()\n{\n    void Helper()\n    {\n        Console.WriteLine(\"Hesaplama tamamland\u0131.\");\n    }\n    Helper();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Local functions yaln\u0131zca kodun anlam\u0131n\u0131 ve okunabilirli\u011fini art\u0131rmak i\u00e7in kullan\u0131lmal\u0131d\u0131r.</p> <pre><code>void PerformCalculation()\n{\n    void AddNumbers(int x, int y) =&gt; Console.WriteLine($\"Sonu\u00e7: {x + y}\");\n    AddNumbers(5, 10);\n}\n</code></pre>"},{"location":"csharp/local-functions/#2-parametre-gecislerini-yanls-kullanmak","title":"2. Parametre Ge\u00e7i\u015flerini Yanl\u0131\u015f Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz parametre ge\u00e7i\u015fleri yapmak.</p> <pre><code>void PrintMessage(string message)\n{\n    void Display(string msg) =&gt; Console.WriteLine(msg);\n    Display(message);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gereksiz parametre ge\u00e7i\u015flerinden ka\u00e7\u0131n\u0131n.</p> <pre><code>void PrintMessage(string message)\n{\n    void Display() =&gt; Console.WriteLine(message);\n    Display();\n}\n</code></pre>"},{"location":"csharp/local-functions/#3-local-function-yeniden-kullanlamaz-hale-getirmek","title":"3. Local Function\u2019\u0131 Yeniden Kullan\u0131lamaz Hale Getirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Local function\u2019\u0131 yeniden kullan\u0131labilir kod par\u00e7ac\u0131klar\u0131 i\u00e7in kullanmak.</p> <pre><code>void ProcessData(int data)\n{\n    void MultiplyByTwo(int value) =&gt; Console.WriteLine(value * 2);\n    MultiplyByTwo(data);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Yeniden kullan\u0131labilir kodlar i\u00e7in metotlar yerine local function kullan\u0131m\u0131 s\u0131n\u0131rl\u0131d\u0131r.</p> <pre><code>void MultiplyByTwo(int value) =&gt; Console.WriteLine(value * 2);\nMultiplyByTwo(5);\nMultiplyByTwo(10);\n</code></pre>"},{"location":"csharp/local-functions/#4-hatalar-yonetmemek","title":"4. Hatalar\u0131 Y\u00f6netmemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Local function\u2019larda hatalar\u0131 g\u00f6z ard\u0131 etmek.</p> <pre><code>void PerformDivision(int x, int y)\n{\n    int Divide() =&gt; x / y; // Hata riski\n    Console.WriteLine(Divide());\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Local function i\u00e7inde hata y\u00f6netimini sa\u011flay\u0131n.</p> <pre><code>void PerformDivision(int x, int y)\n{\n    int Divide()\n    {\n        if (y == 0) throw new DivideByZeroException(\"S\u0131f\u0131ra b\u00f6lme hatas\u0131.\");\n        return x / y;\n    }\n\n    try\n    {\n        Console.WriteLine(Divide());\n    }\n    catch (DivideByZeroException ex)\n    {\n        Console.WriteLine($\"Hata: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"csharp/local-functions/#5-isimlendirme-standartlarn-ihmal-etmek","title":"5. \u0130simlendirme Standartlar\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Anlams\u0131z ve k\u0131sa isimler kullanmak.</p> <pre><code>void DoTask()\n{\n    void Fn() =&gt; Console.WriteLine(\"G\u00f6rev tamamland\u0131.\");\n    Fn();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Local function\u2019lar i\u00e7in anlaml\u0131 isimler kullan\u0131n.</p> <pre><code>void DoTask()\n{\n    void PrintCompletionMessage() =&gt; Console.WriteLine(\"G\u00f6rev tamamland\u0131.\");\n    PrintCompletionMessage();\n}\n</code></pre>"},{"location":"csharp/local-functions/#6-gereksiz-bagmllk-eklemek","title":"6. Gereksiz Ba\u011f\u0131ml\u0131l\u0131k Eklemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Local function\u2019larda gereksiz ba\u011f\u0131ml\u0131l\u0131klar tan\u0131mlamak.</p> <pre><code>void ProcessData(int value)\n{\n    string message = \"Sonu\u00e7\";\n    void DisplayResult(int result) =&gt; Console.WriteLine($\"{message}: {result}\");\n    DisplayResult(value * 2);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin.</p> <pre><code>void ProcessData(int value)\n{\n    void DisplayResult(int result) =&gt; Console.WriteLine($\"Sonu\u00e7: {result}\");\n    DisplayResult(value * 2);\n}\n</code></pre>"},{"location":"csharp/null-handling/","title":"Null Handling","text":"<p>C# dilinde <code>null</code> de\u011ferlerin yanl\u0131\u015f y\u00f6netimi, runtime hatalar\u0131na ve beklenmeyen davran\u0131\u015flara yol a\u00e7abilir.</p>"},{"location":"csharp/null-handling/#1-null-kontrollerini-ihmal-etmek","title":"1. Null Kontrollerini \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>null</code> kontrolleri yapmamak.</p> <pre><code>public void PrintMessage(string message)\n{\n    Console.WriteLine(message.Length); // NullReferenceException olu\u015fabilir\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>null</code> kontrolleri yaparak hatalar\u0131 \u00f6nleyin.</p> <pre><code>public void PrintMessage(string message)\n{\n    if (message == null) throw new ArgumentNullException(nameof(message));\n    Console.WriteLine(message.Length);\n}\n</code></pre>"},{"location":"csharp/null-handling/#2-null-icin-magic-value-kullanm","title":"2. <code>null</code> i\u00e7in Magic Value Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>null</code> yerine anlams\u0131z bir magic value kullanmak.</p> <pre><code>public string GetMessage() =&gt; \"\";\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>null</code> i\u00e7in do\u011fru bir model kullanarak daha okunabilir kod yaz\u0131n.</p> <pre><code>public string GetMessage() =&gt; null;\n</code></pre>"},{"location":"csharp/null-handling/#3-null-coalescing-operatorunu-kullanmay-unutmak","title":"3. Null Coalescing Operat\u00f6r\u00fcn\u00fc Kullanmay\u0131 Unutmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>null</code> kontrol\u00fcn\u00fc manuel olarak yapmak.</p> <pre><code>var result = value != null ? value : \"Default\";\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Null coalescing operat\u00f6r\u00fc (<code>??</code>) kullanarak kodu sadele\u015ftirin.</p> <pre><code>var result = value ?? \"Default\";\n</code></pre>"},{"location":"csharp/null-handling/#4-null-conditional-operatorunu-ihmal-etmek","title":"4. Null Conditional Operat\u00f6r\u00fcn\u00fc \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Null kontrol\u00fc yapmadan zincirleme eri\u015fim.</p> <pre><code>var length = person.Address.City.Length; // NullReferenceException riski\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Null conditional operat\u00f6r\u00fcn\u00fc (<code>?.</code>) kullanarak hatalar\u0131 \u00f6nleyin.</p> <pre><code>var length = person?.Address?.City?.Length;\n</code></pre>"},{"location":"csharp/null-handling/#5-nullablet-kullanmn-goz-ard-etmek","title":"5. <code>Nullable&lt;T&gt;</code> Kullan\u0131m\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Nullable de\u011fer t\u00fcrleri ile \u00e7al\u0131\u015f\u0131rken manuel null kontrol\u00fc yapmak.</p> <pre><code>int? number = null;\nif (number.HasValue) Console.WriteLine(number.Value);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>Nullable&lt;T&gt;</code> \u00f6zelliklerini kullanarak kodu sadele\u015ftirin.</p> <pre><code>int? number = null;\nConsole.WriteLine(number ?? 0); // Varsay\u0131lan de\u011feri kullan\u0131r\n</code></pre>"},{"location":"csharp/null-handling/#6-null-donduren-metotlar-kullanmak","title":"6. <code>null</code> D\u00f6nd\u00fcren Metotlar Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>null</code> d\u00f6nd\u00fcren metotlar kullanarak hataya a\u00e7\u0131k bir yap\u0131 olu\u015fturmak.</p> <pre><code>public string GetData()\n{\n    return null; // NullReferenceException riski\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Null Object Pattern veya alternatif bir \u00e7\u00f6z\u00fcm kullan\u0131n.</p> <pre><code>public string GetData()\n{\n    return string.Empty; // Null yerine bo\u015f bir de\u011fer d\u00f6ner\n}\n</code></pre>"},{"location":"csharp/null-handling/#7-argumentnullexception-ile-detay-saglamamak","title":"7. <code>ArgumentNullException</code> ile Detay Sa\u011flamamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>ArgumentNullException</code> kullan\u0131rken detay sa\u011flamamak.</p> <pre><code>throw new ArgumentNullException();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Parametre ad\u0131 ve a\u00e7\u0131klama ekleyerek detay sa\u011flay\u0131n.</p> <pre><code>throw new ArgumentNullException(nameof(parameter), \"Parametre bo\u015f olamaz.\");\n</code></pre>"},{"location":"csharp/pattern-matching/","title":"Pattern Matching","text":"<p>C# dilinde Pattern Matching, daha okunabilir ve s\u00fcrd\u00fcr\u00fclebilir kod yazmay\u0131 sa\u011flayan g\u00fc\u00e7l\u00fc bir ara\u00e7t\u0131r. Ancak, yanl\u0131\u015f kullan\u0131mlar performans sorunlar\u0131na ve karma\u015f\u0131k kod yap\u0131lar\u0131na neden olabilir.</p>"},{"location":"csharp/pattern-matching/#1-is-operatoru-ile-gereksiz-tur-donusumleri","title":"1. <code>is</code> Operat\u00f6r\u00fc ile Gereksiz T\u00fcr D\u00f6n\u00fc\u015f\u00fcmleri","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcr kontrol\u00fc yapt\u0131ktan sonra manuel t\u00fcr d\u00f6n\u00fc\u015f\u00fcm\u00fc.</p> <pre><code>if (obj is string)\n{\n    var str = (string)obj;\n    Console.WriteLine(str.ToUpper());\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>is</code> operat\u00f6r\u00fcnde do\u011frudan t\u00fcr d\u00f6n\u00fc\u015f\u00fcm\u00fcn\u00fc kullan\u0131n.</p> <pre><code>if (obj is string str)\n{\n    Console.WriteLine(str.ToUpper());\n}\n</code></pre>"},{"location":"csharp/pattern-matching/#2-switch-ifadelerinde-sabit-degerler-kullanmamak","title":"2. <code>switch</code> \u0130fadelerinde Sabit De\u011ferler Kullanmamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>switch</code> ifadelerinde sabit de\u011ferler yerine karma\u015f\u0131k ifadeler kullanmak.</p> <pre><code>switch (input.Length)\n{\n    case int n when n &gt; 5:\n        Console.WriteLine(\"Uzun bir metin.\");\n        break;\n    default:\n        Console.WriteLine(\"K\u0131sa bir metin.\");\n        break;\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sabit de\u011ferler kullanarak kodun okunabilirli\u011fini art\u0131r\u0131n.</p> <pre><code>switch (input.Length)\n{\n    case &gt; 5:\n        Console.WriteLine(\"Uzun bir metin.\");\n        break;\n    default:\n        Console.WriteLine(\"K\u0131sa bir metin.\");\n        break;\n}\n</code></pre>"},{"location":"csharp/pattern-matching/#3-when-kosullarn-yanls-kullanmak","title":"3. <code>when</code> Ko\u015fullar\u0131n\u0131 Yanl\u0131\u015f Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>when</code> ko\u015fullar\u0131nda gereksiz kontrol yapmak.</p> <pre><code>if (obj is int i &amp;&amp; i &gt; 10)\n{\n    Console.WriteLine(\"10'dan b\u00fcy\u00fck bir say\u0131.\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>when</code> ifadesini <code>is</code> ile entegre ederek kodu sadele\u015ftirin.</p> <pre><code>if (obj is int i when i &gt; 10)\n{\n    Console.WriteLine(\"10'dan b\u00fcy\u00fck bir say\u0131.\");\n}\n</code></pre>"},{"location":"csharp/pattern-matching/#4-switch-ifadelerinde-tur-kontrollerini-karmask-hale-getirmek","title":"4. <code>switch</code> \u0130fadelerinde T\u00fcr Kontrollerini Karma\u015f\u0131k Hale Getirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Farkl\u0131 t\u00fcrler i\u00e7in ayr\u0131 <code>if</code> bloklar\u0131 kullanmak.</p> <pre><code>if (obj is string str)\n{\n    Console.WriteLine($\"Metin: {str}\");\n}\nelse if (obj is int num)\n{\n    Console.WriteLine($\"Say\u0131: {num}\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>switch</code> ifadesini kullanarak t\u00fcr kontrollerini d\u00fczenleyin.</p> <pre><code>switch (obj)\n{\n    case string str:\n        Console.WriteLine($\"Metin: {str}\");\n        break;\n    case int num:\n        Console.WriteLine($\"Say\u0131: {num}\");\n        break;\n    default:\n        Console.WriteLine(\"Bilinmeyen t\u00fcr.\");\n        break;\n}\n</code></pre>"},{"location":"csharp/pattern-matching/#5-destructuring-ile-pattern-matchingi-ihmal-etmek","title":"5. Destructuring ile Pattern Matching\u2019i \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Karma\u015f\u0131k veri yap\u0131lar\u0131n\u0131 manuel olarak \u00e7\u00f6z\u00fcmlemek.</p> <pre><code>if (point is Point)\n{\n    var p = (Point)point;\n    Console.WriteLine($\"X: {p.X}, Y: {p.Y}\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Destructuring ile kodu sadele\u015ftirin.</p> <pre><code>if (point is Point(var x, var y))\n{\n    Console.WriteLine($\"X: {x}, Y: {y}\");\n}\n</code></pre>"},{"location":"csharp/pattern-matching/#6-performans-goz-ard-etmek","title":"6. Performans\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri yap\u0131lar\u0131nda Pattern Matching\u2019i optimize etmeden kullanmak.</p> <pre><code>foreach (var item in collection)\n{\n    if (item is string str &amp;&amp; str.Contains(\"test\"))\n    {\n        Console.WriteLine(str);\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Pattern Matching\u2019i erken \u00e7\u0131k\u0131\u015f mekanizmalar\u0131 ile birle\u015ftirin.</p> <pre><code>foreach (var str in collection.OfType&lt;string&gt;())\n{\n    if (str.Contains(\"test\"))\n    {\n        Console.WriteLine(str);\n    }\n}\n</code></pre>"},{"location":"csharp/ranges-indices/","title":"Ranges and Indices","text":"<p>C# 8.0 ile tan\u0131t\u0131lan Ranges (<code>..</code>) ve Indices (<code>^</code>) \u00f6zellikleri, koleksiyonlar \u00fczerinde daha okunabilir ve k\u0131sa i\u015flemler yapman\u0131z\u0131 sa\u011flar. Ancak, bu \u00f6zelliklerin yanl\u0131\u015f kullan\u0131m\u0131 beklenmedik sonu\u00e7lara veya performans sorunlar\u0131na neden olabilir.</p>"},{"location":"csharp/ranges-indices/#1-anlaml-kullanm-goz-ard-etmek","title":"1. Anlaml\u0131 Kullan\u0131m\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Geleneksel y\u00f6ntemlerle gereksiz karma\u015f\u0131k i\u015flemler yapmak.</p> <pre><code>var array = new int[] { 1, 2, 3, 4, 5 };\nvar lastThree = array.Skip(array.Length - 3).ToArray();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Indices \u00f6zelli\u011fini kullanarak i\u015flemleri basitle\u015ftirin.</p> <pre><code>var array = new int[] { 1, 2, 3, 4, 5 };\nvar lastThree = array[^3..];\n</code></pre>"},{"location":"csharp/ranges-indices/#2-negatif-indices-kullanmn-yanls-anlamak","title":"2. Negatif Indices Kullan\u0131m\u0131n\u0131 Yanl\u0131\u015f Anlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Negatif indekslerin yanl\u0131\u015f yorumlanmas\u0131.</p> <pre><code>var array = new int[] { 1, 2, 3, 4, 5 };\nvar invalidIndex = array[-1]; // Derleme hatas\u0131\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Indices ile son elemanlara do\u011fru eri\u015fim sa\u011flay\u0131n.</p> <pre><code>var array = new int[] { 1, 2, 3, 4, 5 };\nvar lastElement = array[^1]; // Son eleman\n</code></pre>"},{"location":"csharp/ranges-indices/#3-ranges-ile-performans-goz-ard-etmek","title":"3. Ranges ile Performans\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri setlerinde gereksiz kopyalamalar yapmak.</p> <pre><code>var data = Enumerable.Range(1, 1000000).ToArray();\nvar subset = data.Skip(100).Take(50).ToArray(); // Gereksiz kopyalama\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ranges ile performans\u0131 optimize edin.</p> <pre><code>var data = Enumerable.Range(1, 1000000).ToArray();\nvar subset = data[100..150]; // Kopyalama minimal\n</code></pre>"},{"location":"csharp/ranges-indices/#4-koleksiyonlarn-dsnda-ranges-kullanm","title":"4. Koleksiyonlar\u0131n D\u0131\u015f\u0131nda Ranges Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ranges ve Indices \u00f6zelliklerini uygun olmayan veri t\u00fcrlerinde kullanmak.</p> <pre><code>string text = \"Hello World\";\nvar invalidRange = text[^5..]; // Sadece dizi ve liste t\u00fcrlerinde ge\u00e7erli\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ranges ve Indices \u00f6zelliklerini do\u011fru veri t\u00fcrleriyle kullan\u0131n.</p> <pre><code>string text = \"Hello World\";\nvar substring = text[^5..]; // Ge\u00e7erli ve etkili kullan\u0131m\n</code></pre>"},{"location":"csharp/ranges-indices/#5-start-ve-end-indicesi-yanls-tanmlamak","title":"5. Start ve End Indices\u2019i Yanl\u0131\u015f Tan\u0131mlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ba\u015flang\u0131\u00e7 ve biti\u015f indekslerini kar\u0131\u015ft\u0131rmak.</p> <pre><code>var array = new int[] { 1, 2, 3, 4, 5 };\nvar invalidRange = array[5..3]; // Hata: Biti\u015f indeksi ba\u015flang\u0131\u00e7tan \u00f6nce\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ranges i\u00e7in do\u011fru ba\u015flang\u0131\u00e7 ve biti\u015f indekslerini belirleyin.</p> <pre><code>var array = new int[] { 1, 2, 3, 4, 5 };\nvar validRange = array[3..5]; // Do\u011fru kullan\u0131m\n</code></pre>"},{"location":"csharp/ranges-indices/#6-ranges-ve-indicesi-birlikte-kullanmay-goz-ard-etmek","title":"6. Ranges ve Indices\u2019i Birlikte Kullanmay\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00d6zellikleri birlikte kullanmamak.</p> <pre><code>var array = new int[] { 1, 2, 3, 4, 5 };\nvar firstThree = array.Take(3).ToArray(); // Gereksiz karma\u015f\u0131k\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Indices ve Ranges\u2019i birlikte kullanarak daha temiz bir yap\u0131 elde edin.</p> <pre><code>var array = new int[] { 1, 2, 3, 4, 5 };\nvar firstThree = array[..3]; // \u0130lk \u00fc\u00e7 eleman\n</code></pre>"},{"location":"csharp/record-types/","title":"Record Types","text":"<p>C# dilinde Record Types, immutable veri modelleri ve de\u011fer tabanl\u0131 e\u015fitlik kar\u015f\u0131la\u015ft\u0131rmalar\u0131 olu\u015fturmak i\u00e7in kullan\u0131lan modern bir yap\u0131d\u0131r. Yanl\u0131\u015f kullan\u0131m durumlar\u0131 Record Type\u2019lar\u0131n avantajlar\u0131n\u0131 azaltabilir.</p>"},{"location":"csharp/record-types/#1-recordlar-immutable-yapda-tutmamak","title":"1. Record\u2019lar\u0131 Immutable Yap\u0131da Tutmamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Record\u2019lar\u0131n alanlar\u0131n\u0131 de\u011fi\u015ftirilebilir (<code>mutable</code>) yapmak.</p> <pre><code>public record Person\n{\n    public string Name { get; set; } // De\u011fi\u015ftirilebilir\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Record\u2019lar\u0131 immutable yap\u0131da tutarak veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc sa\u011flay\u0131n.</p> <pre><code>public record Person(string Name);\n</code></pre>"},{"location":"csharp/record-types/#2-esitlik-karslastrmalarn-yanls-yaplandrmak","title":"2. E\u015fitlik Kar\u015f\u0131la\u015ft\u0131rmalar\u0131n\u0131 Yanl\u0131\u015f Yap\u0131land\u0131rmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: E\u015fitlik kar\u015f\u0131la\u015ft\u0131rmalar\u0131 i\u00e7in <code>class</code> kullanmak.</p> <pre><code>public class Person\n{\n    public string Name { get; set; }\n}\n\n// Reference e\u015fitli\u011fi kontrol edilir\nvar p1 = new Person { Name = \"Murat\" };\nvar p2 = new Person { Name = \"Murat\" };\nConsole.WriteLine(p1 == p2); // False\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Record Type kullanarak de\u011fer tabanl\u0131 e\u015fitli\u011fi etkinle\u015ftirin.</p> <pre><code>public record Person(string Name);\n\nvar p1 = new Person(\"Murat\");\nvar p2 = new Person(\"Murat\");\nConsole.WriteLine(p1 == p2); // True\n</code></pre>"},{"location":"csharp/record-types/#3-with-anahtar-kelimesini-yanls-kullanmak","title":"3. <code>with</code> Anahtar Kelimesini Yanl\u0131\u015f Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>with</code> ifadesini kullanmadan veri de\u011fi\u015ftirmeye \u00e7al\u0131\u015fmak.</p> <pre><code>var person = new Person(\"Murat\");\nperson.Name = \"Derin\"; // Derleme hatas\u0131\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>with</code> anahtar kelimesini kullanarak yeni bir Record \u00f6rne\u011fi olu\u015fturun.</p> <pre><code>var person = new Person(\"Murat\");\nvar updatedPerson = person with { Name = \"Derin\" };\n</code></pre>"},{"location":"csharp/record-types/#4-veri-modeli-icin-yanls-yap-secimi","title":"4. Veri Modeli \u0130\u00e7in Yanl\u0131\u015f Yap\u0131 Se\u00e7imi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Record Type yerine <code>class</code> veya <code>struct</code> kullanmak.</p> <pre><code>public class Address\n{\n    public string City { get; set; }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Immutable ve de\u011fer tabanl\u0131 e\u015fitlik gerektiren durumlar i\u00e7in Record Type kullan\u0131n.</p> <pre><code>public record Address(string City);\n</code></pre>"},{"location":"csharp/record-types/#5-recordlarn-performans-ozelliklerini-goz-ard-etmek","title":"5. Record\u2019lar\u0131n Performans \u00d6zelliklerini G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri yap\u0131lar\u0131 i\u00e7in Record Type kullanmak.</p> <pre><code>public record LargeRecord(string Data); // Performans sorunlar\u0131na neden olabilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: B\u00fcy\u00fck veri yap\u0131lar\u0131 i\u00e7in <code>class</code> kullanmay\u0131 de\u011ferlendirin.</p> <pre><code>public class LargeRecord\n{\n    public string Data { get; set; }\n}\n</code></pre>"},{"location":"csharp/record-types/#6-recordlar-yanls-kapsamda-kullanmak","title":"6. Record\u2019lar\u0131 Yanl\u0131\u015f Kapsamda Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Record Type\u2019lar\u0131 DTO (Data Transfer Object) d\u0131\u015f\u0131nda kullanmak.</p> <pre><code>public record Repository(string Name); // Yanl\u0131\u015f kullan\u0131m, record yerine class kullan\u0131lmal\u0131\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Record Type\u2019lar\u0131 DTO ve veri modelleri i\u00e7in kullan\u0131n.</p> <pre><code>public record PersonDto(string Name, int Age);\n</code></pre>"},{"location":"csharp/ref-returns-locals/","title":"Ref Returns and Ref Locals","text":"<p>Ref returns and locals, bellekteki veriye do\u011frudan referans eri\u015fimi sa\u011flayarak performans iyile\u015ftirmeleri sunar. Ancak, yanl\u0131\u015f kullan\u0131mlar veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc tehlikeye atabilir ve beklenmedik davran\u0131\u015flara yol a\u00e7abilir.</p>"},{"location":"csharp/ref-returns-locals/#1-gereksiz-ref-kullanm","title":"1. Gereksiz Ref Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz durumlarda <code>ref</code> kullan\u0131m\u0131.</p> <pre><code>ref int GetFirstElement(ref int[] array)\n{\n    return ref array[0];\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>ref</code> yaln\u0131zca b\u00fcy\u00fck veri yap\u0131lar\u0131nda veya kritik performans gerektiren durumlarda kullan\u0131lmal\u0131d\u0131r.</p> <pre><code>ref int GetFirstElement(ref int[] array)\n{\n    if (array.Length == 0)\n        throw new ArgumentException(\"Dizi bo\u015f olamaz.\", nameof(array));\n    return ref array[0];\n}\n</code></pre>"},{"location":"csharp/ref-returns-locals/#2-ref-returns-ile-veri-butunlugunu-tehlikeye-atmak","title":"2. Ref Returns ile Veri B\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc Tehlikeye Atmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Geri d\u00f6nen referans\u0131 g\u00fcvenli olmayan \u015fekilde de\u011fi\u015ftirmek.</p> <pre><code>ref int GetElement(ref int[] array, int index)\n{\n    return ref array[index];\n}\n\n// Veri yanl\u0131\u015fl\u0131kla de\u011fi\u015ftirilebilir.\nref int element = ref GetElement(ref numbers, 2);\nelement = -1;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Referans\u0131n kullan\u0131m\u0131 g\u00fcvenli hale getirilmelidir.</p> <pre><code>ref int GetElement(ref int[] array, int index)\n{\n    if (index &lt; 0 || index &gt;= array.Length)\n        throw new IndexOutOfRangeException(\"Ge\u00e7ersiz indeks.\");\n    return ref array[index];\n}\n</code></pre>"},{"location":"csharp/ref-returns-locals/#3-ref-locals-kullanmn-gereksiz-hale-getirmek","title":"3. Ref Locals Kullan\u0131m\u0131n\u0131 Gereksiz Hale Getirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ref locals kullan\u0131m\u0131n\u0131 gereksiz yere karma\u015f\u0131kla\u015ft\u0131rmak.</p> <pre><code>int[] numbers = { 1, 2, 3, 4 };\nref int firstNumber = ref numbers[0];\nfirstNumber = 10; // Karma\u015f\u0131k kullan\u0131m\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ref locals yaln\u0131zca bellek tasarrufu veya performans i\u00e7in gerekliyse kullan\u0131lmal\u0131d\u0131r.</p> <pre><code>ref int GetFirst(ref int[] array)\n{\n    return ref array[0];\n}\n\nref int first = ref GetFirst(ref numbers);\nfirst = 10;\n</code></pre>"},{"location":"csharp/ref-returns-locals/#4-buyuk-veri-yaplarnda-performans-optimize-etmemek","title":"4. B\u00fcy\u00fck Veri Yap\u0131lar\u0131nda Performans\u0131 Optimize Etmemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri yap\u0131lar\u0131nda kopyalama i\u015flemi yapmak.</p> <pre><code>int[] largeArray = GetLargeArray();\nint value = largeArray[0]; // Kopyalama\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>ref</code> kullanarak gereksiz kopyalamalar\u0131 \u00f6nlemek.</p> <pre><code>ref int GetLargeArrayFirstElement(ref int[] array)\n{\n    return ref array[0];\n}\n\nref int value = ref GetLargeArrayFirstElement(ref largeArray);\n</code></pre>"},{"location":"csharp/ref-returns-locals/#5-ref-readonly-kullanmn-ihmal-etmek","title":"5. <code>ref readonly</code> Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Sadece okunacak referanslar i\u00e7in <code>ref</code> kullanmak.</p> <pre><code>ref int GetReadOnlyValue(ref int[] array, int index)\n{\n    return ref array[index]; // Yazma riski mevcut\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sadece okunabilir referanslar i\u00e7in <code>ref readonly</code> kullan\u0131n.</p> <pre><code>ref readonly int GetReadOnlyValue(ref int[] array, int index)\n{\n    if (index &lt; 0 || index &gt;= array.Length)\n        throw new IndexOutOfRangeException(\"Ge\u00e7ersiz indeks.\");\n    return ref array[index];\n}\n</code></pre>"},{"location":"csharp/ref-returns-locals/#6-ref-kullanmn-dogru-belgelememek","title":"6. Ref Kullan\u0131m\u0131n\u0131 Do\u011fru Belgelememek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>ref</code> parametrelerin anlam\u0131n\u0131 a\u00e7\u0131klamamak.</p> <pre><code>ref int Process(ref int number)\n{\n    number *= 2;\n    return ref number;\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>ref</code> parametrelerin amac\u0131n\u0131 ve etkisini a\u00e7\u0131klamak i\u00e7in yorum ekleyin.</p> <pre><code>/// &lt;summary&gt;\n/// Verilen say\u0131y\u0131 ikiyle \u00e7arpar ve referans\u0131 geri d\u00f6ner.\n/// &lt;/summary&gt;\n/// &lt;param name=\"number\"&gt;\u0130\u015flenecek say\u0131.&lt;/param&gt;\n/// &lt;returns&gt;G\u00fcncellenen say\u0131n\u0131n referans\u0131.&lt;/returns&gt;\nref int Process(ref int number)\n{\n    number *= 2;\n    return ref number;\n}\n</code></pre>"},{"location":"csharp/safe-casting/","title":"Safe Casting with <code>as</code>","text":"<p>C# dilinde <code>as</code> anahtar kelimesi, t\u00fcr d\u00f6n\u00fc\u015f\u00fcmlerini g\u00fcvenli bir \u015fekilde ger\u00e7ekle\u015ftirmek i\u00e7in kullan\u0131lan bir ara\u00e7t\u0131r. Yanl\u0131\u015f kullan\u0131mlar, beklenmedik hatalara ve kod karma\u015f\u0131kl\u0131\u011f\u0131na yol a\u00e7abilir.</p>"},{"location":"csharp/safe-casting/#1-as-kullanmn-yanls-yonetmek","title":"1. <code>as</code> Kullan\u0131m\u0131n\u0131 Yanl\u0131\u015f Y\u00f6netmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>as</code> d\u00f6n\u00fc\u015f\u00fcm\u00fcnden sonra null kontrol\u00fc yapmamak.</p> <pre><code>object obj = \"Hello, World!\";\nstring message = obj as string;\nConsole.WriteLine(message.Length); // NullReferenceException riski\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>as</code> d\u00f6n\u00fc\u015f\u00fcm\u00fcnden sonra null kontrol\u00fc yaparak hatalar\u0131 \u00f6nleyin.</p> <pre><code>object obj = \"Hello, World!\";\nstring message = obj as string;\nif (message != null)\n{\n    Console.WriteLine(message.Length);\n}\nelse\n{\n    Console.WriteLine(\"D\u00f6n\u00fc\u015f\u00fcm ba\u015far\u0131s\u0131z.\");\n}\n</code></pre>"},{"location":"csharp/safe-casting/#2-as-yerine-hatal-cast-kullanm","title":"2. <code>as</code> Yerine Hatal\u0131 Cast Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcr d\u00f6n\u00fc\u015f\u00fcm\u00fcnde do\u011frudan cast kullanmak.</p> <pre><code>object obj = 123;\nstring text = (string)obj; // InvalidCastException\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: T\u00fcr d\u00f6n\u00fc\u015f\u00fcm\u00fcnde g\u00fcvenli bir \u015fekilde <code>as</code> kullan\u0131n.</p> <pre><code>object obj = 123;\nstring text = obj as string;\nif (text == null)\n{\n    Console.WriteLine(\"D\u00f6n\u00fc\u015f\u00fcm ba\u015far\u0131s\u0131z.\");\n}\n</code></pre>"},{"location":"csharp/safe-casting/#3-hedef-turu-yanls-belirlemek","title":"3. Hedef T\u00fcr\u00fc Yanl\u0131\u015f Belirlemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Uygunsuz hedef t\u00fcrle <code>as</code> d\u00f6n\u00fc\u015f\u00fcm\u00fc yapmak.</p> <pre><code>object obj = new List&lt;int&gt;();\nvar str = obj as string; // Null d\u00f6ner \u00e7\u00fcnk\u00fc t\u00fcr uyumsuz\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hedef t\u00fcr\u00fc do\u011fru bir \u015fekilde belirlemek.</p> <pre><code>object obj = new List&lt;int&gt;();\nvar list = obj as List&lt;int&gt;;\nif (list != null)\n{\n    Console.WriteLine($\"Listede {list.Count} eleman var.\");\n}\n</code></pre>"},{"location":"csharp/safe-casting/#4-alternatif-kontrolleri-goz-ard-etmek","title":"4. Alternatif Kontrolleri G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yaln\u0131zca <code>as</code> kullanarak d\u00f6n\u00fc\u015f\u00fcm kontrol\u00fc yapmak.</p> <pre><code>object obj = \"Test String\";\nstring text = obj as string;\nif (text != null)\n{\n    Console.WriteLine(text.ToUpper());\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>is</code> ifadesi ile d\u00f6n\u00fc\u015f\u00fcm\u00fcn uygunlu\u011funu kontrol edin.</p> <pre><code>object obj = \"Test String\";\nif (obj is string text)\n{\n    Console.WriteLine(text.ToUpper());\n}\n</code></pre>"},{"location":"csharp/safe-casting/#5-karmask-kontrolleri-as-ile-birlestirmek","title":"5. Karma\u015f\u0131k Kontrolleri <code>as</code> ile Birle\u015ftirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7ok fazla kontrol\u00fc birle\u015ftirerek kodu karma\u015f\u0131k hale getirmek.</p> <pre><code>object obj = \"Hello\";\nif (obj != null &amp;&amp; obj is string &amp;&amp; obj.ToString().Length &gt; 5)\n{\n    Console.WriteLine(\"Ge\u00e7erli string.\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Kodun okunabilirli\u011fini art\u0131rmak i\u00e7in kontrol\u00fc sadele\u015ftirin.</p> <pre><code>if (obj is string text &amp;&amp; text.Length &gt; 5)\n{\n    Console.WriteLine(\"Ge\u00e7erli string.\");\n}\n</code></pre>"},{"location":"csharp/static-local-functions/","title":"Static Local Functions","text":"<p>Static local functions, C# dilinde performans ve g\u00fcvenlik avantajlar\u0131 sa\u011flamak i\u00e7in kullan\u0131labilir. Bu metotlar, d\u0131\u015f kapsamdaki hi\u00e7bir de\u011fi\u015fkene eri\u015femez ve bu nedenle bellek kullan\u0131m\u0131n\u0131 optimize eder. Ancak, yanl\u0131\u015f kullan\u0131mlar\u0131 kodun performans\u0131n\u0131 d\u00fc\u015f\u00fcrebilir ve anla\u015f\u0131labilirli\u011fini zorla\u015ft\u0131rabilir.</p>"},{"location":"csharp/static-local-functions/#1-gereksiz-static-local-function-kullanm","title":"1. Gereksiz Static Local Function Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Static local functions\u2019\u0131 gereksiz durumlarda kullanmak.</p> <pre><code>void CalculateSum(int a, int b)\n{\n    static int Add(int x, int y) =&gt; x + y; // Gereksiz static kullan\u0131m\u0131\n    Console.WriteLine(Add(a, b));\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Static local functions\u2019\u0131 yaln\u0131zca d\u0131\u015f kapsama eri\u015fim gerekmedi\u011finde kullan\u0131n.</p> <pre><code>void CalculateSum(int a, int b)\n{\n    int Add(int x, int y) =&gt; x + y;\n    Console.WriteLine(Add(a, b));\n}\n</code></pre>"},{"location":"csharp/static-local-functions/#2-ds-degiskenlere-erismeye-calsmak","title":"2. D\u0131\u015f De\u011fi\u015fkenlere Eri\u015fmeye \u00c7al\u0131\u015fmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Static local function i\u00e7inde d\u0131\u015f de\u011fi\u015fkenlere eri\u015fmek.</p> <pre><code>int multiplier = 2;\nvoid MultiplyAndPrint(int number)\n{\n    static int Multiply(int x) =&gt; x * multiplier; // Hata: Static metot d\u0131\u015f de\u011fi\u015fkenlere eri\u015femez\n    Console.WriteLine(Multiply(number));\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gerekli veriyi parametre olarak iletin.</p> <pre><code>int multiplier = 2;\nvoid MultiplyAndPrint(int number)\n{\n    static int Multiply(int x, int factor) =&gt; x * factor;\n    Console.WriteLine(Multiply(number, multiplier));\n}\n</code></pre>"},{"location":"csharp/static-local-functions/#3-anlamsz-isimlendirme","title":"3. Anlams\u0131z \u0130simlendirme","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Static local function i\u00e7in anlams\u0131z ve k\u0131sa isimler kullanmak.</p> <pre><code>void ProcessData(int data)\n{\n    static int Fn(int x) =&gt; x * 2;\n    Console.WriteLine(Fn(data));\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Metot isimlerini a\u00e7\u0131klay\u0131c\u0131 ve anlaml\u0131 se\u00e7in.</p> <pre><code>void ProcessData(int data)\n{\n    static int DoubleValue(int x) =&gt; x * 2;\n    Console.WriteLine(DoubleValue(data));\n}\n</code></pre>"},{"location":"csharp/static-local-functions/#4-performans-iyilestirmelerini-goz-ard-etmek","title":"4. Performans \u0130yile\u015ftirmelerini G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Performans avantaj\u0131 sa\u011flamayacak durumda static local function kullanmak.</p> <pre><code>void PrintNumbers()\n{\n    static void Print(int x) =&gt; Console.WriteLine(x);\n    for (int i = 0; i &lt; 5; i++)\n    {\n        Print(i); // Performans fark\u0131 yaratmaz\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Performans kritik durumlarda static local function tercih edin.</p> <pre><code>void ProcessLargeData(int[] numbers)\n{\n    static int Process(int x) =&gt; x * 2;\n    foreach (var number in numbers)\n    {\n        Console.WriteLine(Process(number));\n    }\n}\n</code></pre>"},{"location":"csharp/static-local-functions/#5-gereksiz-bagmllklar-eklemek","title":"5. Gereksiz Ba\u011f\u0131ml\u0131l\u0131klar Eklemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Static local function\u2019da d\u0131\u015f metotlara gereksiz ba\u011f\u0131ml\u0131l\u0131k eklemek.</p> <pre><code>void ProcessNumbers()\n{\n    static int AddAndDouble(int x, int y)\n    {\n        return (x + y) * 2;\n    }\n    Console.WriteLine(AddAndDouble(3, 5));\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gerekli ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize edin.</p> <pre><code>void ProcessNumbers()\n{\n    static int DoubleSum(int x, int y) =&gt; (x + y) * 2;\n    Console.WriteLine(DoubleSum(3, 5));\n}\n</code></pre>"},{"location":"csharp/string-interpolation/","title":"String Interpolation","text":"<p>String interpolation, metin ve de\u011fi\u015fkenleri birle\u015ftirmek i\u00e7in etkili bir y\u00f6ntem sunar. Bu \u00f6zellik, kodunuzu daha okunabilir ve k\u0131sa hale getirebilir. Ancak, yanl\u0131\u015f kullan\u0131mlar performans sorunlar\u0131na ve okunabilirlik zorluklar\u0131na yol a\u00e7abilir.</p>"},{"location":"csharp/string-interpolation/#1-karmask-ifadeleri-string-interpolationda-kullanmak","title":"1. Karma\u015f\u0131k \u0130fadeleri String Interpolation\u2019da Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: String interpolation i\u00e7inde karma\u015f\u0131k ifadeler kullanmak.</p> <pre><code>var name = \"Murat\";\nvar greeting = $\"Merhaba, {name.ToUpper() + \"!\"} It is {DateTime.Now.ToString(\"HH:mm:ss\")}\";\nConsole.WriteLine(greeting);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Karma\u015f\u0131k ifadeleri interpolation d\u0131\u015f\u0131nda i\u015fleyin.</p> <pre><code>var name = \"Murat\".ToUpper();\nvar time = DateTime.Now.ToString(\"HH:mm:ss\");\nvar greeting = $\"Merhaba, {name}! It is {time}\";\nConsole.WriteLine(greeting);\n</code></pre>"},{"location":"csharp/string-interpolation/#2-gereksiz-stringformat-kullanm","title":"2. Gereksiz String.Format Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: String interpolation yerine gereksiz <code>string.Format</code> kullan\u0131m\u0131.</p> <pre><code>var name = \"Murat\";\nvar age = 33;\nvar message = string.Format(\"Ad: {0}, Yas: {1}\", name, age);\nConsole.WriteLine(message);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: String interpolation ile daha temiz bir yap\u0131 kullan\u0131n.</p> <pre><code>var name = \"Murat\";\nvar age = 33;\nvar message = $\"Ad: {name}, Yas: {age}\";\nConsole.WriteLine(message);\n</code></pre>"},{"location":"csharp/string-interpolation/#3-performans-goz-ard-etmek","title":"3. Performans\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck d\u00f6ng\u00fclerde string interpolation kullanarak performans\u0131 g\u00f6z ard\u0131 etmek.</p> <pre><code>for (int i = 0; i &lt; 1000; i++)\n{\n    var message = $\"Current value is: {i}\";\n    Console.WriteLine(message);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: StringBuilder gibi performans dostu \u00e7\u00f6z\u00fcmler kullan\u0131n.</p> <pre><code>var builder = new StringBuilder();\nfor (int i = 0; i &lt; 1000; i++)\n{\n    builder.AppendLine($\"Current value is: {i}\");\n}\nConsole.WriteLine(builder.ToString());\n</code></pre>"},{"location":"csharp/string-interpolation/#4-kultur-farkllklarn-goz-ard-etmek","title":"4. K\u00fclt\u00fcr Farkl\u0131l\u0131klar\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: String interpolation\u2019da k\u00fclt\u00fcr farkl\u0131l\u0131klar\u0131n\u0131 dikkate almamak.</p> <pre><code>var price = 1234.56;\nvar message = $\"Price: {price}\";\nConsole.WriteLine(message); // Farkl\u0131 k\u00fclt\u00fcrlerde yanl\u0131\u015f formatta g\u00f6r\u00fcnt\u00fclenebilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Belirli bir k\u00fclt\u00fcr\u00fc a\u00e7\u0131k\u00e7a belirterek formatlay\u0131n.</p> <pre><code>var price = 1234.56;\nvar message = $\"Price: {price.ToString(\"C\", CultureInfo.GetCultureInfo(\"en-US\"))}\";\nConsole.WriteLine(message);\n</code></pre>"},{"location":"csharp/string-interpolation/#5-cok-satrl-string-icinde-yanls-kullanm","title":"5. \u00c7ok Sat\u0131rl\u0131 String \u0130\u00e7inde Yanl\u0131\u015f Kullan\u0131m","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7ok sat\u0131rl\u0131 stringlerde string interpolation\u2019\u0131 d\u00fczensiz kullanmak.</p> <pre><code>var name = \"Murat\";\nvar message = $\"Merhaba, {name}\nHosgeldin!\";\nConsole.WriteLine(message);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u00c7ok sat\u0131rl\u0131 stringlerde d\u00fczenli bir yap\u0131 sa\u011flay\u0131n.</p> <pre><code>var name = \"Murat\";\nvar message = $\"Merhaba, {name}\nHosgeldin!\";\nConsole.WriteLine(message);\n</code></pre>"},{"location":"csharp/string-interpolation/#6-gereksiz-parantez-kullanm","title":"6. Gereksiz Parantez Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Interpolation ifadelerinde gereksiz parantezler eklemek.</p> <pre><code>var name = \"Murat\";\nvar message = $\"Merhaba, {(name)}!\";\nConsole.WriteLine(message);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gereksiz parantezlerden ka\u00e7\u0131n\u0131n.</p> <pre><code>var name = \"Murat\";\nvar message = $\"Merhaba, {name}!\";\nConsole.WriteLine(message);\n</code></pre>"},{"location":"csharp/target-typed-new/","title":"Target-Typed New","text":"<p>C# 9.0 ile gelen target-typed <code>new</code> \u00f6zelli\u011fi, t\u00fcr \u00e7\u0131kar\u0131m\u0131n\u0131 kolayla\u015ft\u0131rarak kodunuzu daha k\u0131sa ve okunabilir hale getirir. Ancak, yanl\u0131\u015f kullan\u0131mlar kodun anla\u015f\u0131labilirli\u011fini ve bak\u0131m\u0131n\u0131 zorla\u015ft\u0131rabilir.</p>"},{"location":"csharp/target-typed-new/#1-hedef-turun-belirsiz-oldugu-durumlar","title":"1. Hedef T\u00fcr\u00fcn Belirsiz Oldu\u011fu Durumlar","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hedef t\u00fcr\u00fcn a\u00e7\u0131k olmad\u0131\u011f\u0131 durumlarda target-typed <code>new</code> kullanmak.</p> <pre><code>var person = new(); // Hangi t\u00fcr oldu\u011fu anla\u015f\u0131lamaz\nperson.Name = \"Murat\";\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hedef t\u00fcr\u00fcn net bir \u015fekilde belirtildi\u011fi durumlarda kullan\u0131n.</p> <pre><code>Person person = new();\nperson.Name = \"Murat\";\n</code></pre> <p>Tan\u0131m: <pre><code>public class Person\n{\n    public string Name { get; set; }\n}\n</code></pre></p>"},{"location":"csharp/target-typed-new/#2-karmask-ifadelerde-target-typed-new-kullanmak","title":"2. Karma\u015f\u0131k \u0130fadelerde Target-Typed <code>new</code> Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Target-typed <code>new</code>\u2018i karma\u015f\u0131k ifadelerde kullanarak kodu daha az okunabilir hale getirmek.</p> <pre><code>var person = new(\"Murat\", 33); // \u00d6zellikle birden fazla constructor varsa belirsizlik yaratabilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Target-typed <code>new</code>\u2018i basit ifadelerde kullan\u0131n.</p> <pre><code>Person person = new(\"Murat\", 33);\n</code></pre> <p>Constructor Tan\u0131m\u0131: <pre><code>public Person(string name, int age)\n{\n    Name = name;\n    Age = age;\n}\n</code></pre></p>"},{"location":"csharp/target-typed-new/#3-koleksiyonlarda-kullanm-yanls-yonetmek","title":"3. Koleksiyonlarda Kullan\u0131m\u0131 Yanl\u0131\u015f Y\u00f6netmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Koleksiyon olu\u015ftururken hedef t\u00fcr\u00fc belirtmemek.</p> <pre><code>var people = new List&lt;Person&gt;\n{\n    new() { Name = \"Murat\" },\n    new() { Name = \"Derin\" }\n};\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Koleksiyonun t\u00fcr\u00fcn\u00fc a\u00e7\u0131k\u00e7a belirtin.</p> <pre><code>List&lt;Person&gt; people = new()\n{\n    new() { Name = \"Murat\" },\n    new() { Name = \"Derin\" }\n};\n</code></pre>"},{"location":"csharp/target-typed-new/#4-isimlendirilmis-argumanlarla-hatal-kullanm","title":"4. \u0130simlendirilmi\u015f Arg\u00fcmanlarla Hatal\u0131 Kullan\u0131m","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u0130simlendirilmi\u015f arg\u00fcmanlarla target-typed <code>new</code> kullan\u0131m\u0131 belirsizlik yaratabilir.</p> <pre><code>var person = new(name: \"Murat\", age: 33);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130simlendirilmi\u015f arg\u00fcmanlar kullan\u0131rken hedef t\u00fcr\u00fc netle\u015ftirin.</p> <pre><code>Person person = new(name: \"Murat\", age: 33);\n</code></pre>"},{"location":"csharp/target-typed-new/#5-target-typed-new-ve-nullable-turler","title":"5. Target-Typed <code>new</code> ve <code>Nullable</code> T\u00fcrler","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Nullable t\u00fcrlerle target-typed <code>new</code> kullan\u0131m\u0131 yanl\u0131\u015f anla\u015f\u0131lmalara yol a\u00e7abilir.</p> <pre><code>Person? person = new(); // Nullable ama hangi constructor \u00e7a\u011fr\u0131ld\u0131\u011f\u0131 belirsiz\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Nullable t\u00fcrlerle kullan\u0131mda hedef t\u00fcr\u00fc netle\u015ftirin.</p> <pre><code>Person? person = new Person();\n</code></pre>"},{"location":"csharp/target-typed-new/#6-test-edilebilirligi-goz-ard-etmek","title":"6. Test Edilebilirli\u011fi G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Test edilebilirlik a\u00e7\u0131s\u0131ndan target-typed <code>new</code>\u2018in etkisini dikkate almamak.</p> <pre><code>var service = new();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: T\u00fcr\u00fc net bir \u015fekilde belirtin ve test edilebilirli\u011fi art\u0131r\u0131n.</p> <pre><code>IService service = new ServiceImplementation();\n</code></pre> <p>Tan\u0131m: <pre><code>public interface IService { }\npublic class ServiceImplementation : IService { }\n</code></pre></p>"},{"location":"csharp/tuples/","title":"Tuples","text":"<p>C# dilinde tuples, birden fazla de\u011feri bir arada ta\u015f\u0131mak i\u00e7in kullan\u0131\u015fl\u0131 bir veri yap\u0131s\u0131d\u0131r. Ancak, yanl\u0131\u015f kullan\u0131m durumlar\u0131 kodun okunabilirli\u011fini ve s\u00fcrd\u00fcr\u00fclebilirli\u011fini azaltabilir.</p>"},{"location":"csharp/tuples/#1-anlamsz-tuple-isimleri-kullanmak","title":"1. Anlams\u0131z Tuple \u0130simleri Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tuple bile\u015fenlerini varsay\u0131lan isimlerle b\u0131rakmak.</p> <pre><code>var result = GetPerson();\nConsole.WriteLine(result.Item1); // Anlams\u0131z\nConsole.WriteLine(result.Item2);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Tuple bile\u015fenlerine anlaml\u0131 isimler verin.</p> <pre><code>var (name, age) = GetPerson();\nConsole.WriteLine(name);\nConsole.WriteLine(age);\n</code></pre> <p>Tan\u0131m: <pre><code>(string Name, int Age) GetPerson() =&gt; (\"Murat\", 33);\n</code></pre></p>"},{"location":"csharp/tuples/#2-tuples-yerine-snflar-kullanmay-ihmal-etmek","title":"2. Tuples Yerine S\u0131n\u0131flar\u0131 Kullanmay\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Karma\u015f\u0131k veri yap\u0131lar\u0131 i\u00e7in tuple kullanmak.</p> <pre><code>(string, int, string) GetDetailedPerson() =&gt; (\"Murat\", 33, \"Istanbul\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Daha karma\u015f\u0131k veri yap\u0131lar\u0131 i\u00e7in s\u0131n\u0131f veya kay\u0131t yap\u0131s\u0131 kullan\u0131n.</p> <pre><code>public record Person(string Name, int Age, string City);\n\nPerson GetDetailedPerson() =&gt; new(\"Murat\", 33, \"Istanbul\");\n</code></pre>"},{"location":"csharp/tuples/#3-uzun-tuple-yaplar-kullanmak","title":"3. Uzun Tuple Yap\u0131lar\u0131 Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Fazla say\u0131da bile\u015fen i\u00e7eren tuple tan\u0131mlar\u0131.</p> <pre><code>(string, int, string, string, bool) GetComplexData() =&gt; (\"Murat\", 33, \"Istanbul\", \"Yaz\u0131l\u0131m Mimar\u0131\", true);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Daha k\u0131sa ve anlaml\u0131 tuple yap\u0131lar\u0131 kullan\u0131n.</p> <pre><code>(string Name, int Age) GetBasicData() =&gt; (\"Murat\", 33);\n</code></pre>"},{"location":"csharp/tuples/#4-tuplelar-dongulerde-yanls-kullanmak","title":"4. Tuple\u2019lar\u0131 D\u00f6ng\u00fclerde Yanl\u0131\u015f Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tuple bile\u015fenlerine do\u011frudan indeks ile eri\u015fmek.</p> <pre><code>var data = new List&lt;(string, int)&gt;\n{\n    (\"Murat\", 33),\n    (\"Derin\", 2)\n};\n\nforeach (var item in data)\n{\n    Console.WriteLine($\"Name: {item.Item1}, Age: {item.Item2}\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Tuple bile\u015fenlerini anlaml\u0131 isimlerle kullan\u0131n.</p> <pre><code>var data = new List&lt;(string Name, int Age)&gt;\n{\n    (\"Murat\", 33),\n    (\"Derin\", 2)\n};\n\nforeach (var (name, age) in data)\n{\n    Console.WriteLine($\"Name: {name}, Age: {age}\");\n}\n</code></pre>"},{"location":"csharp/tuples/#5-tuplelar-geri-donus-degeri-olarak-yanls-kullanmak","title":"5. Tuple\u2019lar\u0131 Geri D\u00f6n\u00fc\u015f De\u011feri Olarak Yanl\u0131\u015f Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: A\u00e7\u0131k\u00e7a tan\u0131mlanmam\u0131\u015f tuple\u2019lar\u0131 metot d\u00f6n\u00fc\u015f de\u011feri olarak kullanmak.</p> <pre><code>public (string, int) GetPerson() =&gt; (\"Murat\", 33);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Tuple d\u00f6n\u00fc\u015f de\u011ferlerini a\u00e7\u0131k\u00e7a tan\u0131mlay\u0131n.</p> <pre><code>public (string Name, int Age) GetPerson() =&gt; (\"Murat\", 33);\n</code></pre>"},{"location":"csharp/tuples/#6-tuple-degerlerini-yanls-degerlendirmek","title":"6. Tuple De\u011ferlerini Yanl\u0131\u015f De\u011ferlendirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tuple\u2019lar\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131rken t\u00fcm bile\u015fenleri kontrol etmemek.</p> <pre><code>var tuple1 = (\"Murat\", 33);\nvar tuple2 = (\"Murat\", 2);\n\nif (tuple1 == tuple2) // Derleme hatas\u0131\n{\n    Console.WriteLine(\"E\u015fit!\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Tuple kar\u015f\u0131la\u015ft\u0131rmalar\u0131nda t\u00fcm bile\u015fenleri dikkate al\u0131n.</p> <pre><code>var tuple1 = (\"Murat\", 33);\nvar tuple2 = (\"Murat\", 33);\n\nif (tuple1 == tuple2)\n{\n    Console.WriteLine(\"E\u015fit!\");\n}\n</code></pre>"},{"location":"dapper/async-queries/","title":"Async/Await ile Asenkron Sorgular","text":"<p>Dapper, asenkron sorgular i\u00e7in <code>async/await</code> deste\u011fi sunar. Asenkron programlama, y\u00fcksek performansl\u0131 ve \u00f6l\u00e7eklenebilir uygulamalar olu\u015fturman\u0131n temel ta\u015flar\u0131ndan biridir. Ancak, asenkron i\u015flemlerin yanl\u0131\u015f kullan\u0131m\u0131 beklenmeyen davran\u0131\u015flara ve performans sorunlar\u0131na yol a\u00e7abilir.</p>"},{"location":"dapper/async-queries/#1-temel-asenkron-sorgular","title":"1. Temel Asenkron Sorgular","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Asenkron sorgular\u0131 senkron olarak \u00e7a\u011f\u0131rmak.</p> <pre><code>var query = \"SELECT * FROM Users\";\nvar users = connection.QueryAsync&lt;User&gt;(query).Result; // Deadlock riski\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Asenkron \u00e7a\u011fr\u0131lar\u0131 her zaman <code>await</code> ile bekleyin.</p> <pre><code>var query = \"SELECT * FROM Users\";\nvar users = await connection.QueryAsync&lt;User&gt;(query);\n</code></pre>"},{"location":"dapper/async-queries/#2-birden-fazla-asenkron-sorgu-yonetimi","title":"2. Birden Fazla Asenkron Sorgu Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Sorgular\u0131 s\u0131rayla \u00e7al\u0131\u015ft\u0131rmak.</p> <pre><code>var orders = await connection.QueryAsync&lt;Order&gt;(\"SELECT * FROM Orders\");\nvar customers = await connection.QueryAsync&lt;Customer&gt;(\"SELECT * FROM Customers\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sorgular\u0131 ayn\u0131 anda ba\u015flat\u0131n ve <code>Task.WhenAll</code> ile bekleyin.</p> <pre><code>var ordersTask = connection.QueryAsync&lt;Order&gt;(\"SELECT * FROM Orders\");\nvar customersTask = connection.QueryAsync&lt;Customer&gt;(\"SELECT * FROM Customers\");\n\nawait Task.WhenAll(ordersTask, customersTask);\n\nvar orders = ordersTask.Result;\nvar customers = customersTask.Result;\n</code></pre>"},{"location":"dapper/async-queries/#3-transaction-ile-asenkron-islemler","title":"3. Transaction ile Asenkron \u0130\u015flemler","text":"<p>Asenkron i\u015flemleri transaction ile birle\u015ftirmek m\u00fcmk\u00fcnd\u00fcr.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>using var transaction = connection.BeginTransaction();\n\ntry\n{\n    var insertQuery = \"INSERT INTO Orders (CustomerId) VALUES (@CustomerId)\";\n    await connection.ExecuteAsync(insertQuery, new { CustomerId = 1 }, transaction);\n\n    var updateQuery = \"UPDATE Customers SET IsActive = @IsActive WHERE Id = @Id\";\n    await connection.ExecuteAsync(updateQuery, new { IsActive = true, Id = 1 }, transaction);\n\n    transaction.Commit();\n}\ncatch\n{\n    transaction.Rollback();\n    throw;\n}\n</code></pre>"},{"location":"dapper/async-queries/#4-performans-ve-kaynak-yonetimi","title":"4. Performans ve Kaynak Y\u00f6netimi","text":"<ul> <li>Connection Pooling: Asenkron i\u015flemlerde ba\u011flant\u0131 havuzunun verimli kullan\u0131ld\u0131\u011f\u0131ndan emin olun.</li> <li>Cancellation Token Kullan\u0131m\u0131: Uzun s\u00fcren i\u015flemler i\u00e7in iptal mekanizmalar\u0131 kullan\u0131n.</li> </ul> <p>\u2705 \u00d6rnek:</p> <pre><code>var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));\n\nvar query = \"SELECT * FROM Orders WHERE OrderDate &gt; @Date\";\nvar orders = await connection.QueryAsync&lt;Order&gt;(query, new { Date = DateTime.UtcNow.AddDays(-30) }, cancellationToken: cts.Token);\n</code></pre>"},{"location":"dapper/async-queries/#5-deadlock-sorunlarn-onlemek","title":"5. Deadlock Sorunlar\u0131n\u0131 \u00d6nlemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>.Result</code> veya <code>.Wait()</code> kullanmak.</p> <pre><code>var query = \"SELECT * FROM Products\";\nvar products = connection.QueryAsync&lt;Product&gt;(query).Result; // Deadlock riski\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>await</code> anahtar kelimesini kullan\u0131n.</p> <pre><code>var query = \"SELECT * FROM Products\";\nvar products = await connection.QueryAsync&lt;Product&gt;(query);\n</code></pre>"},{"location":"dapper/basic-crud-operations/","title":"Basic CRUD \u0130\u015flemleri","text":"<p>Dapper, basit ve performansl\u0131 veri eri\u015fimi sa\u011flamak i\u00e7in kullan\u0131lan bir k\u00fct\u00fcphanedir. CRUD (Create, Read, Update, Delete) i\u015flemleri Dapper ile olduk\u00e7a kolayd\u0131r, ancak yanl\u0131\u015f kullan\u0131m\u0131 g\u00fcvenlik a\u00e7\u0131klar\u0131na ve performans sorunlar\u0131na neden olabilir.</p>"},{"location":"dapper/basic-crud-operations/#1-veri-ekleme-insert","title":"1. Veri Ekleme (Insert)","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: SQL injection a\u00e7\u0131k sorgular yazmak.</p> <pre><code>var query = $\"INSERT INTO Users (Name, Age) VALUES ('{name}', {age})\";\nconnection.Execute(query);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Parametreleri g\u00fcvenli bir \u015fekilde kullan\u0131n.</p> <pre><code>var query = \"INSERT INTO Users (Name, Age) VALUES (@Name, @Age)\";\nconnection.Execute(query, new { Name = name, Age = age });\n</code></pre>"},{"location":"dapper/basic-crud-operations/#2-veri-okuma-read","title":"2. Veri Okuma (Read)","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm tabloyu belle\u011fe y\u00fcklemek.</p> <pre><code>var query = \"SELECT * FROM Users\";\nvar users = connection.Query&lt;User&gt;(query).ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Filtreleme ve projeksiyon ile daha az veri getirin.</p> <pre><code>var query = \"SELECT Id, Name FROM Users WHERE Age &gt; @Age\";\nvar users = connection.Query&lt;User&gt;(query, new { Age = 25 }).ToList();\n</code></pre>"},{"location":"dapper/basic-crud-operations/#3-veri-guncelleme-update","title":"3. Veri G\u00fcncelleme (Update)","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm s\u00fctunlar\u0131 gereksiz yere g\u00fcncellemek.</p> <pre><code>var query = \"UPDATE Users SET Name = 'UpdatedName', Age = 30 WHERE Id = @Id\";\nconnection.Execute(query, new { Id = userId });\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Yaln\u0131zca gerekli s\u00fctunlar\u0131 g\u00fcncelleyin.</p> <pre><code>var query = \"UPDATE Users SET Name = @Name WHERE Id = @Id\";\nconnection.Execute(query, new { Name = \"UpdatedName\", Id = userId });\n</code></pre>"},{"location":"dapper/basic-crud-operations/#4-veri-silme-delete","title":"4. Veri Silme (Delete)","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ko\u015ful olmadan veri silmek.</p> <pre><code>var query = \"DELETE FROM Users\";\nconnection.Execute(query);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Silme i\u015flemlerini her zaman filtreleyin.</p> <pre><code>var query = \"DELETE FROM Users WHERE Id = @Id\";\nconnection.Execute(query, new { Id = userId });\n</code></pre>"},{"location":"dapper/basic-crud-operations/#5-performans-ve-guvenlik-ipuclar","title":"5. Performans ve G\u00fcvenlik \u0130pu\u00e7lar\u0131","text":"<ul> <li>Prepared Statements: Her zaman parametreli sorgular\u0131 kullanarak SQL enjeksiyonunu \u00f6nleyin.  </li> <li>Minimal Veri Getirme: T\u00fcm tabloyu belle\u011fe y\u00fcklemek yerine ihtiyac\u0131n\u0131z olan s\u00fctunlar\u0131 se\u00e7in.  </li> <li>Transaction Kullan\u0131m\u0131: Birden fazla i\u015flemi birlikte y\u00f6netmek i\u00e7in transaction kullanmay\u0131 d\u00fc\u015f\u00fcn\u00fcn.</li> </ul> <pre><code>using var transaction = connection.BeginTransaction();\ntry\n{\n    var insertQuery = \"INSERT INTO Users (Name, Age) VALUES (@Name, @Age)\";\n    connection.Execute(insertQuery, new { Name = \"Murat\", Age = 33 }, transaction);\n\n    var updateQuery = \"UPDATE Users SET Age = @Age WHERE Name = @Name\";\n    connection.Execute(updateQuery, new { Name = \"Murat\", Age = 34 }, transaction);\n\n    transaction.Commit();\n}\ncatch\n{\n    transaction.Rollback();\n    throw;\n}\n</code></pre>"},{"location":"dapper/bulk-operations/","title":"Bulk \u0130\u015flemler ve Performans Art\u0131\u015f\u0131","text":"<p>Dapper, tek seferde b\u00fcy\u00fck miktarda veri i\u015flemleri (bulk operations) i\u00e7in etkili bir ara\u00e7t\u0131r. Ancak, bu i\u015flemleri do\u011fru yap\u0131land\u0131rmazsan\u0131z performans sorunlar\u0131na yol a\u00e7abilirsiniz. Bulk i\u015flemleri optimize etmek, uygulaman\u0131z\u0131n kaynak t\u00fcketimini azalt\u0131r ve i\u015flem s\u00fcrelerini k\u0131salt\u0131r.</p>"},{"location":"dapper/bulk-operations/#1-tekli-ekleme-ve-performans-problemi","title":"1. Tekli Ekleme ve Performans Problemi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her ekleme i\u015flemi i\u00e7in ayr\u0131 bir sorgu \u00e7al\u0131\u015ft\u0131rmak.</p> <pre><code>foreach (var user in users)\n{\n    connection.Execute(\"INSERT INTO Users (Name, Age) VALUES (@Name, @Age)\", user);\n}\n</code></pre> <p>Bu y\u00f6ntem, b\u00fcy\u00fck veri setlerinde veritaban\u0131na gereksiz sorgular g\u00f6ndererek performans\u0131 d\u00fc\u015f\u00fcr\u00fcr.</p> <p>\u2705 \u0130deal Kullan\u0131m: T\u00fcm veriyi tek bir i\u015flemle ekleyin.</p> <pre><code>var query = \"INSERT INTO Users (Name, Age) VALUES (@Name, @Age)\";\nconnection.Execute(query, users);\n</code></pre>"},{"location":"dapper/bulk-operations/#2-bulk-update-islemleri","title":"2. Bulk Update \u0130\u015flemleri","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her bir g\u00fcncelleme i\u00e7in ayr\u0131 bir sorgu.</p> <pre><code>foreach (var user in users)\n{\n    connection.Execute(\"UPDATE Users SET Age = @Age WHERE Id = @Id\", user);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Tek bir sorguda toplu g\u00fcncelleme.</p> <pre><code>var query = @\"\n    UPDATE Users \n    SET Age = CASE Id \n        WHEN @Id1 THEN @Age1 \n        WHEN @Id2 THEN @Age2 \n    END\n    WHERE Id IN (@Id1, @Id2)\";\n\nconnection.Execute(query, new \n{\n    Id1 = users[0].Id, Age1 = users[0].Age,\n    Id2 = users[1].Id, Age2 = users[1].Age\n});\n</code></pre>"},{"location":"dapper/bulk-operations/#3-performans-icin-table-valued-parameters-tvp","title":"3. Performans \u0130\u00e7in Table-Valued Parameters (TVP)","text":"<p>Dapper, do\u011frudan TVP deste\u011fi sunmaz ancak SQL Server\u2019da TVP kullanarak performans\u0131 art\u0131rabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var dataTable = new DataTable();\ndataTable.Columns.Add(\"Id\", typeof(int));\ndataTable.Columns.Add(\"Name\", typeof(string));\n\nforeach (var user in users)\n{\n    dataTable.Rows.Add(user.Id, user.Name);\n}\n\nusing var connection = new SqlConnection(connectionString);\nusing var command = connection.CreateCommand();\ncommand.CommandText = \"dbo.BulkInsertUsers\";\ncommand.CommandType = CommandType.StoredProcedure;\n\nvar parameter = command.Parameters.AddWithValue(\"@Users\", dataTable);\nparameter.SqlDbType = SqlDbType.Structured;\n\nconnection.Open();\ncommand.ExecuteNonQuery();\n</code></pre>"},{"location":"dapper/bulk-operations/#4-performans-ipuclar","title":"4. Performans \u0130pu\u00e7lar\u0131","text":"<ul> <li>Batching: \u0130\u015flemleri gruplara ay\u0131rarak sorgu say\u0131s\u0131n\u0131 azalt\u0131n.</li> <li>Transaction Kullan\u0131m\u0131: Bulk i\u015flemler i\u00e7in <code>Transaction</code> kullanarak veri tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flay\u0131n.</li> <li>Profiling ve \u0130zleme: SQL Server\u2019da <code>Query Execution Plan</code> kullanarak sorgular\u0131n\u0131z\u0131 optimize edin.</li> </ul>"},{"location":"dapper/multiple-mapping/","title":"Multiple Mapping","text":"<p>Dapper, birden fazla nesneyi tek bir sorgudan e\u015fle\u015ftirmek i\u00e7in Multiple Mapping \u00f6zelli\u011fi sunar. Bu, \u00f6zellikle ili\u015fkisel veritaban\u0131 sorgular\u0131nda, birden fazla tablodan veri \u00e7ekme i\u015flemlerinde olduk\u00e7a kullan\u0131\u015fl\u0131d\u0131r. Ancak, yanl\u0131\u015f kullan\u0131ld\u0131\u011f\u0131nda karma\u015f\u0131k kod yap\u0131s\u0131na ve performans kayb\u0131na neden olabilir.</p>"},{"location":"dapper/multiple-mapping/#1-tek-nesne-eslestirme","title":"1. Tek Nesne E\u015fle\u015ftirme","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tablolar\u0131 manuel olarak birle\u015ftirme.</p> <pre><code>var query = \"SELECT * FROM Orders o JOIN Customers c ON o.CustomerId = c.Id\";\nvar data = connection.Query(query).ToList(); // E\u015fleme yap\u0131lmaz\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Tek bir sorgudan birden fazla nesneyi e\u015fleyin.</p> <pre><code>var query = \"SELECT o.*, c.* FROM Orders o JOIN Customers c ON o.CustomerId = c.Id\";\nvar result = connection.Query&lt;Order, Customer, Order&gt;(\n    query,\n    (order, customer) =&gt;\n    {\n        order.Customer = customer;\n        return order;\n    },\n    splitOn: \"Id\"\n).ToList();\n</code></pre>"},{"location":"dapper/multiple-mapping/#2-birden-fazla-nesne-ve-karmask-esleme","title":"2. Birden Fazla Nesne ve Karma\u015f\u0131k E\u015fleme","text":"<p>Dapper, birden fazla nesneyi e\u015flemek i\u00e7in <code>splitOn</code> \u00f6zelli\u011fini kullan\u0131r. Bu, her nesne i\u00e7in ay\u0131r\u0131c\u0131 s\u00fctunlar belirlemenize olanak tan\u0131r.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var query = @\"\n    SELECT o.Id, o.OrderDate, c.Id, c.Name, p.Id, p.Name \n    FROM Orders o \n    JOIN Customers c ON o.CustomerId = c.Id\n    JOIN Products p ON o.ProductId = p.Id\";\n\nvar result = connection.Query&lt;Order, Customer, Product, Order&gt;(\n    query,\n    (order, customer, product) =&gt;\n    {\n        order.Customer = customer;\n        order.Product = product;\n        return order;\n    },\n    splitOn: \"Id,Id\"\n).ToList();\n</code></pre>"},{"location":"dapper/multiple-mapping/#3-performans-ipuclar","title":"3. Performans \u0130pu\u00e7lar\u0131","text":"<ul> <li>splitOn Kullan\u0131m\u0131: <code>splitOn</code> \u00f6zelli\u011fini do\u011fru belirleyin; aksi halde yanl\u0131\u015f e\u015fleme yap\u0131labilir.</li> <li>Gereksiz Verileri Dahil Etmeyin: Sadece ihtiya\u00e7 duyulan s\u00fctunlar\u0131 se\u00e7in.</li> <li>\u0130li\u015fki Y\u00f6netimi: Nesneler aras\u0131 ili\u015fkileri kod taraf\u0131nda y\u00f6netin.</li> </ul>"},{"location":"dapper/multiple-mapping/#4-coklu-esleme-ile-sorun-giderme","title":"4. \u00c7oklu E\u015fleme ile Sorun Giderme","text":"<ul> <li>Do\u011fru splitOn Ayar\u0131: <code>splitOn</code> \u00f6zelli\u011finde s\u00fctun adlar\u0131n\u0131n s\u0131ras\u0131n\u0131 kontrol edin.</li> <li>S\u00fctun \u0130simlendirme \u00c7ak\u0131\u015fmalar\u0131: E\u011fer ayn\u0131 isimde s\u00fctunlar varsa, alias (takma ad) kullan\u0131n.</li> </ul> <pre><code>SELECT \n    o.Id AS OrderId, \n    c.Id AS CustomerId, \n    p.Id AS ProductId \nFROM Orders o \nJOIN Customers c ON o.CustomerId = c.Id\nJOIN Products p ON o.ProductId = p.Id\n</code></pre>"},{"location":"dapper/n-plus-1-problem/","title":"N+1 Problemi","text":"<p>N+1 problemi, ili\u015fkisel veritaban\u0131 sorgular\u0131nda s\u0131k\u00e7a kar\u015f\u0131la\u015f\u0131lan bir performans tuza\u011f\u0131d\u0131r. \u00d6zellikle Dapper gibi ORM ara\u00e7lar\u0131yla \u00e7al\u0131\u015f\u0131rken, do\u011fru sorgulama yap\u0131lmad\u0131\u011f\u0131nda veritaban\u0131na gereksiz bir \u015fekilde \u00e7ok fazla sorgu g\u00f6nderilmesine yol a\u00e7ar. Bu durum, uygulaman\u0131z\u0131n performans\u0131n\u0131 ciddi \u015fekilde etkileyebilir.</p>"},{"location":"dapper/n-plus-1-problem/#1-n1-probleminin-tanm","title":"1. N+1 Probleminin Tan\u0131m\u0131","text":"<p>N+1 problemi, bir listeye ait her \u00f6\u011fe i\u00e7in ayr\u0131 bir sorgu \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda ortaya \u00e7\u0131kar. Bu, toplamda 1 ana sorgu ve N adet alt sorgu \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131 anlam\u0131na gelir.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Listeyi d\u00f6ng\u00fc i\u00e7inde sorgulamak.</p> <pre><code>var orders = connection.Query&lt;Order&gt;(\"SELECT * FROM Orders\").ToList();\n\nforeach (var order in orders)\n{\n    order.Customer = connection.QuerySingle&lt;Customer&gt;(\n        \"SELECT * FROM Customers WHERE Id = @Id\",\n        new { Id = order.CustomerId });\n}\n}\n</code></pre> <p>Bu y\u00f6ntem, veritaban\u0131na gereksiz yere \u00e7ok say\u0131da sorgu g\u00f6nderir ve performans\u0131 d\u00fc\u015f\u00fcr\u00fcr.</p> <p>\u2705 \u0130deal Kullan\u0131m: <code>JOIN</code> kullanarak t\u00fcm verileri tek bir sorguda getirin.</p> <pre><code>var query = @\"\n    SELECT o.*, c.* \n    FROM Orders o\n    JOIN Customers c ON o.CustomerId = c.Id\";\n\nvar orders = connection.Query&lt;Order, Customer, Order&gt;(\n    query,\n    (order, customer) =&gt;\n    {\n        order.Customer = customer;\n        return order;\n    },\n    splitOn: \"Id\"\n).ToList();\n</code></pre>"},{"location":"dapper/n-plus-1-problem/#2-lazy-loading-tuzag","title":"2. Lazy Loading Tuza\u011f\u0131","text":"<p>Lazy loading (tembel y\u00fckleme), genellikle N+1 problemini tetikleyen bir y\u00f6ntemdir. Dapper, varsay\u0131lan olarak lazy loading desteklemez, ancak manuel olarak uygulanabilir. Bu i\u015flem performans sorunlar\u0131na yol a\u00e7abilir.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her nesne i\u00e7in ayr\u0131 sorgu.</p> <pre><code>var orders = connection.Query&lt;Order&gt;(\"SELECT * FROM Orders\").ToList();\n\nforeach (var order in orders)\n{\n    order.Customer = GetCustomerById(order.CustomerId);\n}\n\nCustomer GetCustomerById(int customerId)\n{\n    return connection.QuerySingle&lt;Customer&gt;(\n        \"SELECT * FROM Customers WHERE Id = @Id\",\n        new { Id = customerId });\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gerekli t\u00fcm verileri birle\u015ftirerek getirin.</p> <pre><code>var query = @\"\n    SELECT o.Id, o.OrderDate, c.Id AS CustomerId, c.Name AS CustomerName\n    FROM Orders o\n    JOIN Customers c ON o.CustomerId = c.Id\";\n\nvar orders = connection.Query&lt;Order, Customer, Order&gt;(\n    query,\n    (order, customer) =&gt;\n    {\n        order.Customer = customer;\n        return order;\n    },\n    splitOn: \"CustomerId\"\n).ToList();\n</code></pre>"},{"location":"dapper/n-plus-1-problem/#3-performans-ve-kaynak-kullanm","title":"3. Performans ve Kaynak Kullan\u0131m\u0131","text":"<ul> <li>JOIN Kullan\u0131m\u0131: N+1 problemini \u00f6nlemek i\u00e7in veritaban\u0131 sorgular\u0131nda <code>JOIN</code> kullan\u0131n.</li> <li>Liste \u0130\u015flemleri: T\u00fcm listeyi tek bir sorguyla al\u0131n, d\u00f6ng\u00fc i\u00e7inde sorgu yapmaktan ka\u00e7\u0131n\u0131n.</li> <li>Profiling Ara\u00e7lar\u0131: Sorgular\u0131n\u0131z\u0131n veritaban\u0131na ka\u00e7 kez gitti\u011fini izlemek i\u00e7in profil ara\u00e7lar\u0131n\u0131 kullan\u0131n.</li> </ul>"},{"location":"dapper/query-multiple/","title":"QueryMultiple","text":"<p>Dapper, bir sorgudan birden fazla sonu\u00e7 k\u00fcmesini alman\u0131za olanak tan\u0131r. <code>QueryMultiple</code> metodu sayesinde, ili\u015fkisel veritabanlar\u0131ndaki karma\u015f\u0131k sorgular\u0131 basitle\u015ftirebilir ve birden fazla tabloyu tek bir i\u015flemde \u00e7ekebilirsiniz. Ancak, bu y\u00f6ntemin yanl\u0131\u015f kullan\u0131m\u0131 performans sorunlar\u0131na ve veri uyumsuzluklar\u0131na yol a\u00e7abilir.</p>"},{"location":"dapper/query-multiple/#1-temel-querymultiple-kullanm","title":"1. Temel QueryMultiple Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Sorgu sonu\u00e7lar\u0131n\u0131 manuel olarak b\u00f6lmek.</p> <pre><code>var query = \"SELECT * FROM Orders; SELECT * FROM Customers\";\nvar orders = connection.Query&lt;Order&gt;(\"SELECT * FROM Orders\").ToList();\nvar customers = connection.Query&lt;Customer&gt;(\"SELECT * FROM Customers\").ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>QueryMultiple</code> ile her iki sonucu tek bir sorguda al\u0131n.</p> <pre><code>var query = \"SELECT * FROM Orders; SELECT * FROM Customers\";\n\nusing var multi = connection.QueryMultiple(query);\nvar orders = multi.Read&lt;Order&gt;().ToList();\nvar customers = multi.Read&lt;Customer&gt;().ToList();\n</code></pre>"},{"location":"dapper/query-multiple/#2-parametreli-sorgularla-querymultiple-kullanm","title":"2. Parametreli Sorgularla QueryMultiple Kullan\u0131m\u0131","text":"<p>\u2705 \u00d6rnek: Parametreleri kullanarak sonu\u00e7 k\u00fcmesini dinamikle\u015ftirin.</p> <pre><code>var query = \"SELECT * FROM Orders WHERE CustomerId = @CustomerId; SELECT * FROM Customers WHERE Id = @CustomerId\";\n\nusing var multi = connection.QueryMultiple(query, new { CustomerId = 1 });\nvar orders = multi.Read&lt;Order&gt;().ToList();\nvar customer = multi.Read&lt;Customer&gt;().FirstOrDefault();\n</code></pre>"},{"location":"dapper/query-multiple/#3-coklu-sonuc-kumesiyle-karmask-veri-esleme","title":"3. \u00c7oklu Sonu\u00e7 K\u00fcmesiyle Karma\u015f\u0131k Veri E\u015fleme","text":"<p>Dapper, <code>QueryMultiple</code> ile karma\u015f\u0131k veri yap\u0131lar\u0131n\u0131 y\u00f6netmeyi kolayla\u015ft\u0131r\u0131r.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var query = @\"\n    SELECT o.Id, o.OrderDate, c.Id AS CustomerId, c.Name AS CustomerName\n    FROM Orders o\n    JOIN Customers c ON o.CustomerId = c.Id;\n    SELECT * FROM Products;\";\n\nusing var multi = connection.QueryMultiple(query);\nvar orders = multi.Read&lt;OrderWithCustomer&gt;().ToList();\nvar products = multi.Read&lt;Product&gt;().ToList();\n</code></pre> <p>Burada <code>OrderWithCustomer</code> a\u015fa\u011f\u0131daki gibi bir s\u0131n\u0131f olabilir:</p> <pre><code>public class OrderWithCustomer\n{\n    public int Id { get; set; }\n    public DateTime OrderDate { get; set; }\n    public Customer Customer { get; set; }\n}\n</code></pre>"},{"location":"dapper/query-multiple/#4-performans-ipuclar","title":"4. Performans \u0130pu\u00e7lar\u0131","text":"<ul> <li>Minimum Veri \u00c7ekme: Sadece ihtiya\u00e7 duyulan s\u00fctunlar\u0131 sorgulay\u0131n.</li> <li>Do\u011fru S\u0131ra: <code>QueryMultiple</code> ile al\u0131nan sonu\u00e7lar\u0131 do\u011fru s\u0131rada okuyun. Yanl\u0131\u015f s\u0131ra hatalara yol a\u00e7abilir.</li> <li>Kaynak Y\u00f6netimi: <code>QueryMultiple</code> sonu\u00e7lar\u0131 tamamland\u0131ktan sonra <code>Dispose</code> \u00e7a\u011f\u0131rarak kaynaklar\u0131 serbest b\u0131rakmay\u0131 unutmay\u0131n.</li> </ul>"},{"location":"dapper/query-parameters/","title":"Query Parameters Kullan\u0131m\u0131","text":"<p>Dapper, SQL sorgular\u0131nda parametre kullan\u0131m\u0131yla hem g\u00fcvenli hem de okunabilir kod yazman\u0131z\u0131 sa\u011flar. Parametreler sayesinde SQL enjeksiyonunu \u00f6nleyebilir ve performans\u0131 art\u0131rabilirsiniz. Ancak, parametrelerin yanl\u0131\u015f kullan\u0131m\u0131 performans kayb\u0131na ve g\u00fcvenlik a\u00e7\u0131klar\u0131na neden olabilir.</p>"},{"location":"dapper/query-parameters/#1-parametresiz-sorgular-yazmak","title":"1. Parametresiz Sorgular Yazmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Parametresiz sorgular SQL enjeksiyonuna a\u00e7\u0131k kap\u0131 b\u0131rak\u0131r.</p> <pre><code>var query = $\"SELECT * FROM Users WHERE Name = '{name}'\";\nvar users = connection.Query&lt;User&gt;(query);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Parametreler ile g\u00fcvenli sorgular yaz\u0131n.</p> <pre><code>var query = \"SELECT * FROM Users WHERE Name = @Name\";\nvar users = connection.Query&lt;User&gt;(query, new { Name = name });\n</code></pre>"},{"location":"dapper/query-parameters/#2-birden-fazla-parametre-kullanm","title":"2. Birden Fazla Parametre Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Parametreleri elle birle\u015ftirmek.</p> <pre><code>var query = $\"SELECT * FROM Users WHERE Name = '{name}' AND Age = {age}\";\nvar users = connection.Query&lt;User&gt;(query);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Dapper\u2019\u0131n parametre y\u00f6netimini kullan\u0131n.</p> <pre><code>var query = \"SELECT * FROM Users WHERE Name = @Name AND Age = @Age\";\nvar users = connection.Query&lt;User&gt;(query, new { Name = name, Age = age });\n</code></pre>"},{"location":"dapper/query-parameters/#3-dinamik-parametrelerle-calsmak","title":"3. Dinamik Parametrelerle \u00c7al\u0131\u015fmak","text":"<p>Dapper, dinamik parametreler ile esnek sorgular yazman\u0131za olanak tan\u0131r.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var parameters = new DynamicParameters();\nparameters.Add(\"Name\", name);\nparameters.Add(\"Age\", age);\n\nvar query = \"SELECT * FROM Users WHERE Name = @Name AND Age = @Age\";\nvar users = connection.Query&lt;User&gt;(query, parameters);\n</code></pre>"},{"location":"dapper/query-parameters/#4-performans-ve-guvenlik-ipuclar","title":"4. Performans ve G\u00fcvenlik \u0130pu\u00e7lar\u0131","text":"<ul> <li>SQL Enjeksiyonunu \u00d6nleyin: Her zaman parametreli sorgular\u0131 kullan\u0131n.  </li> <li>DynamicParameters Kullan\u0131m\u0131: Dinamik senaryolarda parametre y\u00f6netimini kolayla\u015ft\u0131r\u0131r.  </li> <li>Parametrelerin T\u00fcrlerine Dikkat Edin: SQL t\u00fcrleriyle uyumlu parametreler kullan\u0131n.</li> </ul> <pre><code>var parameters = new DynamicParameters();\nparameters.Add(\"IsActive\", true, DbType.Boolean);\nparameters.Add(\"JoinDate\", DateTime.Now, DbType.DateTime);\n\nvar query = \"SELECT * FROM Users WHERE IsActive = @IsActive AND JoinDate &gt; @JoinDate\";\nvar users = connection.Query&lt;User&gt;(query, parameters);\n</code></pre>"},{"location":"dapper/stored-procedures/","title":"Stored Procedure Kullan\u0131m\u0131","text":"<p>Dapper, stored procedure\u2019ler ile etkili ve performansl\u0131 veri taban\u0131 i\u015flemleri ger\u00e7ekle\u015ftirmenize olanak tan\u0131r. Stored procedure\u2019ler, \u00f6zellikle karma\u015f\u0131k veri taban\u0131 i\u015flemleri ve \u00e7oklu sorgular i\u00e7in tercih edilir. Ancak, do\u011fru kullan\u0131lmad\u0131\u011f\u0131nda performans sorunlar\u0131na ve y\u00f6netim zorluklar\u0131na yol a\u00e7abilir.</p>"},{"location":"dapper/stored-procedures/#1-stored-procedure-cagrma","title":"1. Stored Procedure \u00c7a\u011f\u0131rma","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Stored procedure\u2019\u00fc do\u011frudan metin olarak \u00e7a\u011f\u0131rmak.</p> <pre><code>var query = \"EXEC GetUsers\";\nvar users = connection.Query&lt;User&gt;(query);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>CommandType.StoredProcedure</code> kullanarak prosed\u00fcr\u00fc \u00e7a\u011f\u0131r\u0131n.</p> <pre><code>var users = connection.Query&lt;User&gt;(\"GetUsers\", commandType: CommandType.StoredProcedure);\n</code></pre>"},{"location":"dapper/stored-procedures/#2-parametreli-stored-procedure-kullanm","title":"2. Parametreli Stored Procedure Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Parametreleri elle birle\u015ftirmek.</p> <pre><code>var query = $\"EXEC GetUsersByAge {age}\";\nvar users = connection.Query&lt;User&gt;(query);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Parametreleri do\u011fru \u015fekilde tan\u0131mlay\u0131n.</p> <pre><code>var users = connection.Query&lt;User&gt;(\n    \"GetUsersByAge\",\n    new { Age = age },\n    commandType: CommandType.StoredProcedure);\n</code></pre>"},{"location":"dapper/stored-procedures/#3-output-parametreleri-kullanm","title":"3. Output Parametreleri Kullan\u0131m\u0131","text":"<p>Dapper, stored procedure\u2019den d\u00f6nen <code>output</code> parametrelerini kolayca y\u00f6netebilir.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var parameters = new DynamicParameters();\nparameters.Add(\"InputParam\", 10);\nparameters.Add(\"OutputParam\", dbType: DbType.Int32, direction: ParameterDirection.Output);\n\nconnection.Execute(\"CalculateTotal\", parameters, commandType: CommandType.StoredProcedure);\n\nvar total = parameters.Get&lt;int&gt;(\"OutputParam\");\nConsole.WriteLine($\"Total: {total}\");\n</code></pre>"},{"location":"dapper/stored-procedures/#4-coklu-sonuc-kumesi-multiple-result-sets","title":"4. \u00c7oklu Sonu\u00e7 K\u00fcmesi (Multiple Result Sets)","text":"<p>Dapper, stored procedure\u2019lerden d\u00f6nen birden fazla sonu\u00e7 k\u00fcmesini de destekler.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>using var multi = connection.QueryMultiple(\"GetUsersAndOrders\", commandType: CommandType.StoredProcedure);\n\nvar users = multi.Read&lt;User&gt;().ToList();\nvar orders = multi.Read&lt;Order&gt;().ToList();\n</code></pre>"},{"location":"dapper/stored-procedures/#5-performans-ve-guvenlik-ipuclar","title":"5. Performans ve G\u00fcvenlik \u0130pu\u00e7lar\u0131","text":"<ul> <li>Parametre Kullan\u0131m\u0131: SQL enjeksiyonunu \u00f6nlemek i\u00e7in her zaman parametreli sorgular\u0131 tercih edin.</li> <li>CommandType.StoredProcedure: Prosed\u00fcr \u00e7a\u011fr\u0131lar\u0131nda bu parametreyi mutlaka ekleyin.</li> <li>Index ve Query Planlar\u0131na Dikkat: Stored procedure\u2019lerinizin verimli \u00e7al\u0131\u015ft\u0131\u011f\u0131ndan emin olun.</li> </ul> <pre><code>var parameters = new { StartDate = DateTime.UtcNow.AddDays(-30), EndDate = DateTime.UtcNow };\nvar results = connection.Query(\"GetReportData\", parameters, commandType: CommandType.StoredProcedure);\n</code></pre>"},{"location":"dapper/transaction-management/","title":"Transaction Y\u00f6netimi","text":"<p>Dapper, birden fazla veri taban\u0131 i\u015flemini bir arada y\u00f6netmek i\u00e7in transaction deste\u011fi sunar. Transaction y\u00f6netimi, i\u015flemlerin tamam\u0131 ba\u015far\u0131l\u0131 olmad\u0131\u011f\u0131nda yap\u0131lan de\u011fi\u015fikliklerin geri al\u0131nmas\u0131n\u0131 sa\u011flar ve veri tutarl\u0131l\u0131\u011f\u0131n\u0131 korur. Ancak, yanl\u0131\u015f transaction y\u00f6netimi veri kay\u0131plar\u0131na ve tutars\u0131zl\u0131klara neden olabilir.</p>"},{"location":"dapper/transaction-management/#1-transaction-baslatma-ve-kullanm","title":"1. Transaction Ba\u015flatma ve Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Transaction kullanmadan birden fazla i\u015flem ger\u00e7ekle\u015ftirmek.</p> <pre><code>connection.Execute(\"INSERT INTO Orders (CustomerId) VALUES (@CustomerId)\", new { CustomerId = 1 });\nconnection.Execute(\"INSERT INTO OrderDetails (OrderId, ProductId) VALUES (@OrderId, @ProductId)\", new { OrderId = 1, ProductId = 1 });\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: T\u00fcm i\u015flemleri bir transaction i\u00e7inde y\u00f6netin.</p> <pre><code>using var transaction = connection.BeginTransaction();\n\ntry\n{\n    connection.Execute(\"INSERT INTO Orders (CustomerId) VALUES (@CustomerId)\", new { CustomerId = 1 }, transaction);\n    connection.Execute(\"INSERT INTO OrderDetails (OrderId, ProductId) VALUES (@OrderId, @ProductId)\", new { OrderId = 1, ProductId = 1 }, transaction);\n\n    transaction.Commit();\n}\ncatch\n{\n    transaction.Rollback();\n    throw;\n}\n</code></pre>"},{"location":"dapper/transaction-management/#2-nested-transaction-kullanm","title":"2. Nested Transaction Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tek bir transaction i\u00e7inde birden fazla i\u015flem ba\u015flatmak.</p> <pre><code>var transaction1 = connection.BeginTransaction();\nvar transaction2 = connection.BeginTransaction(); // Hatal\u0131 kullan\u0131m\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Her ba\u011flant\u0131 i\u00e7in yaln\u0131zca bir transaction ba\u015flat\u0131n.</p> <pre><code>using var transaction = connection.BeginTransaction();\nconnection.Execute(\"INSERT INTO Orders (CustomerId) VALUES (@CustomerId)\", new { CustomerId = 1 }, transaction);\ntransaction.Commit();\n</code></pre>"},{"location":"dapper/transaction-management/#3-performans-ve-guvenlik-ipuclar","title":"3. Performans ve G\u00fcvenlik \u0130pu\u00e7lar\u0131","text":"<ul> <li>Transaction Commit Kontrol\u00fc: Sadece t\u00fcm i\u015flemler ba\u015far\u0131l\u0131 oldu\u011funda <code>Commit</code> \u00e7a\u011f\u0131r\u0131n.</li> <li>Timeout Ayar\u0131: Uzun s\u00fcren transaction\u2019lar i\u00e7in bir timeout ayarlay\u0131n.</li> <li>Transaction Kapsam\u0131n\u0131 Daralt\u0131n: Transaction i\u00e7inde sadece gerekli i\u015flemleri yap\u0131n.</li> </ul> <pre><code>using var transaction = connection.BeginTransaction(System.Data.IsolationLevel.Serializable);\ntry\n{\n    // \u0130\u015flemler\n    transaction.Commit();\n}\ncatch\n{\n    transaction.Rollback();\n    throw;\n}\n</code></pre>"},{"location":"dapper/transaction-management/#4-isolation-levels-izolasyon-seviyeleri","title":"4. Isolation Levels (\u0130zolasyon Seviyeleri)","text":"<p>Dapper, farkl\u0131 izolasyon seviyeleriyle \u00e7al\u0131\u015fabilir. Bu seviyeler, transaction\u2019\u0131n di\u011fer transaction\u2019larla nas\u0131l etkile\u015fime girece\u011fini belirler.</p>"},{"location":"dapper/transaction-management/#izolasyon-seviyeleri","title":"\u0130zolasyon Seviyeleri:","text":"<ul> <li>Read Uncommitted: Di\u011fer transaction\u2019lar\u0131n hen\u00fcz commit edilmemi\u015f verilerini okuyabilir.</li> <li>Read Committed: Sadece commit edilmi\u015f veriler okunabilir.</li> <li>Repeatable Read: Bir transaction boyunca ayn\u0131 veriyi okuma garantisi verir.</li> <li>Serializable: En y\u00fcksek izolasyon seviyesidir, veri taban\u0131 kilitlemelerini art\u0131rabilir.</li> </ul> <pre><code>using var transaction = connection.BeginTransaction(System.Data.IsolationLevel.RepeatableRead);\n</code></pre>"},{"location":"dotnet/async-programming/","title":"Asenkron Programlama ve Task Y\u00f6netimi","text":"<p>Asenkron programlama, modern uygulamalarda performans ve yan\u0131t verebilirlik a\u00e7\u0131s\u0131ndan b\u00fcy\u00fck \u00f6nem ta\u015f\u0131r. Ancak, yanl\u0131\u015f kullan\u0131ld\u0131\u011f\u0131nda beklenmedik sorunlara yol a\u00e7abilir. \u0130\u015fte C#\u2019ta asenkron programlama i\u00e7in s\u0131k yap\u0131lan hatalar ve \u00f6nerilen \u00e7\u00f6z\u00fcmler.</p>"},{"location":"dotnet/async-programming/#1-await-kullanmn-atlamak","title":"1. <code>await</code> Kullan\u0131m\u0131n\u0131 Atlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>await</code> kullan\u0131lmad\u0131\u011f\u0131nda istisna durumlar\u0131 do\u011fru \u015fekilde ele al\u0131namaz.</p> <pre><code>try\n{\n    DoWorkWithoutAwaitAsync();\n}\ncatch (Exception e)\n{\n    Console.WriteLine($\"Hata: {e.Message}\");\n}\n\nstatic Task DoWorkWithoutAwaitAsync()\n{\n    return ThrowExceptionAsync();\n}\n\nstatic async Task ThrowExceptionAsync()\n{\n    await Task.Yield();\n    throw new Exception(\"Bir hata olu\u015ftu!\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>await</code> ile \u00e7a\u011fr\u0131y\u0131 bekleyerek hata y\u00f6netimini iyile\u015ftirin.</p> <pre><code>try\n{\n    await DoWorkWithAwaitAsync();\n}\ncatch (Exception e)\n{\n    Console.WriteLine($\"Hata: {e.Message}\");\n}\n\nstatic async Task DoWorkWithAwaitAsync()\n{\n    await ThrowExceptionAsync();\n}\n\nstatic async Task ThrowExceptionAsync()\n{\n    await Task.Yield();\n    throw new Exception(\"Bir hata olu\u015ftu!\");\n}\n</code></pre>"},{"location":"dotnet/async-programming/#2-async-void-kullanm","title":"2. <code>async void</code> Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>async void</code> hatalar\u0131 do\u011fru bir \u015fekilde ele almay\u0131 zorla\u015ft\u0131r\u0131r.</p> <pre><code>public async void DoAsync()\n{\n    await SomeAsyncOperation();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>async Task</code> kullanarak hata y\u00f6netimini ve test edilebilirli\u011fi art\u0131r\u0131n.</p> <pre><code>public async Task DoAsync()\n{\n    await SomeAsyncOperation();\n}\n</code></pre> <p>\ud83d\udca1 Not: <code>async void</code> yaln\u0131zca olay i\u015fleyicileri gibi \u00f6zel durumlarda kullan\u0131lmal\u0131d\u0131r.</p>"},{"location":"dotnet/async-programming/#3-task-nesnesini-beklemeden-dondurmek","title":"3. <code>Task</code> Nesnesini Beklemeden D\u00f6nd\u00fcrmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>using</code> blo\u011fu i\u00e7inde <code>Task</code> nesnesini beklemeden d\u00f6nd\u00fcrmek kaynaklar\u0131n erken serbest b\u0131rak\u0131lmas\u0131na neden olabilir.</p> <pre><code>public Task&lt;string&gt; GetContentAsync()\n{\n    using var client = new HttpClient();\n    return client.GetStringAsync(\"https://example.com\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>await</code> kullanarak kaynak y\u00f6netimini do\u011fru yap\u0131n.</p> <pre><code>public async Task&lt;string&gt; GetContentAsync()\n{\n    using var client = new HttpClient();\n    return await client.GetStringAsync(\"https://example.com\");\n}\n</code></pre>"},{"location":"dotnet/async-programming/#4-paralel-islemlerin-yanls-yonetimi","title":"4. Paralel \u0130\u015flemlerin Yanl\u0131\u015f Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Paralel g\u00f6revleri s\u0131rayla beklemek.</p> <pre><code>await Task1();\nawait Task2();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: G\u00f6revleri paralel olarak ba\u015flat\u0131p ayn\u0131 anda beklemek.</p> <pre><code>var task1 = Task1();\nvar task2 = Task2();\nawait Task.WhenAll(task1, task2);\n</code></pre>"},{"location":"dotnet/async-programming/#5-taskdelay-ile-hassas-bekleme","title":"5. <code>Task.Delay</code> ile Hassas Bekleme","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: K\u0131sa s\u00fcreli hassas bekleme i\u00e7in <code>Task.Delay</code> kullanmak.</p> <pre><code>await Task.Delay(1); // S\u00fcre tam olarak 1ms olmayabilir.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hassas zamanlama i\u00e7in daha uygun ara\u00e7lar kullan\u0131n.</p>"},{"location":"dotnet/async-programming/#6-deadlock-sorunlar","title":"6. Deadlock Sorunlar\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>Task.Result</code> veya <code>Task.Wait</code> kullanarak deadlock olu\u015fturmak.</p> <pre><code>var result = SomeAsyncOperation().Result;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>await</code> kullanarak deadlock sorunlar\u0131n\u0131 \u00f6nleyin.</p> <pre><code>var result = await SomeAsyncOperation();\n</code></pre>"},{"location":"dotnet/async-programming/#7-task-nesnelerini-geri-donusturmek","title":"7. <code>Task</code> Nesnelerini Geri D\u00f6n\u00fc\u015ft\u00fcrmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her i\u015flem i\u00e7in yeni bir <code>Task</code> nesnesi olu\u015fturmak.</p> <pre><code>public Task&lt;int&gt; GetNumberAsync()\n{\n    return Task.Run(() =&gt; 42);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>Task.FromResult</code> kullanarak gereksiz nesne olu\u015fturmay\u0131 \u00f6nleyin.</p> <pre><code>public Task&lt;int&gt; GetNumberAsync()\n{\n    return Task.FromResult(42);\n}\n</code></pre>"},{"location":"dotnet/authentication-authorization/","title":"Authentication ve Authorization","text":"<p>Authentication (kimlik do\u011frulama) ve authorization (yetkilendirme), modern web uygulamalar\u0131n\u0131n temel g\u00fcvenlik bile\u015fenleridir. Yanl\u0131\u015f uygulamalar g\u00fcvenlik a\u00e7\u0131klar\u0131na, performans sorunlar\u0131na ve kullan\u0131c\u0131 deneyimi problemlerine yol a\u00e7abilir.</p>"},{"location":"dotnet/authentication-authorization/#1-jwtnin-yanls-kullanm","title":"1. JWT\u2019nin Yanl\u0131\u015f Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: JWT\u2019yi saklamak i\u00e7in <code>localStorage</code> kullanmak.</p> <pre><code>localStorage.setItem(\"jwt\", token); // G\u00fcvenlik a\u00e7\u0131\u011f\u0131na neden olabilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: JWT\u2019yi <code>HttpOnly</code> cookie olarak saklayarak XSS sald\u0131r\u0131lar\u0131n\u0131 \u00f6nleyin.</p> <pre><code>var cookieOptions = new CookieOptions\n{\n    HttpOnly = true,\n    Secure = true,\n    SameSite = SameSiteMode.Strict\n};\nResponse.Cookies.Append(\"jwt\", token, cookieOptions);\n</code></pre>"},{"location":"dotnet/authentication-authorization/#2-hatal-yetkilendirme-kontrolleri","title":"2. Hatal\u0131 Yetkilendirme Kontrolleri","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yetkilendirme kontrollerini istemci taraf\u0131nda ger\u00e7ekle\u015ftirmek.</p> <pre><code>if (user.role === \"admin\") {\n    // Yetkili i\u015flemler\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Yetkilendirme kontrollerini sunucu taraf\u0131nda ger\u00e7ekle\u015ftirin.</p> <pre><code>[Authorize(Roles = \"Admin\")]\npublic IActionResult AdminEndpoint()\n{\n    return Ok(\"Yaln\u0131zca admin kullan\u0131c\u0131lar eri\u015febilir.\");\n}\n</code></pre>"},{"location":"dotnet/authentication-authorization/#3-sifrelerin-yanls-yonetimi","title":"3. \u015eifrelerin Yanl\u0131\u015f Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u015eifreleri d\u00fcz metin (plaintext) olarak saklamak.</p> <pre><code>INSERT INTO Users (Username, Password) VALUES ('user1', '123456');\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u015eifreleri hash\u2019leyerek g\u00fcvenli bir \u015fekilde saklay\u0131n.</p> <pre><code>var hashedPassword = BCrypt.Net.BCrypt.HashPassword(\"123456\");\n</code></pre>"},{"location":"dotnet/authentication-authorization/#4-guvenli-olmayan-varsaylan-yaplandrmalar","title":"4. G\u00fcvenli Olmayan Varsay\u0131lan Yap\u0131land\u0131rmalar","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: HTTPS\u2019i zorunlu k\u0131lmamak.</p> <pre><code>app.UseAuthentication();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: HTTPS kullan\u0131m\u0131n\u0131 zorunlu k\u0131l\u0131n ve g\u00fcvenli yap\u0131land\u0131rmalar uygulay\u0131n.</p> <pre><code>app.UseHttpsRedirection();\napp.UseAuthentication();\n</code></pre>"},{"location":"dotnet/authentication-authorization/#5-expired-token-yonetiminin-ihmal-edilmesi","title":"5. Expired Token Y\u00f6netiminin \u0130hmal Edilmesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: S\u00fcresi dolan token\u2019lar\u0131 kontrol etmemek.</p> <pre><code>var tokenHandler = new JwtSecurityTokenHandler();\nvar token = tokenHandler.ReadJwtToken(jwt);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Token ge\u00e7erlili\u011fini do\u011frulay\u0131n ve s\u00fcresi dolan token\u2019lar\u0131 y\u00f6netin.</p> <pre><code>var validationParameters = new TokenValidationParameters\n{\n    ValidateIssuer = true,\n    ValidateAudience = true,\n    ValidateLifetime = true,\n    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"secret_key\"))\n};\ntokenHandler.ValidateToken(jwt, validationParameters, out SecurityToken validatedToken);\n</code></pre>"},{"location":"dotnet/authentication-authorization/#6-role-based-authorization-yanls-kullanm","title":"6. Role-Based Authorization Yanl\u0131\u015f Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Rolleri sabit kodlamak.</p> <pre><code>if (user.Role == \"Admin\")\n{\n    // Yetkili i\u015flemler\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Policy-based authorization uygulay\u0131n.</p> <pre><code>services.AddAuthorization(options =&gt;\n{\n    options.AddPolicy(\"AdminOnly\", policy =&gt; policy.RequireRole(\"Admin\"));\n});\n\n[Authorize(Policy = \"AdminOnly\")]\npublic IActionResult AdminEndpoint()\n{\n    return Ok(\"Yaln\u0131zca admin kullan\u0131c\u0131lar eri\u015febilir.\");\n}\n</code></pre>"},{"location":"dotnet/authentication-authorization/#7-open-redirect-guvenlik-acklar","title":"7. Open Redirect G\u00fcvenlik A\u00e7\u0131klar\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Redirect URL\u2019lerini do\u011frulamadan y\u00f6nlendirmek.</p> <pre><code>return Redirect(returnUrl); // G\u00fcvenlik a\u00e7\u0131\u011f\u0131\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Y\u00f6nlendirme URL\u2019lerini do\u011frulay\u0131n.</p> <pre><code>if (Url.IsLocalUrl(returnUrl))\n{\n    return Redirect(returnUrl);\n}\nreturn RedirectToAction(\"Index\", \"Home\");\n</code></pre>"},{"location":"dotnet/authentication-authorization/#8-kullanc-oturumlarnn-kotu-yonetimi","title":"8. Kullan\u0131c\u0131 Oturumlar\u0131n\u0131n K\u00f6t\u00fc Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Kullan\u0131c\u0131 oturumlar\u0131n\u0131 manuel olarak y\u00f6netmek.</p> <pre><code>HttpContext.Session.SetString(\"User\", \"user1\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Identity framework gibi standart oturum y\u00f6netimi ara\u00e7lar\u0131n\u0131 kullan\u0131n.</p> <pre><code>services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()\n    .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()\n    .AddDefaultTokenProviders();\n</code></pre>"},{"location":"dotnet/background-services/","title":"Background Services: K\u00f6t\u00fc ve \u0130deal Kullan\u0131m","text":"<p>Background services, uzun s\u00fcreli i\u015flemleri veya arka planda \u00e7al\u0131\u015fmas\u0131 gereken g\u00f6revleri y\u00f6netmek i\u00e7in kullan\u0131l\u0131r. Yanl\u0131\u015f tasarlanm\u0131\u015f arka plan servisleri performans sorunlar\u0131na, kaynak t\u00fcketimine ve beklenmedik hatalara yol a\u00e7abilir.</p>"},{"location":"dotnet/background-services/#1-uzun-sureli-islemleri-ui-threadde-calstrmak","title":"1. Uzun S\u00fcreli \u0130\u015flemleri UI Thread\u2019de \u00c7al\u0131\u015ft\u0131rmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Uzun s\u00fcreli i\u015flemleri UI thread\u2019inde \u00e7al\u0131\u015ft\u0131rmak.</p> <pre><code>public void DoWork()\n{\n    Thread.Sleep(5000); // UI thread'i bloke eder\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Uzun s\u00fcreli i\u015flemleri arka planda \u00e7al\u0131\u015ft\u0131r\u0131n.</p> <pre><code>public class BackgroundTaskService : BackgroundService\n{\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            await Task.Delay(5000, stoppingToken); // Arka planda \u00e7al\u0131\u015f\u0131r\n        }\n    }\n}\n</code></pre>"},{"location":"dotnet/background-services/#2-cancellationtoken-kullanmn-ihmal-etmek","title":"2. CancellationToken Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u0130ptal token\u2019\u0131 olmadan arka plan g\u00f6revleri olu\u015fturmak.</p> <pre><code>protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    while (true)\n    {\n        await Task.Delay(1000); // \u0130ptal edilemez\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>CancellationToken</code> kullanarak g\u00f6revlerin d\u00fczg\u00fcn bir \u015fekilde iptal edilmesini sa\u011flay\u0131n.</p> <pre><code>protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    while (!stoppingToken.IsCancellationRequested)\n    {\n        await Task.Delay(1000, stoppingToken);\n    }\n}\n</code></pre>"},{"location":"dotnet/background-services/#3-hatalar-kontrolsuz-brakmak","title":"3. Hatalar\u0131 Kontrols\u00fcz B\u0131rakmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Arka plan g\u00f6revlerindeki hatalar\u0131 g\u00f6z ard\u0131 etmek.</p> <pre><code>protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    while (!stoppingToken.IsCancellationRequested)\n    {\n        throw new Exception(\"Bir hata olu\u015ftu.\"); // Y\u00f6netilmez\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hatalar\u0131 yakalayarak loglay\u0131n ve y\u00f6netilebilir hale getirin.</p> <pre><code>protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    while (!stoppingToken.IsCancellationRequested)\n    {\n        try\n        {\n            // \u0130\u015f mant\u0131\u011f\u0131\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Hata: {ex.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"dotnet/background-services/#4-fazla-sayda-background-service-olusturmak","title":"4. Fazla Say\u0131da Background Service Olu\u015fturmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her g\u00f6rev i\u00e7in ayr\u0131 bir background service tan\u0131mlamak.</p> <pre><code>services.AddHostedService&lt;Service1&gt;();\nservices.AddHostedService&lt;Service2&gt;();\nservices.AddHostedService&lt;Service3&gt;();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: G\u00f6revleri birle\u015ftirerek y\u00f6netilebilir bir yap\u0131 olu\u015fturun.</p> <pre><code>public class CombinedBackgroundService : BackgroundService\n{\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        var task1 = Task1(stoppingToken);\n        var task2 = Task2(stoppingToken);\n        await Task.WhenAll(task1, task2);\n    }\n\n    private async Task Task1(CancellationToken stoppingToken) { /* ... */ }\n    private async Task Task2(CancellationToken stoppingToken) { /* ... */ }\n}\n</code></pre>"},{"location":"dotnet/background-services/#5-kaynaklar-serbest-brakmamak","title":"5. Kaynaklar\u0131 Serbest B\u0131rakmamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Arka plan g\u00f6revlerinde kullan\u0131lan kaynaklar\u0131 temizlememek.</p> <pre><code>public class MyBackgroundService : BackgroundService\n{\n    private readonly Timer _timer = new Timer(OnTimerElapsed);\n\n    protected override Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        _timer.Change(0, 1000); // Timer ba\u015flat\u0131l\u0131r ancak temizlenmez\n        return Task.CompletedTask;\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>Dispose</code> metodunu kullanarak kaynaklar\u0131 temizleyin.</p> <pre><code>public class MyBackgroundService : BackgroundService, IDisposable\n{\n    private readonly Timer _timer = new Timer(OnTimerElapsed);\n\n    protected override Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        _timer.Change(0, 1000);\n        return Task.CompletedTask;\n    }\n\n    public override void Dispose()\n    {\n        _timer?.Dispose();\n        base.Dispose();\n    }\n}\n</code></pre>"},{"location":"dotnet/background-services/#6-performans-izlememek","title":"6. Performans\u0131 \u0130zlememek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Arka plan g\u00f6revlerinin performans\u0131n\u0131 ve durumunu izlememek.</p> <p>\u2705 \u0130deal Kullan\u0131m: \u0130zleme ara\u00e7lar\u0131 kullanarak performans\u0131 \u00f6l\u00e7\u00fcn.</p> <ul> <li>\u00d6rnek Ara\u00e7lar: Application Insights, Prometheus, Grafana</li> </ul> <pre><code>protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    var stopwatch = Stopwatch.StartNew();\n\n    while (!stoppingToken.IsCancellationRequested)\n    {\n        stopwatch.Restart();\n        await DoWorkAsync();\n        Console.WriteLine($\"G\u00f6rev s\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n    }\n}\n</code></pre>"},{"location":"dotnet/caching-strategies/","title":"Caching Stratejileri","text":"<p>Caching, uygulama performans\u0131n\u0131 art\u0131rman\u0131n ve kaynak t\u00fcketimini azaltman\u0131n etkili bir yoludur. Ancak, yanl\u0131\u015f kullan\u0131lan caching stratejileri performans sorunlar\u0131na, veri tutars\u0131zl\u0131\u011f\u0131na ve fazla bellek kullan\u0131m\u0131na yol a\u00e7abilir.</p>"},{"location":"dotnet/caching-strategies/#1-gereksiz-yere-buyuk-verileri-cache-etmek","title":"1. Gereksiz Yere B\u00fcy\u00fck Verileri Cache Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck verileri do\u011frudan cache\u2019e eklemek.</p> <pre><code>var largeData = GetLargeData();\n_memoryCache.Set(\"LargeData\", largeData);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: B\u00fcy\u00fck verileri b\u00f6lerek veya s\u0131k\u0131\u015ft\u0131rarak cache\u2019e ekleyin.</p> <pre><code>var largeData = GetLargeData();\nvar compressedData = CompressData(largeData);\n_memoryCache.Set(\"CompressedLargeData\", compressedData);\n</code></pre>"},{"location":"dotnet/caching-strategies/#2-cache-suresini-yanls-ayarlamak","title":"2. Cache S\u00fcresini Yanl\u0131\u015f Ayarlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Sonsuz s\u00fcreyle cache kullanmak.</p> <pre><code>_memoryCache.Set(\"Data\", data, TimeSpan.MaxValue);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Uygun bir s\u00fcre belirleyin ve gerekti\u011finde sliding expiration kullan\u0131n.</p> <pre><code>_memoryCache.Set(\"Data\", data, new MemoryCacheEntryOptions\n{\n    AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30),\n    SlidingExpiration = TimeSpan.FromMinutes(10)\n});\n</code></pre>"},{"location":"dotnet/caching-strategies/#3-distributed-cache-kullanmn-ihmal-etmek","title":"3. Distributed Cache Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm cache verilerini sadece bellek i\u00e7inde saklamak.</p> <pre><code>services.AddMemoryCache();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Da\u011f\u0131t\u0131lm\u0131\u015f cache kullanarak \u00f6l\u00e7eklenebilirli\u011fi art\u0131r\u0131n.</p> <pre><code>services.AddStackExchangeRedisCache(options =&gt;\n{\n    options.Configuration = \"localhost:6379\";\n    options.InstanceName = \"MyApp_\";\n});\n</code></pre>"},{"location":"dotnet/caching-strategies/#4-lazy-loading-kullanmn-ihmal-etmek","title":"4. Lazy Loading Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Verileri \u00f6nceden y\u00fckleyip gereksiz bellek kullan\u0131m\u0131 yapmak.</p> <pre><code>var data = GetDataFromDatabase();\n_memoryCache.Set(\"Data\", data);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Lazy loading ile yaln\u0131zca gerekti\u011finde verileri y\u00fckleyin.</p> <pre><code>_memoryCache.GetOrCreate(\"Data\", entry =&gt;\n{\n    entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30);\n    return GetDataFromDatabase();\n});\n</code></pre>"},{"location":"dotnet/caching-strategies/#5-cache-invalidasyonunu-yonetememek","title":"5. Cache Invalidasyonunu Y\u00f6netememek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Veri de\u011fi\u015fikliklerini cache\u2019e yans\u0131tmamak.</p> <pre><code>_memoryCache.Set(\"User_123\", user);\nuser.Name = \"Updated Name\"; // Cache g\u00fcncellenmiyor\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Veri de\u011fi\u015fikliklerini cache\u2019de g\u00fcncelleyin veya invalidasyonu y\u00f6netin.</p> <pre><code>_memoryCache.Remove(\"User_123\");\n_memoryCache.Set(\"User_123\", updatedUser);\n</code></pre>"},{"location":"dotnet/caching-strategies/#6-hassas-verilerin-cache-edilmesi","title":"6. Hassas Verilerin Cache Edilmesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u015eifreler veya ki\u015fisel bilgileri cache\u2019e eklemek.</p> <pre><code>_memoryCache.Set(\"UserPassword\", \"123456\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hassas verileri cache\u2019e eklemekten ka\u00e7\u0131n\u0131n.</p>"},{"location":"dotnet/caching-strategies/#7-cache-kullanmn-olcumlememek","title":"7. Cache Kullan\u0131m\u0131n\u0131 \u00d6l\u00e7\u00fcmlememek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Cache hit/miss oranlar\u0131n\u0131 izlememek.</p> <p>\u2705 \u0130deal Kullan\u0131m: Cache performans\u0131n\u0131 izlemek i\u00e7in \u00f6l\u00e7\u00fcmleme yap\u0131n.</p> <ul> <li>\u00d6rnek: Prometheus, Grafana veya App Insights kullanarak performans verilerini toplay\u0131n.</li> <li>Kodda \u00d6rnek:</li> </ul> <pre><code>if (!_memoryCache.TryGetValue(\"Data\", out var data))\n{\n    data = GetDataFromDatabase();\n    _memoryCache.Set(\"Data\", data);\n    Console.WriteLine(\"Cache miss!\");\n}\nelse\n{\n    Console.WriteLine(\"Cache hit!\");\n}\n</code></pre>"},{"location":"dotnet/configuration-management/","title":"Configuration Management (Yap\u0131land\u0131rma Y\u00f6netimi)","text":"<p>Uygulama yap\u0131land\u0131rmas\u0131, bir yaz\u0131l\u0131m\u0131n farkl\u0131 ortamlarda (geli\u015ftirme, test, \u00fcretim) do\u011fru \u015fekilde \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flamak i\u00e7in kritik \u00f6neme sahiptir. Yanl\u0131\u015f yap\u0131land\u0131rma y\u00f6netimi, g\u00fcvenlik a\u00e7\u0131klar\u0131na veya uygulama hatalar\u0131na yol a\u00e7abilir.</p>"},{"location":"dotnet/configuration-management/#1-sabit-kodlanms-hardcoded-degerler-kullanm","title":"1. Sabit Kodlanm\u0131\u015f (Hardcoded) De\u011ferler Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yap\u0131land\u0131rmalar\u0131 do\u011frudan kod i\u00e7inde tan\u0131mlamak.</p> <pre><code>public class DatabaseConfig\n{\n    public string ConnectionString =&gt; \"Server=localhost;Database=MyApp;User=admin;Password=password;\";\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>appsettings.json</code> veya \u00e7evresel de\u011fi\u015fkenler kullanarak yap\u0131land\u0131rmalar\u0131 d\u0131\u015fsalla\u015ft\u0131r\u0131n.</p> <p>appsettings.json: <pre><code>{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=localhost;Database=MyApp;User=admin;Password=password;\"\n  }\n}\n</code></pre></p> <p>Kullan\u0131m: <pre><code>var builder = WebApplication.CreateBuilder(args);\nvar connectionString = builder.Configuration.GetConnectionString(\"DefaultConnection\");\n</code></pre></p>"},{"location":"dotnet/configuration-management/#2-cevresel-yaplandrmalarn-yetersiz-yonetimi","title":"2. \u00c7evresel Yap\u0131land\u0131rmalar\u0131n Yetersiz Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm ortamlar i\u00e7in ayn\u0131 yap\u0131land\u0131rmay\u0131 kullanmak.</p> <pre><code>{\n  \"Environment\": \"Production\",\n  \"Logging\": {\n    \"LogLevel\": \"Information\"\n  }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ortam bazl\u0131 yap\u0131land\u0131rmalar\u0131 ayr\u0131 dosyalarla y\u00f6netin.</p> <p>appsettings.Development.json: <pre><code>{\n  \"Environment\": \"Development\",\n  \"Logging\": {\n    \"LogLevel\": \"Debug\"\n  }\n}\n</code></pre></p> <p>appsettings.Production.json: <pre><code>{\n  \"Environment\": \"Production\",\n  \"Logging\": {\n    \"LogLevel\": \"Error\"\n  }\n}\n</code></pre></p>"},{"location":"dotnet/configuration-management/#3-gizli-bilgilerin-acga-ckarlmas","title":"3. Gizli Bilgilerin A\u00e7\u0131\u011fa \u00c7\u0131kar\u0131lmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: API anahtarlar\u0131 veya \u015fifreleri a\u00e7\u0131k \u015fekilde saklamak.</p> <pre><code>{\n  \"APIKey\": \"12345-secret-key\"\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gizli bilgileri \u00e7evresel de\u011fi\u015fkenlerde veya g\u00fcvenli bir yap\u0131land\u0131rma hizmetinde saklay\u0131n.</p> <p>Kullan\u0131m: <pre><code>var apiKey = Environment.GetEnvironmentVariable(\"MY_APP_API_KEY\");\n</code></pre></p>"},{"location":"dotnet/configuration-management/#4-yaplandrma-degisikliklerini-yeniden-dagtm-gerektirmek","title":"4. Yap\u0131land\u0131rma De\u011fi\u015fikliklerini Yeniden Da\u011f\u0131t\u0131m Gerektirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yap\u0131land\u0131rma de\u011fi\u015fiklikleri i\u00e7in uygulaman\u0131n yeniden ba\u015flat\u0131lmas\u0131.</p> <pre><code>public class Config\n{\n    public string SomeSetting { get; set; } = \"DefaultValue\";\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Dinamik yap\u0131land\u0131rma y\u00fcklemeleri yap\u0131n.</p> <p>\u00d6rnek: Azure App Configuration veya di\u011fer dinamik yap\u0131land\u0131rma ara\u00e7lar\u0131n\u0131 kullan\u0131n.</p> <pre><code>builder.Configuration.AddAzureAppConfiguration(\"ConnectionString\");\n</code></pre>"},{"location":"dotnet/configuration-management/#5-gereksiz-karmasklk-yaratmak","title":"5. Gereksiz Karma\u015f\u0131kl\u0131k Yaratmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz yap\u0131land\u0131rma anahtarlar\u0131 ve karma\u015f\u0131kl\u0131k.</p> <pre><code>{\n  \"AppSettings\": {\n    \"Feature1\": {\n      \"Enabled\": true,\n      \"MaxItems\": 10,\n      \"Timeout\": 5000\n    },\n    \"Feature2\": {\n      \"Enabled\": false,\n      \"MaxItems\": 5,\n      \"Timeout\": 2000\n    }\n  }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sade ve okunabilir yap\u0131land\u0131rmalar olu\u015fturun.</p> <pre><code>{\n  \"Features\": [\n    {\n      \"Name\": \"Feature1\",\n      \"Enabled\": true,\n      \"MaxItems\": 10,\n      \"Timeout\": 5000\n    },\n    {\n      \"Name\": \"Feature2\",\n      \"Enabled\": false,\n      \"MaxItems\": 5,\n      \"Timeout\": 2000\n    }\n  ]\n}\n</code></pre>"},{"location":"dotnet/configuration-management/#6-ortam-degiskenlerinin-yanls-kullanm","title":"6. Ortam De\u011fi\u015fkenlerinin Yanl\u0131\u015f Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ortam de\u011fi\u015fkenlerini do\u011frudan ve d\u00fczensiz bir \u015fekilde okumak.</p> <pre><code>var setting = Environment.GetEnvironmentVariable(\"MY_APP_SETTING\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ortam de\u011fi\u015fkenlerini yap\u0131land\u0131rma ile birle\u015ftirin.</p> <pre><code>builder.Configuration.AddEnvironmentVariables();\nvar setting = builder.Configuration[\"MY_APP_SETTING\"];\n</code></pre>"},{"location":"dotnet/dependency-injection/","title":"Dependency Injection (DI)","text":"<p>Dependency Injection (DI), bir uygulamada ba\u011f\u0131ml\u0131l\u0131klar\u0131n y\u00f6netimini kolayla\u015ft\u0131rarak test edilebilirli\u011fi ve kodun s\u00fcrd\u00fcr\u00fclebilirli\u011fini art\u0131r\u0131r. Ancak DI yanl\u0131\u015f kullan\u0131ld\u0131\u011f\u0131nda kodun karma\u015f\u0131kl\u0131\u011f\u0131n\u0131 art\u0131rabilir.</p>"},{"location":"dotnet/dependency-injection/#1-bagmllklarn-elle-yonetilmesi","title":"1. Ba\u011f\u0131ml\u0131l\u0131klar\u0131n Elle Y\u00f6netilmesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131klar\u0131 elle \u00f6rneklemek.</p> <pre><code>public class OrderService\n{\n    private readonly ProductRepository _productRepository;\n\n    public OrderService()\n    {\n        _productRepository = new ProductRepository(); // S\u0131k\u0131 ba\u011f\u0131ml\u0131l\u0131k\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131klar\u0131 bir IoC konteyn\u0131r\u0131 \u00fczerinden enjekte edin.</p> <pre><code>public class OrderService\n{\n    private readonly IProductRepository _productRepository;\n\n    public OrderService(IProductRepository productRepository)\n    {\n        _productRepository = productRepository;\n    }\n}\n</code></pre>"},{"location":"dotnet/dependency-injection/#2-yanls-yasam-suresi-lifetime-yonetimi","title":"2. Yanl\u0131\u015f Ya\u015fam S\u00fcresi (Lifetime) Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Scoped ba\u011f\u0131ml\u0131l\u0131klar\u0131 singleton bir hizmete enjekte etmek.</p> <pre><code>services.AddSingleton&lt;MyService&gt;();\nservices.AddScoped&lt;MyDbContext&gt;();\n\npublic class MyService\n{\n    private readonly MyDbContext _dbContext;\n\n    public MyService(MyDbContext dbContext)\n    {\n        _dbContext = dbContext; // Hatal\u0131 ya\u015fam s\u00fcresi\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131klar\u0131n ya\u015fam s\u00fcresini do\u011fru yap\u0131land\u0131r\u0131n.</p> <pre><code>services.AddScoped&lt;MyService&gt;();\nservices.AddScoped&lt;MyDbContext&gt;();\n\npublic class MyService\n{\n    private readonly MyDbContext _dbContext;\n\n    public MyService(MyDbContext dbContext)\n    {\n        _dbContext = dbContext;\n    }\n}\n</code></pre>"},{"location":"dotnet/dependency-injection/#3-cok-fazla-bagmllk-enjeksiyonu","title":"3. \u00c7ok Fazla Ba\u011f\u0131ml\u0131l\u0131k Enjeksiyonu","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Bir s\u0131n\u0131fta \u00e7ok fazla ba\u011f\u0131ml\u0131l\u0131\u011f\u0131 do\u011frudan enjekte etmek.</p> <pre><code>public class MyController\n{\n    public MyController(IService1 service1, IService2 service2, IService3 service3, IService4 service4)\n    {\n        // \u00c7ok fazla ba\u011f\u0131ml\u0131l\u0131k\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131klar\u0131 grupland\u0131rarak bir aray\u00fcz ile soyutlay\u0131n.</p> <pre><code>public interface IServiceGroup\n{\n    IService1 Service1 { get; }\n    IService2 Service2 { get; }\n}\n\npublic class ServiceGroup : IServiceGroup\n{\n    public IService1 Service1 { get; }\n    public IService2 Service2 { get; }\n\n    public ServiceGroup(IService1 service1, IService2 service2)\n    {\n        Service1 = service1;\n        Service2 = service2;\n    }\n}\n</code></pre>"},{"location":"dotnet/dependency-injection/#4-service-locator-kullanm","title":"4. Service Locator Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Service locator anti-pattern\u2019ini kullanmak.</p> <pre><code>public class MyService\n{\n    public void DoWork()\n    {\n        var service = ServiceLocator.GetService&lt;IMyDependency&gt;();\n        service.PerformAction();\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131klar\u0131 do\u011frudan enjekte edin.</p> <pre><code>public class MyService\n{\n    private readonly IMyDependency _myDependency;\n\n    public MyService(IMyDependency myDependency)\n    {\n        _myDependency = myDependency;\n    }\n\n    public void DoWork()\n    {\n        _myDependency.PerformAction();\n    }\n}\n</code></pre>"},{"location":"dotnet/dependency-injection/#5-test-edilebilirligi-goz-ard-etmek","title":"5. Test Edilebilirli\u011fi G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: S\u0131k\u0131 ba\u011f\u0131ml\u0131l\u0131klar nedeniyle test edilemeyen s\u0131n\u0131flar.</p> <pre><code>public class ReportService\n{\n    private readonly Logger _logger = new Logger();\n\n    public void GenerateReport()\n    {\n        _logger.Log(\"Rapor olu\u015fturuluyor...\");\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Logger gibi ba\u011f\u0131ml\u0131l\u0131klar\u0131 enjekte ederek test edilebilirli\u011fi art\u0131r\u0131n.</p> <pre><code>public class ReportService\n{\n    private readonly ILogger _logger;\n\n    public ReportService(ILogger logger)\n    {\n        _logger = logger;\n    }\n\n    public void GenerateReport()\n    {\n        _logger.Log(\"Rapor olu\u015fturuluyor...\");\n    }\n}\n</code></pre>"},{"location":"dotnet/dependency-injection/#6-hizmetlerin-asr-kayd","title":"6. Hizmetlerin A\u015f\u0131r\u0131 Kayd\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her ba\u011f\u0131ml\u0131l\u0131\u011f\u0131 manuel olarak kaydetmek.</p> <pre><code>services.AddSingleton&lt;IService1, Service1&gt;();\nservices.AddSingleton&lt;IService2, Service2&gt;();\nservices.AddSingleton&lt;IService3, Service3&gt;();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Assembly tarama ile hizmetleri otomatik olarak kaydedin.</p> <pre><code>var assemblies = AppDomain.CurrentDomain.GetAssemblies();\nservices.Scan(scan =&gt; scan\n    .FromAssemblies(assemblies)\n    .AddClasses()\n    .AsImplementedInterfaces()\n    .WithScopedLifetime());\n</code></pre>"},{"location":"dotnet/dynamic-configuration/","title":"Dynamic Configuration: K\u00f6t\u00fc ve \u0130deal Kullan\u0131m","text":"<p>Dynamic configuration, uygulaman\u0131z\u0131n yap\u0131land\u0131rma ayarlar\u0131n\u0131 \u00e7al\u0131\u015fma zaman\u0131nda de\u011fi\u015ftirme yetene\u011fi sa\u011flar. Yanl\u0131\u015f kullan\u0131lan dinamik yap\u0131land\u0131rmalar, veri tutars\u0131zl\u0131klar\u0131na ve beklenmedik davran\u0131\u015flara yol a\u00e7abilir.</p>"},{"location":"dotnet/dynamic-configuration/#1-sabit-kodlanms-yaplandrmalar","title":"1. Sabit Kodlanm\u0131\u015f Yap\u0131land\u0131rmalar","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yap\u0131land\u0131rmalar\u0131 sabit kodlamak.</p> <pre><code>public class AppConfig\n{\n    public const string ConnectionString = \"Server=localhost;Database=MyApp;User=admin;Password=1234;\";\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Yap\u0131land\u0131rmalar\u0131 bir dosya veya \u00e7evresel de\u011fi\u015fkenlerde tutarak dinamik hale getirin.</p> <p>appsettings.json: <pre><code>{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=localhost;Database=MyApp;User=admin;Password=1234;\"\n  }\n}\n</code></pre></p> <p>Kullan\u0131m: <pre><code>var connectionString = builder.Configuration.GetConnectionString(\"DefaultConnection\");\n</code></pre></p>"},{"location":"dotnet/dynamic-configuration/#2-hassas-bilgileri-guvenli-bir-sekilde-yonetmemek","title":"2. Hassas Bilgileri G\u00fcvenli Bir \u015eekilde Y\u00f6netmemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hassas bilgileri yap\u0131land\u0131rma dosyalar\u0131nda d\u00fcz metin olarak saklamak.</p> <pre><code>{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=localhost;Database=MyApp;User=admin;Password=1234;\"\n  }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hassas bilgileri g\u00fcvenli bir \u015fekilde y\u00f6netmek i\u00e7in bir secret management arac\u0131 kullan\u0131n.</p> <p>HashiCorp Vault Kullan\u0131m\u0131:</p> <pre><code>builder.Configuration.AddVault(options =&gt;\n{\n    options.Address = \"https://vault.example.com\";\n    options.Token = Environment.GetEnvironmentVariable(\"VAULT_TOKEN\");\n});\n</code></pre> <p>Azure Key Vault Kullan\u0131m\u0131:</p> <pre><code>builder.Configuration.AddAzureKeyVault(\n    new Uri(\"https://mykeyvault.vault.azure.net/\"),\n    new DefaultAzureCredential()\n);\n</code></pre>"},{"location":"dotnet/dynamic-configuration/#3-dinamik-yaplandrmay-izlememek","title":"3. Dinamik Yap\u0131land\u0131rmay\u0131 \u0130zlememek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yap\u0131land\u0131rma de\u011fi\u015fikliklerini izlememek.</p> <p>\u2705 \u0130deal Kullan\u0131m: Dinamik yap\u0131land\u0131rma de\u011fi\u015fikliklerini izlemek i\u00e7in yap\u0131land\u0131rma sa\u011flay\u0131c\u0131lar\u0131n\u0131 kullan\u0131n.</p> <p>Azure App Configuration \u00d6rne\u011fi: <pre><code>builder.Configuration.AddAzureAppConfiguration(options =&gt;\n{\n    options.Connect(\"ConnectionString\")\n           .ConfigureRefresh(refresh =&gt;\n           {\n               refresh.Register(\"AppSettings:Sentinel\", refreshAll: true);\n           });\n});\n</code></pre></p>"},{"location":"dotnet/dynamic-configuration/#4-performans-uzerindeki-etkileri-goz-ard-etmek","title":"4. Performans \u00dczerindeki Etkileri G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yap\u0131land\u0131rmalar\u0131n s\u00fcrekli olarak okunmas\u0131.</p> <pre><code>var setting = builder.Configuration[\"AppSettings:SettingKey\"]; // S\u00fcrekli \u00e7a\u011fr\u0131lar\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Yap\u0131land\u0131rmalar\u0131 bir cache mekanizmas\u0131 ile optimize edin.</p> <pre><code>public class MyService\n{\n    private readonly IConfiguration _configuration;\n    private string _cachedSetting;\n\n    public MyService(IConfiguration configuration)\n    {\n        _configuration = configuration;\n        _cachedSetting = _configuration[\"AppSettings:SettingKey\"];\n    }\n}\n</code></pre>"},{"location":"dotnet/error-handling/","title":"Error Handling","text":"<p>Hata y\u00f6netimi (error handling), yaz\u0131l\u0131m\u0131n g\u00fcvenilirli\u011fini ve kararl\u0131l\u0131\u011f\u0131n\u0131 art\u0131ran \u00f6nemli bir unsurdur. Ancak, hatalar\u0131n do\u011fru y\u00f6netilmemesi, hata ay\u0131klamay\u0131 zorla\u015ft\u0131rabilir ve uygulama performans\u0131n\u0131 olumsuz etkileyebilir.</p>"},{"location":"dotnet/error-handling/#1-hatalarn-genel-olarak-yakalanmas","title":"1. Hatalar\u0131n Genel Olarak Yakalanmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm hatalar\u0131 <code>Exception</code> s\u0131n\u0131f\u0131yla yakalamak.</p> <pre><code>try\n{\n    // \u0130\u015flem\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Hata: {ex.Message}\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Spesifik hata t\u00fcrlerini yakalayarak daha detayl\u0131 hata y\u00f6netimi ger\u00e7ekle\u015ftirin.</p> <pre><code>try\n{\n    // \u0130\u015flem\n}\ncatch (NullReferenceException ex)\n{\n    Console.WriteLine($\"Null reference hatas\u0131: {ex.Message}\");\n}\ncatch (FileNotFoundException ex)\n{\n    Console.WriteLine($\"Dosya bulunamad\u0131: {ex.Message}\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Beklenmeyen bir hata: {ex.Message}\");\n}\n</code></pre>"},{"location":"dotnet/error-handling/#2-finally-blogunun-yanls-kullanm","title":"2. Finally Blo\u011funun Yanl\u0131\u015f Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>finally</code> blo\u011fu i\u00e7inde kodun kontrol d\u0131\u015f\u0131 b\u0131rak\u0131lmas\u0131.</p> <pre><code>try\n{\n    // \u0130\u015flem\n}\nfinally\n{\n    throw new InvalidOperationException(\"Hatal\u0131 i\u015flem\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Kaynaklar\u0131n do\u011fru \u015fekilde serbest b\u0131rak\u0131lmas\u0131n\u0131 sa\u011flay\u0131n.</p> <pre><code>FileStream? file = null;\n\ntry\n{\n    file = new FileStream(\"data.txt\", FileMode.Open);\n    // \u0130\u015flem\n}\nfinally\n{\n    file?.Dispose();\n}\n</code></pre>"},{"location":"dotnet/error-handling/#3-asenkron-hata-yonetimi","title":"3. Asenkron Hata Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Asenkron hatalar\u0131 <code>await</code> etmeden yakalamaya \u00e7al\u0131\u015fmak.</p> <pre><code>try\n{\n    DoAsync(); // await eksik\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Hata: {ex.Message}\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Asenkron i\u015flemleri <code>await</code> ile yakalayarak do\u011fru hata y\u00f6netimi sa\u011flay\u0131n.</p> <pre><code>try\n{\n    await DoAsync();\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Asenkron hata: {ex.Message}\");\n}\n</code></pre>"},{"location":"dotnet/error-handling/#4-hatalarn-gunluge-kaydedilmemesi","title":"4. Hatalar\u0131n G\u00fcnl\u00fc\u011fe Kaydedilmemesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hatalar\u0131 yaln\u0131zca konsola yazd\u0131rmak.</p> <pre><code>catch (Exception ex)\n{\n    Console.WriteLine($\"Hata: {ex.Message}\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: G\u00fcnl\u00fckleme (logging) framework\u2019leri ile hatalar\u0131 kaydedin.</p> <pre><code>var logger = LoggerFactory.Create(builder =&gt; builder.AddConsole()).CreateLogger(\"ErrorLogger\");\n\ntry\n{\n    // \u0130\u015flem\n}\ncatch (Exception ex)\n{\n    logger.LogError(ex, \"Bir hata olu\u015ftu.\");\n}\n</code></pre>"},{"location":"dotnet/error-handling/#5-global-exception-handler","title":"5. Global Exception Handler","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm hatalar\u0131 global olarak y\u00f6netmemek.</p> <pre><code>app.MapGet(\"/\", () =&gt; throw new Exception(\"Bir hata olu\u015ftu!\"));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: T\u00fcm uygulama genelinde hatalar\u0131 ele almak i\u00e7in bir middleware kullan\u0131n.</p> <pre><code>app.UseExceptionHandler(\"/error\");\n\napp.Map(\"/error\", (HttpContext context) =&gt;\n{\n    var exception = context.Features.Get&lt;IExceptionHandlerFeature&gt;()?.Error;\n    return Results.Problem(detail: exception?.Message, statusCode: 500);\n});\n</code></pre>"},{"location":"dotnet/error-handling/#6-hata-yonetiminde-ozel-snflar-kullanm","title":"6. Hata Y\u00f6netiminde \u00d6zel S\u0131n\u0131flar Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hata y\u00f6netimi i\u00e7in standart <code>Exception</code> s\u0131n\u0131f\u0131n\u0131 do\u011frudan kullanmak.</p> <pre><code>throw new Exception(\"Hatal\u0131 i\u015flem\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u00d6zel hata s\u0131n\u0131flar\u0131 olu\u015fturarak daha anlaml\u0131 hata mesajlar\u0131 sa\u011flay\u0131n.</p> <pre><code>public class CustomException : Exception\n{\n    public CustomException(string message) : base(message) { }\n}\n\nthrow new CustomException(\"Bu \u00f6zel bir hatad\u0131r.\");\n</code></pre>"},{"location":"dotnet/error-handling/#7-hatalarn-sessizce-yutulmas","title":"7. Hatalar\u0131n Sessizce Yutulmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hatalar\u0131 yakalay\u0131p hi\u00e7bir i\u015flem yapmamak.</p> <pre><code>try\n{\n    // \u0130\u015flem\n}\ncatch\n{\n    // Sessizce yutulan hata\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hatalar\u0131 do\u011fru bir \u015fekilde i\u015fleyin veya kaydedin.</p> <pre><code>try\n{\n    // \u0130\u015flem\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Hata: {ex.Message}\");\n}\n</code></pre>"},{"location":"dotnet/exception-logging/","title":"Exception Logging","text":"<p>Exception logging, bir uygulamada meydana gelen hatalar\u0131 anlamak ve d\u00fczeltmek i\u00e7in hayati \u00f6nem ta\u015f\u0131r. Ancak, k\u00f6t\u00fc yap\u0131land\u0131r\u0131lm\u0131\u015f veya yetersiz logging stratejileri, hata ay\u0131klamay\u0131 zorla\u015ft\u0131rabilir.</p>"},{"location":"dotnet/exception-logging/#1-hatalarn-gunluge-kaydedilmemesi","title":"1. Hatalar\u0131n G\u00fcnl\u00fc\u011fe Kaydedilmemesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hatalar\u0131 yaln\u0131zca konsola yazd\u0131rmak.</p> <pre><code>try\n{\n    // \u0130\u015flem\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Hata: {ex.Message}\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: G\u00fcnl\u00fckleme framework\u2019leri ile hatalar\u0131 detayl\u0131 \u015fekilde kaydedin.</p> <pre><code>var logger = LoggerFactory.Create(builder =&gt; builder.AddConsole()).CreateLogger(\"AppLogger\");\n\ntry\n{\n    // \u0130\u015flem\n}\ncatch (Exception ex)\n{\n    logger.LogError(ex, \"Bir hata olu\u015ftu.\");\n}\n</code></pre>"},{"location":"dotnet/exception-logging/#2-yetersiz-hata-mesajlar","title":"2. Yetersiz Hata Mesajlar\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hatalar\u0131n ba\u011flam\u0131n\u0131 (context) belirtmemek.</p> <pre><code>catch (Exception ex)\n{\n    logger.LogError(ex.Message); // Ba\u011flam eksik\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hata ba\u011flam\u0131n\u0131 a\u00e7\u0131k\u00e7a belirterek daha fazla bilgi sa\u011flay\u0131n.</p> <pre><code>catch (Exception ex)\n{\n    logger.LogError(ex, \"Veritaban\u0131 i\u015flemi s\u0131ras\u0131nda bir hata olu\u015ftu.\");\n}\n</code></pre>"},{"location":"dotnet/exception-logging/#3-global-exception-loggingi-atlamak","title":"3. Global Exception Logging\u2019i Atlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Global hata y\u00f6netimini ve g\u00fcnl\u00fcklemeyi ihmal etmek.</p> <pre><code>app.MapGet(\"/\", () =&gt; throw new Exception(\"Hata!\")); // Global y\u00f6netim yok\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Global exception handler ile t\u00fcm hatalar\u0131 yakalay\u0131n.</p> <pre><code>app.UseExceptionHandler(\"/error\");\n\napp.Map(\"/error\", (HttpContext context) =&gt;\n{\n    var exception = context.Features.Get&lt;IExceptionHandlerFeature&gt;()?.Error;\n    logger.LogError(exception, \"Global bir hata yakaland\u0131.\");\n    return Results.Problem(detail: exception?.Message, statusCode: 500);\n});\n</code></pre>"},{"location":"dotnet/exception-logging/#4-hatalarn-tekrar-edilerek-kaydedilmesi","title":"4. Hatalar\u0131n Tekrar Edilerek Kaydedilmesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ayn\u0131 hatay\u0131 birden fazla kez kaydetmek.</p> <pre><code>catch (Exception ex)\n{\n    logger.LogError(ex, \"Hata!\");\n    throw; // Yeniden kaydedilir.\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hatalar\u0131 yaln\u0131zca bir kez kaydedin.</p> <pre><code>catch (Exception ex) when (LogException(ex))\n{\n    throw;\n}\n\nstatic bool LogException(Exception ex)\n{\n    logger.LogError(ex, \"Hata kaydedildi.\");\n    return false;\n}\n</code></pre>"},{"location":"dotnet/exception-logging/#5-hassas-bilgilerin-gunluge-kaydedilmesi","title":"5. Hassas Bilgilerin G\u00fcnl\u00fc\u011fe Kaydedilmesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Kullan\u0131c\u0131 verilerini veya hassas bilgileri loglamak.</p> <pre><code>catch (Exception ex)\n{\n    logger.LogError($\"Hata: {ex.Message}, Kullan\u0131c\u0131: {user.Password}\"); // G\u00fcvenlik a\u00e7\u0131\u011f\u0131\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hassas bilgileri hari\u00e7 tutun.</p> <pre><code>catch (Exception ex)\n{\n    logger.LogError(ex, \"Hata olu\u015ftu.\");\n}\n</code></pre>"},{"location":"dotnet/exception-logging/#6-logging-seviyelerini-yanls-kullanmak","title":"6. Logging Seviyelerini Yanl\u0131\u015f Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm hatalar\u0131 ayn\u0131 seviyede kaydetmek.</p> <pre><code>logger.LogError(\"Hata!\"); // Her \u015fey Error olarak loglanm\u0131\u015f.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Do\u011fru log seviyelerini kullan\u0131n.</p> <pre><code>logger.LogInformation(\"Bilgilendirme: \u0130\u015flem ba\u015flad\u0131.\");\nlogger.LogWarning(\"Uyar\u0131: Beklenmeyen bir durum.\");\nlogger.LogError(\"Hata: Bir istisna yakaland\u0131.\");\n</code></pre>"},{"location":"dotnet/exception-logging/#7-log-management-sistemlerini-kullanmamak","title":"7. Log Management Sistemlerini Kullanmamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Lokal loglama ile s\u0131n\u0131rl\u0131 kalmak.</p> <pre><code>logger.LogError(\"Hata kaydedildi.\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Merkezi log y\u00f6netimi ara\u00e7lar\u0131n\u0131 kullan\u0131n.</p> <ul> <li>Azure Application Insights</li> <li>Elastic Stack (ELK)</li> <li>Sentry</li> <li>Loggly</li> <li>Seq</li> <li>Splunk</li> <li>Datadog</li> <li>Raygun</li> <li>New Relic</li> <li>Serilog</li> <li>NLog</li> <li>Log4Net</li> <li>Graylog</li> </ul>"},{"location":"dotnet/fluent-validation/","title":"Validation ve FluentValidation Kullan\u0131m\u0131","text":"<p>Validation (do\u011frulama), kullan\u0131c\u0131 giri\u015flerini kontrol ederek uygulaman\u0131n g\u00fcvenli\u011fini ve b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc sa\u011flamak i\u00e7in kritik bir s\u00fcre\u00e7tir. FluentValidation, g\u00fc\u00e7l\u00fc ve esnek do\u011frulama kurallar\u0131 olu\u015fturmay\u0131 kolayla\u015ft\u0131r\u0131r. Yanl\u0131\u015f kullan\u0131lan do\u011frulama kurallar\u0131 veri tutars\u0131zl\u0131\u011f\u0131na ve g\u00fcvenlik a\u00e7\u0131klar\u0131na yol a\u00e7abilir.</p>"},{"location":"dotnet/fluent-validation/#1-dogrudan-kodda-validation-kurallar-yazmak","title":"1. Do\u011frudan Kodda Validation Kurallar\u0131 Yazmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Do\u011frulama kurallar\u0131n\u0131 do\u011frudan i\u015f mant\u0131\u011f\u0131na dahil etmek.</p> <pre><code>public IActionResult CreateUser(User user)\n{\n    if (string.IsNullOrWhiteSpace(user.Name) || user.Age &lt; 18)\n    {\n        return BadRequest(\"Hatal\u0131 kullan\u0131c\u0131 verisi.\");\n    }\n\n    // \u0130\u015f mant\u0131\u011f\u0131\n    return Ok();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: FluentValidation ile do\u011frulama kurallar\u0131n\u0131 ay\u0131r\u0131n.</p> <pre><code>public class UserValidator : AbstractValidator&lt;User&gt;\n{\n    public UserValidator()\n    {\n        RuleFor(user =&gt; user.Name).NotEmpty().WithMessage(\"Kullan\u0131c\u0131 ad\u0131 bo\u015f olamaz.\");\n        RuleFor(user =&gt; user.Age).GreaterThanOrEqualTo(18).WithMessage(\"Ya\u015f 18'den b\u00fcy\u00fck olmal\u0131d\u0131r.\");\n    }\n}\n\npublic IActionResult CreateUser(User user)\n{\n    var validator = new UserValidator();\n    var result = validator.Validate(user);\n    if (!result.IsValid)\n    {\n        return BadRequest(result.Errors);\n    }\n\n    // \u0130\u015f mant\u0131\u011f\u0131\n    return Ok();\n}\n</code></pre>"},{"location":"dotnet/fluent-validation/#2-cok-fazla-kurala-sahip-karmask-validatorlar","title":"2. \u00c7ok Fazla Kurala Sahip Karma\u015f\u0131k Validatorlar","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tek bir s\u0131n\u0131fta a\u015f\u0131r\u0131 derecede karma\u015f\u0131k do\u011frulama kurallar\u0131 tan\u0131mlamak.</p> <pre><code>public class ComplexValidator : AbstractValidator&lt;ComplexObject&gt;\n{\n    public ComplexValidator()\n    {\n        RuleFor(x =&gt; x.Property1).NotEmpty();\n        RuleFor(x =&gt; x.Property2).GreaterThan(0);\n        RuleFor(x =&gt; x.NestedObject.Property).NotEmpty();\n        // ... daha fazla karma\u015f\u0131k kural\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Kurallar\u0131 alt validator\u2019lara ay\u0131rarak y\u00f6netilebilir hale getirin.</p> <pre><code>public class NestedObjectValidator : AbstractValidator&lt;NestedObject&gt;\n{\n    public NestedObjectValidator()\n    {\n        RuleFor(x =&gt; x.Property).NotEmpty();\n    }\n}\n\npublic class ComplexValidator : AbstractValidator&lt;ComplexObject&gt;\n{\n    public ComplexValidator()\n    {\n        RuleFor(x =&gt; x.Property1).NotEmpty();\n        RuleFor(x =&gt; x.Property2).GreaterThan(0);\n        RuleFor(x =&gt; x.NestedObject).SetValidator(new NestedObjectValidator());\n    }\n}\n</code></pre>"},{"location":"dotnet/fluent-validation/#3-cascademode-kullanmn-ihmal-etmek","title":"3. <code>CascadeMode</code> Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her kural\u0131n ayr\u0131 ayr\u0131 tetiklenmesine neden olmak.</p> <pre><code>public UserValidator()\n{\n    RuleFor(user =&gt; user.Email).NotEmpty().EmailAddress();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: CascadeMode kullanarak do\u011frulama i\u015flemini optimize edin.</p> <pre><code>public UserValidator()\n{\n    RuleFor(user =&gt; user.Email)\n        .Cascade(CascadeMode.Stop)\n        .NotEmpty()\n        .EmailAddress();\n}\n</code></pre>"},{"location":"dotnet/fluent-validation/#4-hatalar-kullanc-dostu-sekilde-donusturmemek","title":"4. Hatalar\u0131 Kullan\u0131c\u0131 Dostu \u015eekilde D\u00f6n\u00fc\u015ft\u00fcrmemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hatalar\u0131 kullan\u0131c\u0131 dostu olmayan bir formatta d\u00f6nd\u00fcrmek.</p> <pre><code>return BadRequest(result.Errors);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hatalar\u0131 kullan\u0131c\u0131 dostu bir formatta d\u00f6n\u00fc\u015ft\u00fcr\u00fcn.</p> <pre><code>return BadRequest(result.Errors.Select(e =&gt; e.ErrorMessage));\n</code></pre>"},{"location":"dotnet/fluent-validation/#5-global-dogrulama-yonetimi-kullanmn-atlamak","title":"5. Global Do\u011frulama Y\u00f6netimi Kullan\u0131m\u0131n\u0131 Atlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her yerde manuel olarak validator \u00e7a\u011f\u0131rmak.</p> <pre><code>var validator = new UserValidator();\nvar result = validator.Validate(user);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Global do\u011frulama y\u00f6netimini etkinle\u015ftirin.</p> <pre><code>services.AddFluentValidationAutoValidation()\n        .AddValidatorsFromAssemblyContaining&lt;UserValidator&gt;();\n</code></pre>"},{"location":"dotnet/fluent-validation/#6-veri-taban-bagmllklarn-validatorda-kullanmak","title":"6. Veri Taban\u0131 Ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131 Validator\u2019da Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Validator i\u00e7inde do\u011frudan veri taban\u0131 sorgular\u0131 yapmak.</p> <pre><code>RuleFor(user =&gt; user.Email).Must(email =&gt; !dbContext.Users.Any(u =&gt; u.Email == email))\n    .WithMessage(\"Bu e-posta zaten kullan\u0131l\u0131yor.\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131klar\u0131 constructor \u00fczerinden inject edin.</p> <pre><code>public class UserValidator : AbstractValidator&lt;User&gt;\n{\n    private readonly MyDbContext _dbContext;\n\n    public UserValidator(MyDbContext dbContext)\n    {\n        _dbContext = dbContext;\n\n        RuleFor(user =&gt; user.Email).Must(IsUniqueEmail)\n            .WithMessage(\"Bu e-posta zaten kullan\u0131l\u0131yor.\");\n    }\n\n    private bool IsUniqueEmail(string email)\n    {\n        return !_dbContext.Users.Any(u =&gt; u.Email == email);\n    }\n}\n</code></pre>"},{"location":"dotnet/globalization-localization/","title":"Globalization ve Localization","text":"<p>Globalization ve localization, uygulaman\u0131z\u0131n farkl\u0131 diller ve k\u00fclt\u00fcrler i\u00e7in uygun hale getirilmesi s\u00fcrecidir. Yanl\u0131\u015f uygulamalar kullan\u0131c\u0131 deneyimini olumsuz etkileyebilir veya yanl\u0131\u015f dil/format g\u00f6sterimine neden olabilir.</p>"},{"location":"dotnet/globalization-localization/#1-sabit-kodlanms-hardcoded-metinler-kullanmak","title":"1. Sabit Kodlanm\u0131\u015f (Hardcoded) Metinler Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Metinleri do\u011frudan sabit kodlamak.</p> <pre><code>public string GetWelcomeMessage()\n{\n    return \"Welcome to our application!\";\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Kaynak dosyalar\u0131n\u0131 kullanarak metinleri yerelle\u015ftirin.</p> <p>Resources/Texts.resx: <pre><code>&lt;data name=\"WelcomeMessage\" xml:space=\"preserve\"&gt;\n  &lt;value&gt;Welcome to our application!&lt;/value&gt;\n&lt;/data&gt;\n</code></pre></p> <p>Kullan\u0131m: <pre><code>public string GetWelcomeMessage()\n{\n    return Resources.Texts.WelcomeMessage;\n}\n</code></pre></p>"},{"location":"dotnet/globalization-localization/#2-tarih-ve-saat-formatlarn-sabit-kodlamak","title":"2. Tarih ve Saat Formatlar\u0131n\u0131 Sabit Kodlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tarih ve saat formatlar\u0131n\u0131 manuel olarak ayarlamak.</p> <pre><code>var date = DateTime.Now.ToString(\"MM/dd/yyyy\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: K\u00fclt\u00fcr bilgilerini kullanarak tarih ve saat formatlar\u0131n\u0131 otomatik hale getirin.</p> <pre><code>var date = DateTime.Now.ToString(CultureInfo.CurrentCulture);\n</code></pre>"},{"location":"dotnet/globalization-localization/#3-threadcurrentthreadcurrentculture-dogrudan-degistirmek","title":"3. <code>Thread.CurrentThread.CurrentCulture</code>\u2018\u0131 Do\u011frudan De\u011fi\u015ftirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>Thread.CurrentThread.CurrentCulture</code>\u2018\u0131 manuel olarak de\u011fi\u015ftirmek.</p> <pre><code>Thread.CurrentThread.CurrentCulture = new CultureInfo(\"fr-FR\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Middleware kullanarak k\u00fclt\u00fcr ayarlar\u0131n\u0131 y\u00f6netin.</p> <pre><code>app.UseRequestLocalization(new RequestLocalizationOptions\n{\n    DefaultRequestCulture = new RequestCulture(\"en-US\"),\n    SupportedCultures = new[] { new CultureInfo(\"en-US\"), new CultureInfo(\"fr-FR\") },\n    SupportedUICultures = new[] { new CultureInfo(\"en-US\"), new CultureInfo(\"fr-FR\") }\n});\n</code></pre>"},{"location":"dotnet/globalization-localization/#4-kullanc-tercihlerine-gore-dil-ayar-yapmamak","title":"4. Kullan\u0131c\u0131 Tercihlerine G\u00f6re Dil Ayar\u0131 Yapmamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Varsay\u0131lan dil ayar\u0131n\u0131 t\u00fcm kullan\u0131c\u0131lara uygulamak.</p> <pre><code>var culture = new CultureInfo(\"en-US\");\nCultureInfo.DefaultThreadCurrentCulture = culture;\nCultureInfo.DefaultThreadCurrentUICulture = culture;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Kullan\u0131c\u0131n\u0131n tercih etti\u011fi dili dikkate al\u0131n.</p> <pre><code>app.Use(async (context, next) =&gt;\n{\n    var userLanguage = context.Request.Headers[\"Accept-Language\"].ToString();\n    var culture = new CultureInfo(userLanguage);\n    CultureInfo.CurrentCulture = culture;\n    CultureInfo.CurrentUICulture = culture;\n\n    await next();\n});\n</code></pre>"},{"location":"dotnet/globalization-localization/#5-cevirilerin-test-edilmemesi","title":"5. \u00c7evirilerin Test Edilmemesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7evirilerin farkl\u0131 dillerde nas\u0131l g\u00f6r\u00fcnece\u011fini test etmemek.</p> <pre><code>Test edilmeden yerelle\u015ftirme yap\u0131l\u0131r.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Farkl\u0131 dillerde \u00e7evirileri test edin.</p> <ul> <li>\u00c7evirileri test etmek i\u00e7in Visual Studio\u2019da \u201cSet as Startup Culture\u201d \u00f6zelli\u011fini kullanabilirsiniz.</li> <li>Ayr\u0131ca <code>CultureInfo</code>\u2018yu manuel olarak de\u011fi\u015ftirebilirsiniz:</li> </ul> <pre><code>var culture = new CultureInfo(\"fr-FR\");\nCultureInfo.CurrentCulture = culture;\nCultureInfo.CurrentUICulture = culture;\n</code></pre>"},{"location":"dotnet/globalization-localization/#6-veritabannda-sabit-kodlanms-datalar-kullanmak","title":"6. Veritaban\u0131nda Sabit Kodlanm\u0131\u015f Datalar Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Veritaban\u0131nda sadece bir dilde i\u00e7erik saklamak.</p> <pre><code>ProductName: \"Laptop\"\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Veritaban\u0131nda \u00e7oklu dil deste\u011fi sa\u011flay\u0131n.</p> <pre><code>ProductName_en: \"Laptop\"\nProductName_fr: \"Ordinateur portable\"\n</code></pre>"},{"location":"dotnet/globalization-localization/#7-yerellestirilmis-kaynaklarn-performansn-izlememek","title":"7. Yerelle\u015ftirilmi\u015f Kaynaklar\u0131n Performans\u0131n\u0131 \u0130zlememek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yerelle\u015ftirilmi\u015f kaynaklar\u0131n y\u00fcklenme performans\u0131n\u0131 g\u00f6z ard\u0131 etmek.</p> <p>\u2705 \u0130deal Kullan\u0131m: Performans izleme ara\u00e7lar\u0131 kullanarak kaynaklar\u0131n y\u00fcklenme h\u0131z\u0131n\u0131 analiz edin.</p> <ul> <li>\u00d6rnek: Application Insights, Prometheus</li> </ul> <pre><code>var startTime = Stopwatch.StartNew();\nvar message = Resources.Texts.WelcomeMessage;\nstartTime.Stop();\nlogger.LogInformation(\"Yerelle\u015ftirilmi\u015f kaynak {TimeTaken} ms'de y\u00fcklendi.\", startTime.ElapsedMilliseconds);\n</code></pre>"},{"location":"dotnet/health-checks-monitoring/","title":"Health Checks ve Uygulama \u0130zleme","text":"<p>Health checks, bir uygulaman\u0131n veya servislerin durumunu kontrol etmek ve sorunlar\u0131 h\u0131zl\u0131ca tespit etmek i\u00e7in kullan\u0131l\u0131r. Yanl\u0131\u015f uygulamalar health kontrollerinin g\u00fcvenilirli\u011fini azaltabilir ve problemlerin ge\u00e7 fark edilmesine yol a\u00e7abilir.</p>"},{"location":"dotnet/health-checks-monitoring/#1-health-check-endpointlerinin-guvensiz-yaplandrlmas","title":"1. Health Check Endpoint\u2019lerinin G\u00fcvensiz Yap\u0131land\u0131r\u0131lmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Health check endpoint\u2019lerini herkese a\u00e7\u0131k yapmak.</p> <pre><code>app.MapHealthChecks(\"/health\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Health check endpoint\u2019lerini yetkilendirme ile koruyun.</p> <pre><code>app.MapHealthChecks(\"/health\").RequireAuthorization();\n</code></pre>"},{"location":"dotnet/health-checks-monitoring/#2-basit-yantlar-kullanmak","title":"2. Basit Yan\u0131tlar Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Health kontrolleri i\u00e7in yetersiz yan\u0131tlar.</p> <pre><code>Healthy\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Detayl\u0131 yan\u0131tlar sa\u011flayarak sorunlar\u0131 anlamay\u0131 kolayla\u015ft\u0131r\u0131n.</p> <pre><code>app.MapHealthChecks(\"/health\", new HealthCheckOptions\n{\n    ResponseWriter = async (context, report) =&gt;\n    {\n        var result = JsonSerializer.Serialize(new\n        {\n            status = report.Status.ToString(),\n            checks = report.Entries.Select(entry =&gt; new\n            {\n                name = entry.Key,\n                status = entry.Value.Status.ToString(),\n                description = entry.Value.Description\n            })\n        });\n        context.Response.ContentType = \"application/json\";\n        await context.Response.WriteAsync(result);\n    }\n});\n</code></pre>"},{"location":"dotnet/health-checks-monitoring/#3-yetersiz-testler","title":"3. Yetersiz Testler","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yaln\u0131zca temel kontroller yapmak.</p> <pre><code>services.AddHealthChecks();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gerekli sistem bile\u015fenlerini kontrol edin.</p> <pre><code>services.AddHealthChecks()\n    .AddSqlServer(\"Server=localhost;Database=MyDb;User=sa;Password=Your_password123;\")\n    .AddRedis(\"localhost:6379\")\n    .AddCheck(\"Custom Check\", () =&gt;\n        HealthCheckResult.Healthy(\"Custom kontrol ba\u015far\u0131l\u0131!\"));\n</code></pre>"},{"location":"dotnet/health-checks-monitoring/#4-health-checklerin-surekli-izlenmemesi","title":"4. Health Check\u2019lerin S\u00fcrekli \u0130zlenmemesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Health check sonu\u00e7lar\u0131n\u0131 yaln\u0131zca manuel olarak kontrol etmek.</p> <pre><code>// Otomatik izleme yap\u0131lm\u0131yor\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Health check sonu\u00e7lar\u0131n\u0131 izleme ara\u00e7lar\u0131 ile entegre edin.</p> <ul> <li>\u00d6rnek: Prometheus ve Grafana, Azure Monitor, Datadog</li> </ul> <pre><code>services.AddHealthChecks()\n    .AddCheck(\"Custom Check\", () =&gt;\n        HealthCheckResult.Healthy(\"Her \u015fey yolunda!\"))\n    .ForwardToPrometheus();\n</code></pre>"},{"location":"dotnet/health-checks-monitoring/#5-timeout-surelerini-yanls-ayarlamak","title":"5. Timeout S\u00fcrelerini Yanl\u0131\u015f Ayarlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7ok k\u0131sa veya uzun timeout s\u00fcreleri kullanmak.</p> <pre><code>services.AddHealthChecks().AddSqlServer(\"Connection String\", timeout: TimeSpan.FromSeconds(1));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Uygun timeout s\u00fcreleri belirleyin.</p> <pre><code>services.AddHealthChecks().AddSqlServer(\"Connection String\", timeout: TimeSpan.FromSeconds(5));\n</code></pre>"},{"location":"dotnet/health-checks-monitoring/#6-health-check-verilerini-loglamamak","title":"6. Health Check Verilerini Loglamamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Health check sonu\u00e7lar\u0131n\u0131 loglamamak.</p> <p>\u2705 \u0130deal Kullan\u0131m: Health kontrol\u00fc sonu\u00e7lar\u0131n\u0131 loglayarak izlenebilirli\u011fi art\u0131r\u0131n.</p> <pre><code>app.MapHealthChecks(\"/health\", new HealthCheckOptions\n{\n    ResponseWriter = async (context, report) =&gt;\n    {\n        foreach (var entry in report.Entries)\n        {\n            logger.LogInformation(\"Health Check: {Name}, Status: {Status}\",\n                entry.Key, entry.Value.Status);\n        }\n        await context.Response.WriteAsync(\"Health check completed.\");\n    }\n});\n</code></pre>"},{"location":"dotnet/health-checks-monitoring/#7-custom-health-checklerin-kotu-tasarlanmas","title":"7. Custom Health Check\u2019lerin K\u00f6t\u00fc Tasarlanmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Custom health check\u2019lerde anlaml\u0131 olmayan durumlar d\u00f6nd\u00fcrmek.</p> <pre><code>public class CustomHealthCheck : IHealthCheck\n{\n    public Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\n    {\n        return Task.FromResult(HealthCheckResult.Unhealthy());\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Custom health check\u2019leri sistem durumu hakk\u0131nda do\u011fru bilgi verecek \u015fekilde tasarlay\u0131n.</p> <pre><code>public class CustomHealthCheck : IHealthCheck\n{\n    public Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\n    {\n        var isHealthy = CheckSomeCriticalResource();\n        return Task.FromResult(isHealthy\n            ? HealthCheckResult.Healthy(\"Sistem \u00e7al\u0131\u015f\u0131yor.\")\n            : HealthCheckResult.Unhealthy(\"Sistem kritik bir kaynakla ileti\u015fim kuram\u0131yor.\"));\n    }\n\n    private bool CheckSomeCriticalResource()\n    {\n        // Kritik kayna\u011f\u0131n kontrol\u00fc\n        return true;\n    }\n}\n</code></pre>"},{"location":"dotnet/logging-monitoring/","title":"Logging ve Monitoring","text":"<p>Logging ve monitoring, uygulaman\u0131z\u0131n durumu hakk\u0131nda bilgi toplamak, sorunlar\u0131 tespit etmek ve performans optimizasyonu yapmak i\u00e7in kritik \u00f6neme sahiptir. Yanl\u0131\u015f uygulamalar log karma\u015fas\u0131na veya yetersiz izlemeye yol a\u00e7abilir.</p>"},{"location":"dotnet/logging-monitoring/#1-yetersiz-log-seviyeleri","title":"1. Yetersiz Log Seviyeleri","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm log mesajlar\u0131n\u0131 ayn\u0131 seviyede kaydetmek.</p> <pre><code>logger.LogError(\"Uygulama ba\u015flat\u0131l\u0131yor.\");\nlogger.LogError(\"Bir hata olu\u015ftu.\");\nlogger.LogError(\"Ba\u011flant\u0131 sa\u011fland\u0131.\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Log seviyelerini olay\u0131n \u00f6nem derecesine g\u00f6re ayarlay\u0131n.</p> <pre><code>logger.LogInformation(\"Uygulama ba\u015flat\u0131l\u0131yor.\");\nlogger.LogError(\"Bir hata olu\u015ftu.\");\nlogger.LogDebug(\"Ba\u011flant\u0131 sa\u011fland\u0131.\");\n</code></pre>"},{"location":"dotnet/logging-monitoring/#2-hatal-gunlukleme-format","title":"2. Hatal\u0131 G\u00fcnl\u00fckleme Format\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Log mesajlar\u0131n\u0131 okunmas\u0131 zor formatlarda kaydetmek.</p> <pre><code>logger.LogInformation(\"Error123: ModuleX Failed at StepY.\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Yap\u0131land\u0131r\u0131lm\u0131\u015f loglama kullanarak okunabilir ve analiz edilebilir log formatlar\u0131 olu\u015fturun.</p> <pre><code>logger.LogInformation(\"Module {Module} failed at step {Step}.\", \"X\", \"Y\");\n</code></pre>"},{"location":"dotnet/logging-monitoring/#3-loglarn-gereksiz-detay-icermesi","title":"3. Loglar\u0131n Gereksiz Detay \u0130\u00e7ermesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her ayr\u0131nt\u0131y\u0131 loglamak.</p> <pre><code>logger.LogInformation(\"Kullan\u0131c\u0131 ID: 123, \u0130sim: Murat Dinc, IP: 192.168.1.1, Taray\u0131c\u0131: Chrome...\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u00d6nemli bilgileri kaydedin, hassas bilgileri hari\u00e7 tutun.</p> <pre><code>logger.LogInformation(\"Kullan\u0131c\u0131 ID: {UserId} oturum a\u00e7t\u0131.\", 123);\n</code></pre>"},{"location":"dotnet/logging-monitoring/#4-log-rotation-kullanlmamas","title":"4. Log Rotation Kullan\u0131lmamas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Log dosyalar\u0131n\u0131 d\u00f6nd\u00fcrmeden s\u00fcrekli b\u00fcy\u00fctmek.</p> <pre><code>app.log // Sonsuza kadar b\u00fcy\u00fcyen log dosyas\u0131\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Log rotation \u00f6zelli\u011fini etkinle\u015ftirin.</p> <ul> <li>\u00d6rnek: Serilog ile log dosyalar\u0131n\u0131 d\u00f6nd\u00fcrmek.</li> </ul> <pre><code>Log.Logger = new LoggerConfiguration()\n    .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n</code></pre>"},{"location":"dotnet/logging-monitoring/#5-merkezi-log-yonetimi-eksikligi","title":"5. Merkezi Log Y\u00f6netimi Eksikli\u011fi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Loglar\u0131n yaln\u0131zca lokal olarak saklanmas\u0131.</p> <pre><code>local-logs/app.log\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Merkezi bir log y\u00f6netim sistemi kullanarak loglar\u0131 bir araya getirin.</p> <ul> <li>Azure Application Insights</li> <li>Elastic Stack (ELK)</li> <li>Datadog</li> </ul> <pre><code>services.AddApplicationInsightsTelemetry();\n</code></pre>"},{"location":"dotnet/logging-monitoring/#6-monitoringin-eksikligi","title":"6. Monitoring\u2019in Eksikli\u011fi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Uygulaman\u0131n performans\u0131n\u0131 ve durumunu izlememek.</p> <p>\u2705 \u0130deal Kullan\u0131m: Performans ve hata izleme ara\u00e7lar\u0131n\u0131 entegre edin.</p> <ul> <li>Prometheus ve Grafana</li> <li>Azure Monitor</li> <li>New Relic</li> </ul>"},{"location":"dotnet/logging-monitoring/#7-hatal-loglama-frekans","title":"7. Hatal\u0131 Loglama Frekans\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: S\u0131k\u00e7a ger\u00e7ekle\u015fen olaylar\u0131 a\u015f\u0131r\u0131 loglamak.</p> <pre><code>for (int i = 0; i &lt; 10000; i++)\n{\n    logger.LogInformation(\"\u0130\u015flem tamamland\u0131.\");\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u00d6nemli olaylar\u0131 loglay\u0131n ve loglama frekans\u0131n\u0131 kontrol edin.</p> <pre><code>if (transactionCount % 100 == 0)\n{\n    logger.LogInformation(\"{TransactionCount} i\u015flem tamamland\u0131.\", transactionCount);\n}\n</code></pre>"},{"location":"dotnet/logging-monitoring/#8-loglarda-hassas-bilgilerin-saklanmas","title":"8. Loglarda Hassas Bilgilerin Saklanmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u015eifreler veya hassas bilgileri loglara dahil etmek.</p> <pre><code>logger.LogInformation(\"Kullan\u0131c\u0131 \u015fifresi: {Password}\", \"123456\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hassas bilgileri hari\u00e7 tutun.</p> <pre><code>logger.LogInformation(\"Kullan\u0131c\u0131 oturum a\u00e7t\u0131: {UserId}\", userId);\n</code></pre>"},{"location":"dotnet/middleware-design/","title":"Middleware Tasar\u0131m\u0131 ve Uygulama","text":"<p>ASP.NET Core\u2019da middleware, bir HTTP iste\u011fi ve yan\u0131t\u0131 \u00fczerinde i\u015flem yapmak i\u00e7in kullan\u0131lan bir yaz\u0131l\u0131m katman\u0131d\u0131r. Middleware\u2019in yanl\u0131\u015f tasarlanmas\u0131 veya uygulanmas\u0131 performans sorunlar\u0131na ve karma\u015f\u0131k kod yap\u0131s\u0131na yol a\u00e7abilir.</p>"},{"location":"dotnet/middleware-design/#1-gereksiz-middleware-kullanm","title":"1. Gereksiz Middleware Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her k\u00fc\u00e7\u00fck i\u015flem i\u00e7in ayr\u0131 middleware olu\u015fturmak.</p> <pre><code>public class LoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public LoggingMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        Console.WriteLine(\"Request: \" + context.Request.Path);\n        await _next(context);\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130lgili i\u015flemleri tek bir middleware i\u00e7inde grupland\u0131r\u0131n.</p> <pre><code>public class CombinedMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public CombinedMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        Console.WriteLine(\"Request: \" + context.Request.Path);\n\n        if (context.Request.Path.StartsWithSegments(\"/secure\"))\n        {\n            // Ek g\u00fcvenlik kontrol\u00fc\n            if (!context.User.Identity.IsAuthenticated)\n            {\n                context.Response.StatusCode = 401;\n                return;\n            }\n        }\n\n        await _next(context);\n    }\n}\n</code></pre>"},{"location":"dotnet/middleware-design/#2-middlewarein-yanls-sralanmas","title":"2. Middleware\u2019in Yanl\u0131\u015f S\u0131ralanmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Middleware s\u0131ras\u0131n\u0131n \u00f6nemli oldu\u011fu durumlarda yanl\u0131\u015f s\u0131rayla ekleme.</p> <pre><code>app.UseAuthentication();\napp.UseAuthorization();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Middleware s\u0131ras\u0131n\u0131 do\u011fru bir \u015fekilde yap\u0131land\u0131r\u0131n.</p> <pre><code>app.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\n</code></pre> <p>\ud83d\udca1 Not: Do\u011fru middleware s\u0131ras\u0131, uygulaman\u0131n d\u00fczg\u00fcn \u00e7al\u0131\u015fmas\u0131 i\u00e7in hayati \u00f6nem ta\u015f\u0131r.</p>"},{"location":"dotnet/middleware-design/#3-response-manuel-olarak-yazmak","title":"3. Response\u2019\u0131 Manuel Olarak Yazmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yan\u0131t\u0131n tamam\u0131n\u0131 manuel olarak i\u015flemek.</p> <pre><code>public async Task InvokeAsync(HttpContext context)\n{\n    if (context.Request.Path == \"/custom\")\n    {\n        context.Response.StatusCode = 200;\n        await context.Response.WriteAsync(\"Custom Response\");\n        return;\n    }\n\n    await _next(context);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>Results</code> s\u0131n\u0131f\u0131n\u0131 veya uygun ara\u00e7lar\u0131 kullanarak yan\u0131tlar\u0131 y\u00f6netin.</p> <pre><code>public async Task InvokeAsync(HttpContext context)\n{\n    if (context.Request.Path == \"/custom\")\n    {\n        context.Response.StatusCode = StatusCodes.Status200OK;\n        await Results.Text(\"Custom Response\").ExecuteAsync(context);\n        return;\n    }\n\n    await _next(context);\n}\n</code></pre>"},{"location":"dotnet/middleware-design/#4-exception-yonetimini-ihmal-etmek","title":"4. Exception Y\u00f6netimini \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Middleware i\u00e7inde yakalanmayan istisnalar b\u0131rakmak.</p> <pre><code>public async Task InvokeAsync(HttpContext context)\n{\n    // Hatal\u0131 \u00e7\u00fcnk\u00fc istisna y\u00f6netimi yok\n    var result = int.Parse(\"NotAnInt\");\n    await _next(context);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Exception y\u00f6netimini dahil ederek istisnalar\u0131 yakalay\u0131n.</p> <pre><code>public async Task InvokeAsync(HttpContext context)\n{\n    try\n    {\n        var result = int.Parse(\"NotAnInt\");\n    }\n    catch (Exception ex)\n    {\n        context.Response.StatusCode = StatusCodes.Status500InternalServerError;\n        await context.Response.WriteAsync($\"Hata: {ex.Message}\");\n        return;\n    }\n\n    await _next(context);\n}\n</code></pre>"},{"location":"dotnet/middleware-design/#5-performans-kayplarna-yol-acan-middleware","title":"5. Performans Kay\u0131plar\u0131na Yol A\u00e7an Middleware","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz loglama ve fazla i\u015flem yapmak.</p> <pre><code>public async Task InvokeAsync(HttpContext context)\n{\n    Console.WriteLine($\"Request Path: {context.Request.Path}\");\n    Console.WriteLine($\"Headers: {string.Join(\", \", context.Request.Headers.Select(h =&gt; h.Key + \": \" + h.Value))}\");\n    await _next(context);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Performans a\u00e7\u0131s\u0131ndan kritik i\u015flemleri minimize edin.</p> <pre><code>public async Task InvokeAsync(HttpContext context)\n{\n    if (context.Request.Path.StartsWithSegments(\"/debug\"))\n    {\n        Console.WriteLine($\"Request Path: {context.Request.Path}\");\n    }\n\n    await _next(context);\n}\n</code></pre>"},{"location":"dotnet/middleware-design/#6-middlewarein-yeniden-kullanlamamas","title":"6. Middleware\u2019in Yeniden Kullan\u0131lamamas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Middleware\u2019i yaln\u0131zca tek bir ba\u011flamda \u00e7al\u0131\u015facak \u015fekilde tasarlamak.</p> <pre><code>app.UseMiddleware&lt;MyCustomMiddleware&gt;();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Middleware\u2019i esnek ve yeniden kullan\u0131labilir hale getirin.</p> <pre><code>public class MyCustomMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly string _customMessage;\n\n    public MyCustomMiddleware(RequestDelegate next, string customMessage)\n    {\n        _next = next;\n        _customMessage = customMessage;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        Console.WriteLine(_customMessage);\n        await _next(context);\n    }\n}\n\napp.UseMiddleware&lt;MyCustomMiddleware&gt;(\"Merhaba D\u00fcnya!\");\n</code></pre>"},{"location":"dotnet/minimal-apis/","title":"Minimal APIs","text":"<p>Minimal APIs, ASP.NET Core ile h\u0131zl\u0131 ve basit bir \u015fekilde API olu\u015fturmak i\u00e7in sunulan bir \u00f6zelliktir. Ancak, do\u011fru \u015fekilde kullan\u0131lmad\u0131\u011f\u0131nda performans sorunlar\u0131na ve kod karma\u015f\u0131kl\u0131\u011f\u0131na yol a\u00e7abilir.</p>"},{"location":"dotnet/minimal-apis/#1-tek-sorumluluk-ilkesi","title":"1. Tek Sorumluluk \u0130lkesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm i\u015f mant\u0131\u011f\u0131n\u0131 bir endpoint\u2019e dahil etmek.</p> <pre><code>app.MapGet(\"/users\", async (HttpContext context) =&gt;\n{\n    var users = await GetUsersFromDatabaseAsync();\n    if (users == null)\n    {\n        context.Response.StatusCode = 404;\n        await context.Response.WriteAsync(\"Kullan\u0131c\u0131 bulunamad\u0131.\");\n        return;\n    }\n    await context.Response.WriteAsJsonAsync(users);\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130\u015f mant\u0131\u011f\u0131n\u0131 ayr\u0131 bir servise ta\u015f\u0131yarak kodun okunabilirli\u011fini art\u0131r\u0131n.</p> <pre><code>app.MapGet(\"/users\", async (IUserService userService) =&gt;\n{\n    var users = await userService.GetAllUsersAsync();\n    return users != null ? Results.Ok(users) : Results.NotFound(\"Kullan\u0131c\u0131 bulunamad\u0131.\");\n});\n</code></pre>"},{"location":"dotnet/minimal-apis/#2-bagmllklarn-dogrudan-yonetimi","title":"2. Ba\u011f\u0131ml\u0131l\u0131klar\u0131n Do\u011frudan Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131klar\u0131n do\u011frudan \u00f6rneklerini olu\u015fturmak.</p> <pre><code>app.MapGet(\"/products\", async () =&gt;\n{\n    using var dbContext = new ProductDbContext();\n    var products = await dbContext.Products.ToListAsync();\n    return products;\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ba\u011f\u0131ml\u0131l\u0131k injection kullanarak kodu test edilebilir hale getirin.</p> <pre><code>app.MapGet(\"/products\", async (IProductService productService) =&gt;\n{\n    var products = await productService.GetAllProductsAsync();\n    return Results.Ok(products);\n});\n</code></pre>"},{"location":"dotnet/minimal-apis/#3-yanls-http-durum-kodlar","title":"3. Yanl\u0131\u015f HTTP Durum Kodlar\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm durumlar i\u00e7in yaln\u0131zca 200 (OK) d\u00f6nd\u00fcrmek.</p> <pre><code>app.MapGet(\"/orders/{id}\", async (int id, IOrderService orderService) =&gt;\n{\n    var order = await orderService.GetOrderByIdAsync(id);\n    return order; // Hatal\u0131 \u00e7\u00fcnk\u00fc durum kodlar\u0131 belirtilmemi\u015f.\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: HTTP durum kodlar\u0131n\u0131 a\u00e7\u0131k\u00e7a belirtmek.</p> <pre><code>app.MapGet(\"/orders/{id}\", async (int id, IOrderService orderService) =&gt;\n{\n    var order = await orderService.GetOrderByIdAsync(id);\n    return order != null ? Results.Ok(order) : Results.NotFound(\"Sipari\u015f bulunamad\u0131.\");\n});\n</code></pre>"},{"location":"dotnet/minimal-apis/#4-middlewarein-yanls-kullanm","title":"4. Middleware\u2019in Yanl\u0131\u015f Kullan\u0131m\u0131","text":"<p>\ud83d\udd34 Yanl\u0131\u015f Kullan\u0131m: Middleware\u2019i endpoint i\u00e7inde manuel olarak \u00e7a\u011f\u0131rmak.</p> <pre><code>app.MapGet(\"/middleware-test\", async (HttpContext context) =&gt;\n{\n    // Hatal\u0131 \u00e7\u00fcnk\u00fc middleware burada elle y\u00f6netiliyor.\n    if (!context.Request.Headers.ContainsKey(\"Authorization\"))\n    {\n        context.Response.StatusCode = 401;\n        return;\n    }\n    await context.Response.WriteAsync(\"Yetkilendirildi.\");\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Middleware\u2019i global bir yap\u0131 olarak tan\u0131mlamak.</p> <pre><code>app.Use(async (context, next) =&gt;\n{\n    if (!context.Request.Headers.ContainsKey(\"Authorization\"))\n    {\n        context.Response.StatusCode = 401;\n        return;\n    }\n    await next();\n});\n\napp.MapGet(\"/middleware-test\", () =&gt; \"Yetkilendirildi.\");\n</code></pre>"},{"location":"dotnet/minimal-apis/#5-kaynak-yonetimi","title":"5. Kaynak Y\u00f6netimi","text":"<p>\ud83d\udd34 Yanl\u0131\u015f Kullan\u0131m: Kaynaklar\u0131n do\u011fru \u015fekilde serbest b\u0131rak\u0131lmamas\u0131.</p> <pre><code>app.MapGet(\"/files\", async () =&gt;\n{\n    var fileStream = new FileStream(\"data.txt\", FileMode.Open);\n    var content = await new StreamReader(fileStream).ReadToEndAsync();\n    return content; // Hatal\u0131 \u00e7\u00fcnk\u00fc dosya kapanm\u0131yor.\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Kaynak y\u00f6netimini <code>using</code> ile kontrol edin.</p> <pre><code>app.MapGet(\"/files\", async () =&gt;\n{\n    using var fileStream = new FileStream(\"data.txt\", FileMode.Open);\n    using var reader = new StreamReader(fileStream);\n    var content = await reader.ReadToEndAsync();\n    return Results.Ok(content);\n});\n</code></pre>"},{"location":"dotnet/minimal-apis/#6-cok-fazla-endpoint-tanm","title":"6. \u00c7ok Fazla Endpoint Tan\u0131m\u0131","text":"<p>\ud83d\udd34 Yanl\u0131\u015f Kullan\u0131m: Her endpoint i\u00e7in benzer mant\u0131\u011f\u0131n tekrarlanmas\u0131.</p> <pre><code>app.MapGet(\"/get-users\", async (IUserService userService) =&gt; await userService.GetAllUsersAsync());\napp.MapGet(\"/get-orders\", async (IOrderService orderService) =&gt; await orderService.GetAllOrdersAsync());\napp.MapGet(\"/get-products\", async (IProductService productService) =&gt; await productService.GetAllProductsAsync());\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ortak davran\u0131\u015flar\u0131 bir yap\u0131land\u0131rma metodunda grupland\u0131r\u0131n.</p> <pre><code>void MapEndpoints(WebApplication app)\n{\n    app.MapGet(\"/users\", async (IUserService userService) =&gt; await userService.GetAllUsersAsync());\n    app.MapGet(\"/orders\", async (IOrderService orderService) =&gt; await orderService.GetAllOrdersAsync());\n    app.MapGet(\"/products\", async (IProductService productService) =&gt; await productService.GetAllProductsAsync());\n}\n\nMapEndpoints(app);\n</code></pre>"},{"location":"dotnet/response-compression/","title":"Response Compression ve Content Optimization","text":"<p>Response compression, web uygulamalar\u0131nda a\u011f \u00fczerinden iletilen verilerin boyutunu azaltarak performans\u0131 art\u0131r\u0131r. Yanl\u0131\u015f yap\u0131land\u0131r\u0131lm\u0131\u015f s\u0131k\u0131\u015ft\u0131rma y\u00f6ntemleri kullan\u0131c\u0131 deneyimini etkileyebilir ve gereksiz a\u011f trafi\u011fine yol a\u00e7abilir.</p>"},{"location":"dotnet/response-compression/#1-response-compression-middleware-kullanmn-ihmal-etmek","title":"1. Response Compression Middleware Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yan\u0131t s\u0131k\u0131\u015ft\u0131rmas\u0131n\u0131 manuel olarak ger\u00e7ekle\u015ftirmek.</p> <pre><code>public async Task InvokeAsync(HttpContext context)\n{\n    var response = context.Response;\n    var originalBody = response.Body;\n\n    using var compressedStream = new GZipStream(originalBody, CompressionMode.Compress);\n    response.Body = compressedStream;\n\n    await _next(context);\n    response.Body = originalBody;\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>ResponseCompression</code> middleware\u2019ini kullanarak s\u0131k\u0131\u015ft\u0131rmay\u0131 etkinle\u015ftirin.</p> <pre><code>builder.Services.AddResponseCompression(options =&gt;\n{\n    options.Providers.Add&lt;GzipCompressionProvider&gt;();\n    options.Providers.Add&lt;BrotliCompressionProvider&gt;();\n    options.EnableForHttps = true;\n});\n\napp.UseResponseCompression();\n</code></pre>"},{"location":"dotnet/response-compression/#2-hatal-mime-turu-yaplandrmas","title":"2. Hatal\u0131 MIME T\u00fcr\u00fc Yap\u0131land\u0131rmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: S\u0131k\u0131\u015ft\u0131r\u0131labilir MIME t\u00fcrlerini belirtmemek.</p> <pre><code>builder.Services.AddResponseCompression();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: S\u0131k\u0131\u015ft\u0131r\u0131labilir MIME t\u00fcrlerini a\u00e7\u0131k\u00e7a tan\u0131mlay\u0131n.</p> <pre><code>builder.Services.AddResponseCompression(options =&gt;\n{\n    options.MimeTypes = new[]\n    {\n        \"text/plain\",\n        \"text/css\",\n        \"application/javascript\",\n        \"text/html\",\n        \"application/json\",\n        \"image/svg+xml\"\n    };\n});\n</code></pre>"},{"location":"dotnet/response-compression/#3-https-uzerinden-skstrmay-devre-ds-brakmak","title":"3. HTTPS \u00dczerinden S\u0131k\u0131\u015ft\u0131rmay\u0131 Devre D\u0131\u015f\u0131 B\u0131rakmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: HTTPS \u00fczerinde s\u0131k\u0131\u015ft\u0131rmay\u0131 devre d\u0131\u015f\u0131 b\u0131rakmak.</p> <pre><code>builder.Services.AddResponseCompression(options =&gt;\n{\n    options.EnableForHttps = false;\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: HTTPS \u00fczerinde s\u0131k\u0131\u015ft\u0131rmay\u0131 etkinle\u015ftirin.</p> <pre><code>builder.Services.AddResponseCompression(options =&gt;\n{\n    options.EnableForHttps = true;\n});\n</code></pre>"},{"location":"dotnet/response-compression/#4-uygun-skstrma-saglayclarn-kullanamamak","title":"4. Uygun S\u0131k\u0131\u015ft\u0131rma Sa\u011flay\u0131c\u0131lar\u0131n\u0131 Kullanamamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Sadece bir s\u0131k\u0131\u015ft\u0131rma sa\u011flay\u0131c\u0131s\u0131 kullanmak.</p> <pre><code>options.Providers.Add&lt;GzipCompressionProvider&gt;();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Birden fazla s\u0131k\u0131\u015ft\u0131rma sa\u011flay\u0131c\u0131s\u0131 ekleyerek kullan\u0131c\u0131 cihazlar\u0131na uygun se\u00e7enekler sunun.</p> <pre><code>builder.Services.Configure&lt;GzipCompressionProviderOptions&gt;(options =&gt;\n{\n    options.Level = CompressionLevel.Fastest;\n});\n\nbuilder.Services.AddResponseCompression(options =&gt;\n{\n    options.Providers.Add&lt;GzipCompressionProvider&gt;();\n    options.Providers.Add&lt;BrotliCompressionProvider&gt;();\n});\n</code></pre>"},{"location":"dotnet/response-compression/#5-skstrma-performansn-izlememek","title":"5. S\u0131k\u0131\u015ft\u0131rma Performans\u0131n\u0131 \u0130zlememek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: S\u0131k\u0131\u015ft\u0131rma etkisini ve performans\u0131n\u0131 analiz etmemek.</p> <p>\u2705 \u0130deal Kullan\u0131m: S\u0131k\u0131\u015ft\u0131rma etkisini ve performans\u0131n\u0131 \u00f6l\u00e7mek i\u00e7in izleme ara\u00e7lar\u0131 kullan\u0131n.</p> <pre><code>app.Use(async (context, next) =&gt;\n{\n    var originalSize = context.Response.Body.Length;\n    await next();\n    var compressedSize = context.Response.Body.Length;\n    Console.WriteLine($\"Orijinal Boyut: {originalSize}, S\u0131k\u0131\u015ft\u0131r\u0131lm\u0131\u015f Boyut: {compressedSize}\");\n});\n</code></pre>"},{"location":"dotnet/response-compression/#6-buyuk-dosyalar-icin-skstrmay-etkinlestirmek","title":"6. B\u00fcy\u00fck Dosyalar \u0130\u00e7in S\u0131k\u0131\u015ft\u0131rmay\u0131 Etkinle\u015ftirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Zaten s\u0131k\u0131\u015ft\u0131r\u0131lm\u0131\u015f dosyalar i\u00e7in yeniden s\u0131k\u0131\u015ft\u0131rma uygulamak.</p> <pre><code>options.MimeTypes = new[] { \"application/zip\", \"image/png\" };\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Zaten s\u0131k\u0131\u015ft\u0131r\u0131lm\u0131\u015f dosyalar\u0131 s\u0131k\u0131\u015ft\u0131rma s\u00fcrecinden hari\u00e7 tutun.</p> <pre><code>builder.Services.AddResponseCompression(options =&gt;\n{\n    options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[]\n    {\n        \"text/plain\",\n        \"text/css\",\n        \"application/javascript\",\n        \"application/json\",\n        \"image/svg+xml\"\n    });\n});\n</code></pre>"},{"location":"dotnet/routing-url-management/","title":"Routing ve URL Y\u00f6netimi","text":"<p>Routing ve URL y\u00f6netimi, web uygulamalar\u0131n\u0131n d\u00fczg\u00fcn \u00e7al\u0131\u015fmas\u0131 ve kullan\u0131c\u0131 deneyiminin art\u0131r\u0131lmas\u0131 i\u00e7in kritik \u00f6neme sahiptir. Yanl\u0131\u015f yap\u0131land\u0131r\u0131lm\u0131\u015f y\u00f6nlendirme, performans sorunlar\u0131na ve hatal\u0131 sonu\u00e7lara yol a\u00e7abilir.</p>"},{"location":"dotnet/routing-url-management/#1-yanls-route-tanmlamalar","title":"1. Yanl\u0131\u015f Route Tan\u0131mlamalar\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7ak\u0131\u015fan veya kar\u0131\u015f\u0131kl\u0131k yaratan route\u2019lar.</p> <pre><code>app.MapGet(\"/products\", () =&gt; \"T\u00fcm \u00fcr\u00fcnler\");\napp.MapGet(\"/products/{id}\", (int id) =&gt; $\"\u00dcr\u00fcn ID: {id}\");\napp.MapGet(\"/products/{category}\", (string category) =&gt; $\"Kategori: {category}\"); // \u00c7ak\u0131\u015fma\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Route\u2019lar\u0131 a\u00e7\u0131k\u00e7a tan\u0131mlay\u0131n ve \u00e7ak\u0131\u015fmalar\u0131 \u00f6nleyin.</p> <pre><code>app.MapGet(\"/products\", () =&gt; \"T\u00fcm \u00fcr\u00fcnler\");\napp.MapGet(\"/products/{id:int}\", (int id) =&gt; $\"\u00dcr\u00fcn ID: {id}\");\napp.MapGet(\"/products/category/{category}\", (string category) =&gt; $\"Kategori: {category}\");\n</code></pre>"},{"location":"dotnet/routing-url-management/#2-gereksiz-route-parametreleri","title":"2. Gereksiz Route Parametreleri","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Route parametrelerini gereksiz yere kullanmak.</p> <pre><code>app.MapGet(\"/user/{id}/details\", (int id) =&gt; $\"Kullan\u0131c\u0131 ID: {id}\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Route parametrelerini anlaml\u0131 ve minimum d\u00fczeyde tutun.</p> <pre><code>app.MapGet(\"/users/{id}\", (int id) =&gt; $\"Kullan\u0131c\u0131 ID: {id}\");\n</code></pre>"},{"location":"dotnet/routing-url-management/#3-catch-all-route-kullanm","title":"3. Catch-All Route Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Catch-all route\u2019lar\u0131 dikkatsizce kullanmak.</p> <pre><code>app.MapGet(\"/{*path}\", (string path) =&gt; $\"Path: {path}\"); // Di\u011fer route'lar\u0131 engelleyebilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Catch-all route\u2019lar\u0131 dikkatlice ve belirli bir amaca y\u00f6nelik kullan\u0131n.</p> <pre><code>app.MapGet(\"/files/{*filepath}\", (string filepath) =&gt; $\"Dosya yolu: {filepath}\");\n</code></pre>"},{"location":"dotnet/routing-url-management/#4-route-adlarnn-kullanlmamas","title":"4. Route Adlar\u0131n\u0131n Kullan\u0131lmamas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Route adlar\u0131n\u0131 belirtmeden URL\u2019lerle \u00e7al\u0131\u015fmak.</p> <pre><code>app.MapGet(\"/home\", () =&gt; \"Ana Sayfa\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Route adlar\u0131n\u0131 belirterek y\u00f6nlendirme i\u015flemlerini daha okunabilir hale getirin.</p> <pre><code>app.MapGet(\"/home\", () =&gt; \"Ana Sayfa\").WithName(\"Home\");\n</code></pre>"},{"location":"dotnet/routing-url-management/#5-query-parametrelerinin-yanls-kullanm","title":"5. Query Parametrelerinin Yanl\u0131\u015f Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Query parametrelerini manuel olarak i\u015flemek.</p> <pre><code>app.MapGet(\"/search\", (HttpContext context) =&gt;\n{\n    var query = context.Request.Query[\"q\"];\n    return $\"Arama: {query}\";\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Query parametrelerini do\u011frudan metot parametresi olarak ba\u011flay\u0131n.</p> <pre><code>app.MapGet(\"/search\", (string q) =&gt; $\"Arama: {q}\");\n</code></pre>"},{"location":"dotnet/routing-url-management/#6-route-constraint-eksikligi","title":"6. Route Constraint Eksikli\u011fi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Route parametrelerini do\u011frulama yapmadan kullanmak.</p> <pre><code>app.MapGet(\"/users/{id}\", (string id) =&gt; $\"Kullan\u0131c\u0131 ID: {id}\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Route constraint\u2019leri kullanarak do\u011fru veri tiplerini belirleyin.</p> <pre><code>app.MapGet(\"/users/{id:int}\", (int id) =&gt; $\"Kullan\u0131c\u0131 ID: {id}\");\n</code></pre>"},{"location":"dotnet/routing-url-management/#7-route-prioritization-sorunlar","title":"7. Route Prioritization Sorunlar\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00d6zel route\u2019lar\u0131 genel route\u2019lar\u0131n alt\u0131na yerle\u015ftirmek.</p> <pre><code>app.MapGet(\"/{category}\", (string category) =&gt; $\"Kategori: {category}\");\napp.MapGet(\"/products\", () =&gt; \"\u00dcr\u00fcn listesi\"); // \u00c7al\u0131\u015fmaz\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Daha \u00f6zel route\u2019lar\u0131 \u00f6nce tan\u0131mlay\u0131n.</p> <pre><code>app.MapGet(\"/products\", () =&gt; \"\u00dcr\u00fcn listesi\");\napp.MapGet(\"/{category}\", (string category) =&gt; $\"Kategori: {category}\");\n</code></pre>"},{"location":"dotnet/static-files-optimization/","title":"Static Files Optimizasyon","text":"<p>Statik dosyalar (CSS, JavaScript, g\u00f6rseller) bir web uygulamas\u0131n\u0131n temel yap\u0131 ta\u015flar\u0131d\u0131r. Yanl\u0131\u015f yap\u0131land\u0131r\u0131lm\u0131\u015f statik dosya y\u00f6netimi, uygulama performans\u0131n\u0131 d\u00fc\u015f\u00fcrebilir ve k\u00f6t\u00fc bir kullan\u0131c\u0131 deneyimine yol a\u00e7abilir.</p>"},{"location":"dotnet/static-files-optimization/#1-statik-dosyalar-dogrudan-serve-etmek","title":"1. Statik Dosyalar\u0131 Do\u011frudan Serve Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Statik dosyalar\u0131 manuel olarak i\u015flemek.</p> <pre><code>app.MapGet(\"/static/{filename}\", async (HttpContext context, string filename) =&gt;\n{\n    var filePath = Path.Combine(\"wwwroot\", filename);\n    if (File.Exists(filePath))\n    {\n        await context.Response.SendFileAsync(filePath);\n    }\n    else\n    {\n        context.Response.StatusCode = 404;\n    }\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>UseStaticFiles</code> middleware\u2019ini kullanarak statik dosyalar\u0131 serve edin.</p> <pre><code>app.UseStaticFiles();\n</code></pre>"},{"location":"dotnet/static-files-optimization/#2-gzip-veya-brotli-skstrmay-ihmal-etmek","title":"2. Gzip veya Brotli S\u0131k\u0131\u015ft\u0131rmay\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: S\u0131k\u0131\u015ft\u0131rma olmadan b\u00fcy\u00fck dosyalar\u0131 serve etmek.</p> <pre><code>T\u00fcm dosyalar s\u0131k\u0131\u015ft\u0131r\u0131lmadan g\u00f6nderiliyor.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>ResponseCompression</code> middleware\u2019ini etkinle\u015ftirin.</p> <pre><code>app.UseResponseCompression();\n\nbuilder.Services.AddResponseCompression(options =&gt;\n{\n    options.EnableForHttps = true;\n    options.Providers.Add&lt;GzipCompressionProvider&gt;();\n    options.Providers.Add&lt;BrotliCompressionProvider&gt;();\n});\n</code></pre>"},{"location":"dotnet/static-files-optimization/#3-cache-control-ve-etag-baslklarnn-eksikligi","title":"3. Cache-Control ve ETag Ba\u015fl\u0131klar\u0131n\u0131n Eksikli\u011fi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Statik dosyalar i\u00e7in \u00f6nbellekleme ba\u015fl\u0131klar\u0131n\u0131 belirtmemek.</p> <pre><code>Cache-Control ba\u015fl\u0131\u011f\u0131 olmadan dosyalar g\u00f6nderiliyor.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u00d6nbellekleme ba\u015fl\u0131klar\u0131n\u0131 yap\u0131land\u0131r\u0131n.</p> <pre><code>app.UseStaticFiles(new StaticFileOptions\n{\n    OnPrepareResponse = context =&gt;\n    {\n        context.Context.Response.Headers[\"Cache-Control\"] = \"public,max-age=31536000\";\n        context.Context.Response.Headers[\"ETag\"] = \"\"unique-id\"\";\n    }\n});\n</code></pre>"},{"location":"dotnet/static-files-optimization/#4-yuksek-cozunurluklu-gorsellerin-optimize-edilmemesi","title":"4. Y\u00fcksek \u00c7\u00f6z\u00fcn\u00fcrl\u00fckl\u00fc G\u00f6rsellerin Optimize Edilmemesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck ve optimize edilmemi\u015f g\u00f6rselleri serve etmek.</p> <pre><code>images/background.png (5MB)\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: G\u00f6rselleri s\u0131k\u0131\u015ft\u0131rarak ve CDN kullanarak optimize edin.</p> <ul> <li>Ara\u00e7lar: ImageMagick, TinyPNG</li> <li>\u00d6rnek: G\u00f6rselleri bir CDN \u00fczerinden da\u011f\u0131tmak.</li> </ul> <pre><code>https://cdn.example.com/images/background.png\n</code></pre>"},{"location":"dotnet/static-files-optimization/#5-guvenlik-baslklarnn-eksikligi","title":"5. G\u00fcvenlik Ba\u015fl\u0131klar\u0131n\u0131n Eksikli\u011fi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Statik dosyalar i\u00e7in g\u00fcvenlik ba\u015fl\u0131klar\u0131n\u0131 ihmal etmek.</p> <pre><code>Statik dosyalar X-Content-Type-Options ba\u015fl\u0131\u011f\u0131 olmadan g\u00f6nderiliyor.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: G\u00fcvenlik ba\u015fl\u0131klar\u0131n\u0131 yap\u0131land\u0131r\u0131n.</p> <pre><code>app.UseStaticFiles(new StaticFileOptions\n{\n    OnPrepareResponse = context =&gt;\n    {\n        context.Context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n        context.Context.Response.Headers[\"Content-Security-Policy\"] = \"default-src 'self'\";\n    }\n});\n</code></pre>"},{"location":"dotnet/static-files-optimization/#6-cdn-kullanmnn-ihmal-edilmesi","title":"6. CDN Kullan\u0131m\u0131n\u0131n \u0130hmal Edilmesi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm statik dosyalar\u0131 do\u011frudan sunucudan serve etmek.</p> <pre><code>T\u00fcm dosyalar sunucudan y\u00fckleniyor.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Statik dosyalar\u0131 bir CDN ile da\u011f\u0131t\u0131n.</p> <pre><code>https://cdn.example.com/styles/main.css\nhttps://cdn.example.com/scripts/app.js\n</code></pre>"},{"location":"dotnet/static-files-optimization/#7-fazla-sayda-http-istegi","title":"7. Fazla Say\u0131da HTTP \u0130ste\u011fi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Fazla say\u0131da k\u00fc\u00e7\u00fck dosyay\u0131 ayr\u0131 ayr\u0131 serve etmek.</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"/css/reset.css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"/css/grid.css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"/css/theme.css\"&gt;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Dosyalar\u0131 birle\u015ftirerek HTTP isteklerini azalt\u0131n.</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"/css/styles.bundle.css\"&gt;\n</code></pre>"},{"location":"dotnet/unit-testing-mocking/","title":"Unit Testing ve Mocking","text":"<p>Unit testing ve mocking, do\u011fru uyguland\u0131\u011f\u0131nda yaz\u0131l\u0131m projelerinin g\u00fcvenilirli\u011fini art\u0131r\u0131r. Ancak bu ara\u00e7lar\u0131n yanl\u0131\u015f kullan\u0131m\u0131, hem test s\u00fcre\u00e7lerini karma\u015f\u0131kla\u015ft\u0131r\u0131r hem de kodun kalitesini olumsuz etkiler. \u0130\u015fte s\u0131k yap\u0131lan hatalar ve do\u011fru kullan\u0131m \u00f6rnekleri.</p>"},{"location":"dotnet/unit-testing-mocking/#1-tek-davrans-test-etmek","title":"1. Tek Davran\u0131\u015f\u0131 Test Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Bir testin birden fazla davran\u0131\u015f\u0131 do\u011frulamaya \u00e7al\u0131\u015fmas\u0131, testlerin amac\u0131n\u0131 karma\u015f\u0131kla\u015ft\u0131r\u0131r.</p> <pre><code>[Fact]\npublic void AddAndSubtract_ShouldReturnCorrectResults()\n{\n    var calculator = new Calculator();\n    var addResult = calculator.Add(2, 3);\n    var subtractResult = calculator.Subtract(5, 3);\n\n    Assert.Equal(5, addResult);\n    Assert.Equal(2, subtractResult);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Her davran\u0131\u015f\u0131 ayr\u0131 bir testte do\u011frulay\u0131n.</p> <pre><code>[Fact]\npublic void Add_ShouldReturnSum()\n{\n    var calculator = new Calculator();\n    var result = calculator.Add(2, 3);\n    Assert.Equal(5, result);\n}\n\n[Fact]\npublic void Subtract_ShouldReturnDifference()\n{\n    var calculator = new Calculator();\n    var result = calculator.Subtract(5, 3);\n    Assert.Equal(2, result);\n}\n</code></pre>"},{"location":"dotnet/unit-testing-mocking/#2-mocklama-ile-asr-karmasklk","title":"2. Mocklama ile A\u015f\u0131r\u0131 Karma\u015f\u0131kl\u0131k","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Mocklama, yaln\u0131zca gereksiz bir soyutlama katman\u0131 ekliyorsa faydas\u0131zd\u0131r.</p> <pre><code>var mockCalculator = new Mock&lt;ICalculator&gt;();\nmockCalculator.Setup(calc =&gt; calc.Add(2, 3)).Returns(5);\n\nvar result = mockCalculator.Object.Add(2, 3);\n\nAssert.Equal(5, result); // Mock burada gereksiz.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Mocklama, yaln\u0131zca ba\u011f\u0131ml\u0131l\u0131klar\u0131 izole etmek i\u00e7in kullan\u0131lmal\u0131d\u0131r.</p>"},{"location":"dotnet/unit-testing-mocking/#var-mockweatherservice-new-mockiweatherservice-mockweatherservicesetupservice-servicegetweatherreturnsgunesli-var-reporter-new-weatherreportermockweatherserviceobject-var-result-reporterreport-assertequalgunesli-result","title":"<pre><code>var mockWeatherService = new Mock&lt;IWeatherService&gt;();\nmockWeatherService.Setup(service =&gt; service.GetWeather()).Returns(\"G\u00fcne\u015fli\");\n\nvar reporter = new WeatherReporter(mockWeatherService.Object);\nvar result = reporter.Report();\n\nAssert.Equal(\"G\u00fcne\u015fli\", result);\n</code></pre>","text":""},{"location":"dotnet/unit-testing-mocking/#3-testler-arasnda-bagmllk-olusturmak","title":"3. Testler Aras\u0131nda Ba\u011f\u0131ml\u0131l\u0131k Olu\u015fturmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Bir test, ba\u015fka bir testin sonu\u00e7lar\u0131na ba\u011f\u0131ml\u0131 olmamal\u0131d\u0131r.</p> <pre><code>[Fact]\npublic void Test_AddAndSubtract()\n{\n    var calculator = new Calculator();\n    var sum = calculator.Add(2, 3);\n    var difference = calculator.Subtract(sum, 2); // Bu test, Add metoduna ba\u011f\u0131ml\u0131d\u0131r.\n\n    Assert.Equal(3, difference);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Testler ba\u011f\u0131ms\u0131z olmal\u0131 ve birbirlerinden etkilenmemelidir.</p> <pre><code>[Fact]\npublic void Add_ShouldReturnSum()\n{\n    var calculator = new Calculator();\n    var result = calculator.Add(2, 3);\n    Assert.Equal(5, result);\n}\n\n[Fact]\npublic void Subtract_ShouldReturnDifference()\n{\n    var calculator = new Calculator();\n    var result = calculator.Subtract(5, 2);\n    Assert.Equal(3, result);\n}\n</code></pre>"},{"location":"dotnet/unit-testing-mocking/#4-assert-kullanmn-ihmal-etmek","title":"4. Assert Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Test sonu\u00e7lar\u0131n\u0131 sadece konsola yazd\u0131rmak yetersizdir.</p> <pre><code>[Fact]\npublic void Add_ShouldPrintResult()\n{\n    var calculator = new Calculator();\n    var result = calculator.Add(2, 3);\n    Console.WriteLine(result); // Konsol \u00e7\u0131kt\u0131s\u0131 yeterli de\u011fildir.\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>Assert</code> ifadeleri ile sonu\u00e7lar\u0131 do\u011frulay\u0131n.</p> <pre><code>[Fact]\npublic void Add_ShouldReturnSum()\n{\n    var calculator = new Calculator();\n    var result = calculator.Add(2, 3);\n    Assert.Equal(5, result);\n}\n</code></pre>"},{"location":"dotnet/unit-testing-mocking/#5-parametreli-testler-kullanmamak","title":"5. Parametreli Testler Kullanmamak","text":"<p>\ud83d\udd34 Yanl\u0131\u015f Kullan\u0131m: Her veri seti i\u00e7in ayr\u0131 test yazmak gereksiz tekrara neden olur.</p> <pre><code>[Fact]\npublic void Add_ShouldReturn5()\n{\n    var calculator = new Calculator();\n    var result = calculator.Add(2, 3);\n    Assert.Equal(5, result);\n}\n\n[Fact]\npublic void Add_ShouldReturnNegative2()\n{\n    var calculator = new Calculator();\n    var result = calculator.Add(-1, -1);\n    Assert.Equal(-2, result);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Parametreli testlerle tekrar\u0131 azalt\u0131n.</p> <pre><code>[Theory]\n[InlineData(2, 3, 5)]\n[InlineData(-1, -1, -2)]\n[InlineData(0, 0, 0)]\npublic void Add_ShouldReturnSum(int a, int b, int expected)\n{\n    var calculator = new Calculator();\n    var result = calculator.Add(a, b);\n    Assert.Equal(expected, result);\n}\n</code></pre>"},{"location":"dotnet/unit-testing-mocking/#6-mock-nesneleri-yanls-konumlandrmak","title":"6. Mock Nesneleri Yanl\u0131\u015f Konumland\u0131rmak","text":"<p>\ud83d\udd34 Yanl\u0131\u015f Kullan\u0131m: Mock nesnelerini metod seviyesinde olu\u015fturmak kod karma\u015f\u0131kl\u0131\u011f\u0131n\u0131 art\u0131r\u0131r.</p> <pre><code>[Fact]\npublic void Report_ShouldReturnWeather()\n{\n    var mockWeatherService = new Mock&lt;IWeatherService&gt;(); // Mock burada olu\u015fturulmu\u015f\n    mockWeatherService.Setup(service =&gt; service.GetWeather()).Returns(\"G\u00fcne\u015fli\");\n\n    var reporter = new WeatherReporter(mockWeatherService.Object);\n    var result = reporter.Report();\n\n    Assert.Equal(\"G\u00fcne\u015fli\", result);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Mock nesnelerini s\u0131n\u0131f seviyesinde yap\u0131land\u0131r\u0131n.</p> <pre><code>public class WeatherReporterTests\n{\n    private readonly Mock&lt;IWeatherService&gt; _mockWeatherService;\n    private readonly WeatherReporter _reporter;\n\n    public WeatherReporterTests()\n    {\n        _mockWeatherService = new Mock&lt;IWeatherService&gt;();\n        _reporter = new WeatherReporter(_mockWeatherService.Object);\n    }\n\n    [Fact]\n    public void Report_ShouldReturnWeather()\n    {\n        _mockWeatherService.Setup(service =&gt; service.GetWeather()).Returns(\"G\u00fcne\u015fli\");\n        var result = _reporter.Report();\n        Assert.Equal(\"G\u00fcne\u015fli\", result);\n    }\n}\n</code></pre>"},{"location":"entity-framework/bulk-operations/","title":"Bulk Operations","text":"<p>Entity Framework Core, veritaban\u0131 i\u015flemleri i\u00e7in g\u00fc\u00e7l\u00fc bir ara\u00e7t\u0131r ancak b\u00fcy\u00fck veri k\u00fcmelerinde tek tek i\u015flem yapmak yava\u015f ve maliyetli olabilir. Bulk operations, performans\u0131 art\u0131rmak ve i\u015flem s\u00fcrelerini azaltmak i\u00e7in etkili bir y\u00f6ntemdir. Ancak, yanl\u0131\u015f kullan\u0131m\u0131 veri tutars\u0131zl\u0131klar\u0131na ve performans sorunlar\u0131na neden olabilir.</p>"},{"location":"entity-framework/bulk-operations/#1-tek-tek-islem-yaparak-performans-dusurmek","title":"1. Tek Tek \u0130\u015flem Yaparak Performans\u0131 D\u00fc\u015f\u00fcrmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri k\u00fcmelerinde tek tek i\u015flem yapmak.</p> <pre><code>foreach (var user in users)\n{\n    user.IsActive = true;\n    context.Users.Update(user);\n    context.SaveChanges();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Bulk update ile t\u00fcm verileri tek bir i\u015flemde g\u00fcncelleyin.</p> <pre><code>context.Users\n    .Where(u =&gt; !u.IsActive)\n    .ExecuteUpdate(u =&gt; u.SetProperty(x =&gt; x.IsActive, true));\n</code></pre>"},{"location":"entity-framework/bulk-operations/#2-gereksiz-veri-taban-tetikleyicileri-calstrmak","title":"2. Gereksiz Veri Taban\u0131 Tetikleyicileri \u00c7al\u0131\u015ft\u0131rmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Bulk i\u015flemleri tetikleyicilerle birle\u015ftirmek.</p> <pre><code>foreach (var product in products)\n{\n    product.StockCount += 10;\n    context.Products.Update(product);\n    context.SaveChanges(); // Her i\u015flemde tetikleyici \u00e7al\u0131\u015f\u0131r\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Bulk i\u015flemler tetikleyicilerden ba\u011f\u0131ms\u0131z olarak y\u00fcr\u00fct\u00fclmelidir.</p> <pre><code>context.Products\n    .Where(p =&gt; p.StockCount &gt; 0)\n    .ExecuteUpdate(p =&gt; p.SetProperty(x =&gt; x.StockCount, x =&gt; x.StockCount + 10));\n</code></pre>"},{"location":"entity-framework/bulk-operations/#3-gereksiz-buyuk-veri-setlerini-bellege-yuklemek","title":"3. Gereksiz B\u00fcy\u00fck Veri Setlerini Belle\u011fe Y\u00fcklemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Verileri \u00f6nce belle\u011fe y\u00fckleyip sonra g\u00fcncellemek.</p> <pre><code>var products = context.Products.ToList();\nforeach (var product in products)\n{\n    product.Price += 5;\n}\ncontext.SaveChanges();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Belle\u011fi verimli kullanarak do\u011frudan veritaban\u0131 \u00fczerinde i\u015flem yap\u0131n.</p> <pre><code>context.Products\n    .Where(p =&gt; p.Price &lt; 100)\n    .ExecuteUpdate(p =&gt; p.SetProperty(x =&gt; x.Price, x =&gt; x.Price + 5));\n</code></pre>"},{"location":"entity-framework/bulk-operations/#4-bulk-delete-islemlerinde-yanls-filtreleme","title":"4. Bulk Delete \u0130\u015flemlerinde Yanl\u0131\u015f Filtreleme","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Yanl\u0131\u015f filtrelerle gereksiz verileri silmek.</p> <pre><code>context.Products.RemoveRange(context.Products.Where(p =&gt; p.IsDiscontinued));\ncontext.SaveChanges();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Bulk delete ile do\u011frudan hedeflenen veriyi kald\u0131r\u0131n.</p> <pre><code>context.Products\n    .Where(p =&gt; p.IsDiscontinued)\n    .ExecuteDelete();\n</code></pre>"},{"location":"entity-framework/bulk-operations/#5-transaction-kullanmn-ihmal-etmek","title":"5. Transaction Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck i\u015flemleri transaction olmadan ger\u00e7ekle\u015ftirmek.</p> <pre><code>context.Products\n    .Where(p =&gt; p.CategoryId == 1)\n    .ExecuteDelete();\ncontext.Users\n    .Where(u =&gt; u.IsInactive)\n    .ExecuteUpdate(u =&gt; u.SetProperty(x =&gt; x.IsInactive, false));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: T\u00fcm i\u015flemleri bir transaction i\u00e7inde y\u00fcr\u00fct\u00fcn.</p> <pre><code>using var transaction = context.Database.BeginTransaction();\ncontext.Products\n    .Where(p =&gt; p.CategoryId == 1)\n    .ExecuteDelete();\ncontext.Users\n    .Where(u =&gt; u.IsInactive)\n    .ExecuteUpdate(u =&gt; u.SetProperty(x =&gt; x.IsInactive, false));\ntransaction.Commit();\n</code></pre>"},{"location":"entity-framework/bulk-operations/#6-performans-optimizasyonu-icin-ds-kutuphaneleri-goz-ard-etmek","title":"6. Performans Optimizasyonu \u0130\u00e7in D\u0131\u015f K\u00fct\u00fcphaneleri G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Performans i\u00e7in yaln\u0131zca Entity Framework y\u00f6ntemlerine g\u00fcvenmek.</p> <pre><code>context.BulkInsert(data); // EF'nin dahili y\u00f6ntemleri\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Performans\u0131 art\u0131rmak i\u00e7in ek k\u00fct\u00fcphanelerden yararlan\u0131n.</p> <pre><code>context.BulkInsert(data, options =&gt;\n{\n    options.BatchSize = 1000;\n    options.EnableStreaming = true;\n});\n</code></pre>"},{"location":"entity-framework/keyless-entities/","title":"Keyless Entities","text":"<p>Entity Framework Core\u2019da \u201cKeyless Entities\u201d, birincil anahtara ihtiya\u00e7 duymayan ve genellikle yaln\u0131zca okuma ama\u00e7l\u0131 kullan\u0131lan varl\u0131klar\u0131 temsil eder. Bu \u00f6zellik, g\u00f6r\u00fcn\u00fcmler, birincil anahtars\u0131z tablolar veya \u00f6zel SQL sorgular\u0131n\u0131 haritalamak gibi durumlarda olduk\u00e7a faydal\u0131d\u0131r. Ancak, yanl\u0131\u015f kullan\u0131m\u0131 performans ve veri tutarl\u0131l\u0131\u011f\u0131 sorunlar\u0131na neden olabilir.</p>"},{"location":"entity-framework/keyless-entities/#1-keyless-entities-kullanmn-yanls-anlamak","title":"1. Keyless Entities Kullan\u0131m\u0131n\u0131 Yanl\u0131\u015f Anlamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Keyless entities\u2019i de\u011fi\u015fiklik takibi (change tracking) i\u00e7in kullanmak.</p> <pre><code>[Keyless]\npublic class Report\n{\n    public int Id { get; set; } // Yanl\u0131\u015f: Keyless entity'de birincil anahtar olmamal\u0131d\u0131r.\n    public string ReportName { get; set; }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Keyless entities yaln\u0131zca okuma ama\u00e7l\u0131 kullan\u0131lmal\u0131d\u0131r.</p> <pre><code>[Keyless]\npublic class Report\n{\n    public string ReportName { get; set; }\n    public DateTime GeneratedOn { get; set; }\n}\n</code></pre>"},{"location":"entity-framework/keyless-entities/#2-gereksiz-degisiklik-takibi-yapmak","title":"2. Gereksiz De\u011fi\u015fiklik Takibi Yapmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Keyless entities ile veri g\u00fcncellemeye \u00e7al\u0131\u015fmak.</p> <pre><code>var report = new Report { ReportName = \"Annual Report\" };\ncontext.Reports.Add(report); // Hata: Keyless entities eklenemez\ncontext.SaveChanges();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Keyless entities yaln\u0131zca sorgulama amac\u0131yla kullan\u0131lmal\u0131d\u0131r.</p> <pre><code>var reports = context.Reports\n    .Where(r =&gt; r.GeneratedOn &gt; DateTime.UtcNow.AddDays(-30))\n    .ToList();\n</code></pre>"},{"location":"entity-framework/keyless-entities/#3-keyless-entitiesi-varsaylan-sekilde-kullanmak","title":"3. Keyless Entities\u2019i Varsay\u0131lan \u015eekilde Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Keyless entities\u2019i tan\u0131mlarken gerekli yap\u0131land\u0131rmalar\u0131 yapmamak.</p> <pre><code>public class Report\n{\n    public string ReportName { get; set; }\n    public DateTime GeneratedOn { get; set; }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>[Keyless]</code> veya <code>.HasNoKey()</code> ile a\u00e7\u0131k\u00e7a yap\u0131land\u0131rma yap\u0131lmal\u0131d\u0131r.</p> <pre><code>[Keyless]\npublic class Report\n{\n    public string ReportName { get; set; }\n    public DateTime GeneratedOn { get; set; }\n}\n</code></pre> <p>Veya Fluent API kullanarak:</p> <pre><code>modelBuilder.Entity&lt;Report&gt;().HasNoKey();\n</code></pre>"},{"location":"entity-framework/keyless-entities/#4-performans-optimizasyonunu-goz-ard-etmek","title":"4. Performans Optimizasyonunu G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri setlerini sorgularken keyless entities i\u00e7in optimize edilmemi\u015f sorgular yazmak.</p> <pre><code>var reports = context.Reports.ToList(); // T\u00fcm veri setini y\u00fckler\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sorgular\u0131 filtreleyerek optimize edin.</p> <pre><code>var recentReports = context.Reports\n    .Where(r =&gt; r.GeneratedOn &gt; DateTime.UtcNow.AddMonths(-1))\n    .ToList();\n</code></pre>"},{"location":"entity-framework/keyless-entities/#5-veri-tutarllgn-goz-ard-etmek","title":"5. Veri Tutarl\u0131l\u0131\u011f\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Keyless entities\u2019i ili\u015fkisel verilerle hatal\u0131 bir \u015fekilde kullanmak.</p> <pre><code>public class OrderSummary\n{\n    public int OrderId { get; set; }\n    public decimal Total { get; set; }\n    public string CustomerName { get; set; }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Keyless entities\u2019deki veriler yaln\u0131zca okunabilir olmal\u0131d\u0131r.</p> <pre><code>[Keyless]\npublic class OrderSummary\n{\n    public decimal Total { get; set; }\n    public string CustomerName { get; set; }\n}\n</code></pre>"},{"location":"entity-framework/raw-sql-queries/","title":"Raw SQL Queries","text":"<p>Entity Framework Core, veritaban\u0131 ile ileti\u015fim kurmak i\u00e7in LINQ tabanl\u0131 sorgular sunar. Ancak, baz\u0131 durumlarda ham SQL sorgular\u0131n\u0131 kullanmak gerekebilir. Ham SQL sorgular\u0131, y\u00fcksek performans ve esneklik sa\u011flasa da, yanl\u0131\u015f kullan\u0131mlar\u0131 g\u00fcvenlik a\u00e7\u0131klar\u0131na ve performans sorunlar\u0131na yol a\u00e7abilir.</p>"},{"location":"entity-framework/raw-sql-queries/#1-sql-injection-riski","title":"1. SQL Injection Riski","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Dinamik olarak olu\u015fturulan SQL ifadeleri.</p> <pre><code>var username = \"admin\";\nvar password = \"password123\";\nvar query = $\"SELECT * FROM Users WHERE Username = '{username}' AND Password = '{password}'\";\nvar users = context.Users.FromSqlRaw(query).ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Parametreli sorgular kullanarak SQL Injection riskini \u00f6nleyin.</p> <pre><code>var username = \"admin\";\nvar password = \"password123\";\nvar users = context.Users\n    .FromSqlInterpolated($\"SELECT * FROM Users WHERE Username = {username} AND Password = {password}\")\n    .ToList();\n</code></pre>"},{"location":"entity-framework/raw-sql-queries/#2-performans-goz-ard-etmek","title":"2. Performans\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz b\u00fcy\u00fck veri setlerini y\u00fcklemek.</p> <pre><code>var products = context.Products.FromSqlRaw(\"SELECT * FROM Products\").ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sorguyu filtreleyerek yaln\u0131zca gerekli verileri y\u00fckleyin.</p> <pre><code>var products = context.Products\n    .FromSqlRaw(\"SELECT * FROM Products WHERE IsActive = 1\")\n    .ToList();\n</code></pre>"},{"location":"entity-framework/raw-sql-queries/#3-ham-sql-sorgularn-test-edilebilir-hale-getirmemek","title":"3. Ham SQL Sorgular\u0131n\u0131 Test Edilebilir Hale Getirmemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ham SQL sorgular\u0131n\u0131 test edilebilirlikten yoksun b\u0131rakmak.</p> <pre><code>var orders = context.Orders.FromSqlRaw(\"SELECT * FROM Orders WHERE OrderDate &gt; GETDATE()\").ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: SQL sorgular\u0131n\u0131 metodlara ta\u015f\u0131yarak test edilebilir hale getirin.</p> <pre><code>public IEnumerable&lt;Order&gt; GetRecentOrders(DateTime sinceDate)\n{\n    return context.Orders\n        .FromSqlInterpolated($\"SELECT * FROM Orders WHERE OrderDate &gt; {sinceDate}\")\n        .ToList();\n}\n</code></pre>"},{"location":"entity-framework/raw-sql-queries/#4-guvenilir-kaynaklardan-gelen-sql-kullanm","title":"4. G\u00fcvenilir Kaynaklardan Gelen SQL Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: SQL ifadelerini do\u011frudan kod i\u00e7ine g\u00f6mmek.</p> <pre><code>var results = context.Database.ExecuteSqlRaw(\"DELETE FROM Logs WHERE LogDate &lt; '2023-01-01'\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: SQL ifadelerini merkezi bir yere ta\u015f\u0131y\u0131n veya sakl\u0131 yordamlar\u0131 (stored procedure) kullan\u0131n.</p> <pre><code>var results = context.Database.ExecuteSqlRaw(\"EXEC ClearOldLogs @Date = {0}\", new[] { \"2023-01-01\" });\n</code></pre>"},{"location":"entity-framework/raw-sql-queries/#5-sql-hatalarn-goz-ard-etmek","title":"5. SQL Hatalar\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hata kontrol\u00fc yapmamak.</p> <pre><code>var data = context.Users.FromSqlRaw(\"SELECT * FROM NonExistentTable\").ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: SQL sorgular\u0131n\u0131 hata yakalama mekanizmalar\u0131 ile birlikte kullan\u0131n.</p> <pre><code>try\n{\n    var data = context.Users.FromSqlRaw(\"SELECT * FROM NonExistentTable\").ToList();\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"SQL Error: {ex.Message}\");\n}\n</code></pre>"},{"location":"entity-framework/raw-sql-queries/#6-ham-sql-ve-entity-framework-ozelliklerini-birlikte-kullanamamak","title":"6. Ham SQL ve Entity Framework \u00d6zelliklerini Birlikte Kullanamamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ham SQL sorgular\u0131 ile Entity Framework \u00f6zelliklerini entegre etmemek.</p> <pre><code>var orders = context.Orders.FromSqlRaw(\"SELECT * FROM Orders\").ToList();\nforeach (var order in orders)\n{\n    context.Entry(order).Collection(o =&gt; o.OrderItems).Load();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Ham SQL sorgular\u0131 ile Entity Framework ili\u015fkilerini birle\u015ftirin.</p> <pre><code>var orders = context.Orders\n    .FromSqlRaw(\"SELECT * FROM Orders\")\n    .Include(o =&gt; o.OrderItems)\n    .ToList();\n</code></pre>"},{"location":"entity-framework/shadow-properties/","title":"Shadow Properties","text":"<p>Shadow properties, Entity Framework Core\u2019da bir entity \u00fczerinde tan\u0131mlanmayan ancak veritaban\u0131nda saklanan \u00f6zelliklerdir. Bu \u00f6zellikler, \u00f6zellikle geni\u015fletilebilirlik ve esneklik sa\u011flasa da, yanl\u0131\u015f kullan\u0131mlar\u0131 veri tutars\u0131zl\u0131klar\u0131na ve kod karma\u015f\u0131kl\u0131\u011f\u0131na yol a\u00e7abilir.</p>"},{"location":"entity-framework/shadow-properties/#1-shadow-propertiesi-gereksiz-kullanmak","title":"1. Shadow Properties\u2019i Gereksiz Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Entity s\u0131n\u0131f\u0131nda tan\u0131mlanabilecek bir \u00f6zelli\u011fi shadow property olarak kullanmak.</p> <pre><code>modelBuilder.Entity&lt;Product&gt;()\n    .Property&lt;DateTime&gt;(\"LastUpdated\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gereksiz shadow property kullan\u0131m\u0131ndan ka\u00e7\u0131n\u0131n ve entity s\u0131n\u0131f\u0131na ekleyin.</p> <pre><code>public class Product\n{\n    public int Id { get; set; }\n    public DateTime LastUpdated { get; set; }\n}\n</code></pre>"},{"location":"entity-framework/shadow-properties/#2-shadow-propertiesin-degerlerini-yanls-yonetmek","title":"2. Shadow Properties\u2019in De\u011ferlerini Yanl\u0131\u015f Y\u00f6netmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Shadow property de\u011ferini kontrol etmeden kullanmak.</p> <pre><code>var lastUpdated = context.Entry(product).Property(\"LastUpdated\").CurrentValue;\nConsole.WriteLine(lastUpdated);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Shadow property de\u011ferlerini g\u00fcvenli bir \u015fekilde y\u00f6netin.</p> <pre><code>var lastUpdatedProperty = context.Entry(product).Property(\"LastUpdated\");\nif (lastUpdatedProperty != null)\n{\n    Console.WriteLine(lastUpdatedProperty.CurrentValue);\n}\nelse\n{\n    Console.WriteLine(\"LastUpdated \u00f6zelli\u011fi mevcut de\u011fil.\");\n}\n</code></pre>"},{"location":"entity-framework/shadow-properties/#3-veri-tutarllgn-goz-ard-etmek","title":"3. Veri Tutarl\u0131l\u0131\u011f\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Shadow property de\u011ferlerini g\u00fcncellemeden b\u0131rakmak.</p> <pre><code>var product = context.Products.Find(1);\ncontext.Entry(product).Property(\"LastUpdated\").CurrentValue = null; // De\u011fer tutars\u0131zl\u0131\u011f\u0131 yarat\u0131r\ncontext.SaveChanges();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Shadow property de\u011ferlerini her i\u015flemde uygun \u015fekilde g\u00fcncelleyin.</p> <pre><code>var product = context.Products.Find(1);\ncontext.Entry(product).Property(\"LastUpdated\").CurrentValue = DateTime.UtcNow;\ncontext.SaveChanges();\n</code></pre>"},{"location":"entity-framework/shadow-properties/#4-shadow-propertiesi-hata-ayklama-surecinde-goz-ard-etmek","title":"4. Shadow Properties\u2019i Hata Ay\u0131klama S\u00fcrecinde G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Shadow property\u2019lerin hata ay\u0131klama s\u0131ras\u0131nda g\u00f6r\u00fcn\u00fcrl\u00fc\u011f\u00fcn\u00fc sa\u011flamamak.</p> <pre><code>var product = context.Products.Find(1);\n// Shadow property de\u011ferlerini incelemeden ge\u00e7mek\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hata ay\u0131klama s\u0131ras\u0131nda shadow property\u2019lerin de\u011ferlerini kontrol edin.</p> <pre><code>var product = context.Products.Find(1);\nvar lastUpdated = context.Entry(product).Property(\"LastUpdated\").CurrentValue;\nConsole.WriteLine($\"LastUpdated: {lastUpdated}\");\n</code></pre>"},{"location":"entity-framework/shadow-properties/#5-shadow-properties-ile-yanls-iliskiler-kurmak","title":"5. Shadow Properties ile Yanl\u0131\u015f \u0130li\u015fkiler Kurmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Shadow property\u2019leri ili\u015fkilerde do\u011frudan kullanmak.</p> <pre><code>modelBuilder.Entity&lt;Order&gt;()\n    .HasOne&lt;Product&gt;()\n    .WithMany()\n    .HasForeignKey(\"ProductId\");\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Shadow property yerine a\u00e7\u0131k\u00e7a tan\u0131mlanm\u0131\u015f ili\u015fkiler kullan\u0131n.</p> <pre><code>public class Order\n{\n    public int Id { get; set; }\n    public int ProductId { get; set; }\n    public Product Product { get; set; }\n}\n</code></pre>"},{"location":"entity-framework/splited-query/","title":"Split Query","text":"<p>Entity Framework Core\u2019da Split Query, karma\u015f\u0131k sorgular\u0131 birden \u00e7ok SQL sorgusuna b\u00f6lerek performans iyile\u015ftirmesi yapar. Bu \u00f6zellik, \u00f6zellikle b\u00fcy\u00fck veri k\u00fcmelerinde veritaban\u0131 i\u015flemlerini optimize etmek i\u00e7in kullan\u0131l\u0131r. Ancak, yanl\u0131\u015f kullan\u0131m\u0131 hem performans hem de veri tutarl\u0131l\u0131\u011f\u0131 sorunlar\u0131na yol a\u00e7abilir.</p>"},{"location":"entity-framework/splited-query/#1-split-queryyi-gereksiz-kullanmak","title":"1. Split Query\u2019yi Gereksiz Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Split Query\u2019yi k\u00fc\u00e7\u00fck veri setlerinde kullanmak.</p> <pre><code>var users = context.Users\n    .Include(u =&gt; u.Orders)\n    .AsSplitQuery()\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Split Query\u2019yi yaln\u0131zca b\u00fcy\u00fck veri k\u00fcmeleri i\u00e7in kullan\u0131n.</p> <pre><code>var users = context.Users\n    .Include(u =&gt; u.Orders)\n    .AsSplitQuery()\n    .Where(u =&gt; u.IsActive)\n    .ToList();\n</code></pre>"},{"location":"entity-framework/splited-query/#2-performans-avantajlarn-goz-ard-etmek","title":"2. Performans Avantajlar\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Split Query kullanmadan b\u00fcy\u00fck veri setlerini tek bir sorguda y\u00fcklemek.</p> <pre><code>var orders = context.Orders\n    .Include(o =&gt; o.Customer)\n    .Include(o =&gt; o.Products)\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: B\u00fcy\u00fck veri setlerini Split Query ile b\u00f6lerek i\u015fleyin.</p> <pre><code>var orders = context.Orders\n    .Include(o =&gt; o.Customer)\n    .Include(o =&gt; o.Products)\n    .AsSplitQuery()\n    .ToList();\n</code></pre>"},{"location":"entity-framework/splited-query/#3-split-query-ve-track-degisikliklerini-yanls-yonetmek","title":"3. Split Query ve Track De\u011fi\u015fikliklerini Yanl\u0131\u015f Y\u00f6netmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Split Query kullan\u0131rken veritaban\u0131 de\u011fi\u015fikliklerini yanl\u0131\u015f anlamak.</p> <pre><code>var customers = context.Customers\n    .Include(c =&gt; c.Orders)\n    .AsSplitQuery()\n    .ToList();\n\ncustomers[0].Name = \"Updated Name\";\ncontext.SaveChanges(); // Beklenmeyen sonu\u00e7lar\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Split Query\u2019nin salt okunur i\u015flemler i\u00e7in daha uygun oldu\u011funu unutmay\u0131n.</p> <pre><code>var customers = context.Customers\n    .Include(c =&gt; c.Orders)\n    .AsSplitQuery()\n    .ToList();\n\n// De\u011fi\u015fiklik yapmak yerine yeni bir i\u015flem ba\u015flat\u0131n.\nvar customerToUpdate = customers.First();\ncustomerToUpdate.Name = \"Updated Name\";\ncontext.Update(customerToUpdate);\ncontext.SaveChanges();\n</code></pre>"},{"location":"entity-framework/splited-query/#4-split-queryyi-tum-sorgular-icin-varsaylan-yapmak","title":"4. Split Query\u2019yi T\u00fcm Sorgular \u0130\u00e7in Varsay\u0131lan Yapmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm sorgularda Split Query kullanarak gereksiz sorgular olu\u015fturmak.</p> <pre><code>optionsBuilder.UseSqlServer(connectionString, b =&gt; b.UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Split Query\u2019yi yaln\u0131zca belirli sorgular i\u00e7in kullan\u0131n.</p> <pre><code>var data = context.Data\n    .Include(d =&gt; d.RelatedData)\n    .AsSplitQuery()\n    .ToList();\n</code></pre>"},{"location":"entity-framework/splited-query/#5-veri-tutarllgn-goz-ard-etmek","title":"5. Veri Tutarl\u0131l\u0131\u011f\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Split Query ile veri tutarl\u0131l\u0131\u011f\u0131 sorunlar\u0131na neden olmak.</p> <pre><code>var orders = context.Orders\n    .Include(o =&gt; o.Products)\n    .AsSplitQuery()\n    .ToList();\n\n// Di\u011fer i\u015flemler s\u0131ras\u0131nda veri de\u011fi\u015febilir.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Veri tutarl\u0131l\u0131\u011f\u0131 kritikse Split Query yerine tek sorgu kullan\u0131n.</p> <pre><code>var orders = context.Orders\n    .Include(o =&gt; o.Products)\n    .ToList();\n</code></pre>"},{"location":"entity-framework/tag-with/","title":"Tag With","text":"<p>Entity Framework Core\u2019da <code>TagWith</code>, SQL sorgular\u0131na yorumlar eklemek i\u00e7in kullan\u0131lan bir \u00f6zelliktir. Bu yorumlar, sorgu performans\u0131 ve hata ay\u0131klama s\u00fcre\u00e7lerinde \u00f6nemli bir yard\u0131mc\u0131d\u0131r. Ancak, yanl\u0131\u015f kullan\u0131m\u0131 sorgu karma\u015f\u0131kl\u0131\u011f\u0131n\u0131 art\u0131rabilir ve gereksiz kaynak t\u00fcketimine neden olabilir.</p>"},{"location":"entity-framework/tag-with/#1-tagwithi-gereksiz-kullanmak","title":"1. TagWith\u2019i Gereksiz Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her sorguya gereksiz a\u00e7\u0131klamalar eklemek.</p> <pre><code>var users = context.Users\n    .TagWith(\"Fetching all users\")\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sadece performans analizi ve hata ay\u0131klama i\u00e7in kritik sorgulara a\u00e7\u0131klama ekleyin.</p> <pre><code>var activeUsers = context.Users\n    .Where(u =&gt; u.IsActive)\n    .TagWith(\"Fetching active users for monthly report\")\n    .ToList();\n</code></pre>"},{"location":"entity-framework/tag-with/#2-acklamalar-yetersiz-veya-anlamsz-yapmak","title":"2. A\u00e7\u0131klamalar\u0131 Yetersiz veya Anlams\u0131z Yapmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: A\u00e7\u0131klamalar\u0131 k\u0131sa ve yetersiz b\u0131rakmak.</p> <pre><code>var orders = context.Orders\n    .TagWith(\"Orders query\")\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: A\u00e7\u0131klamalara sorgunun amac\u0131 ve ba\u011flam\u0131 hakk\u0131nda bilgi ekleyin.</p> <pre><code>var recentOrders = context.Orders\n    .Where(o =&gt; o.OrderDate &gt; DateTime.UtcNow.AddDays(-30))\n    .TagWith(\"Fetching orders placed in the last 30 days for sales report\")\n    .ToList();\n</code></pre>"},{"location":"entity-framework/tag-with/#3-birden-fazla-tagwith-kullanmak","title":"3. Birden Fazla TagWith Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ayn\u0131 sorguda birden fazla <code>TagWith</code> \u00e7a\u011fr\u0131s\u0131 yapmak.</p> <pre><code>var data = context.Products\n    .TagWith(\"Fetching products\")\n    .TagWith(\"For inventory report\")\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Tek bir <code>TagWith</code> \u00e7a\u011fr\u0131s\u0131nda a\u00e7\u0131klamalar\u0131 birle\u015ftirin.</p> <pre><code>var data = context.Products\n    .TagWith(\"Fetching products for inventory report\")\n    .ToList();\n</code></pre>"},{"location":"entity-framework/tag-with/#4-hata-ayklama-surecini-goz-ard-etmek","title":"4. Hata Ay\u0131klama S\u00fcrecini G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hata ay\u0131klama s\u0131ras\u0131nda <code>TagWith</code> \u00f6zelli\u011fini kullanmamak.</p> <pre><code>var query = context.Customers\n    .Where(c =&gt; c.IsActive)\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Hata ay\u0131klama s\u0131ras\u0131nda sorgulara a\u00e7\u0131klama ekleyerek loglar\u0131 daha anlaml\u0131 hale getirin.</p> <pre><code>var query = context.Customers\n    .Where(c =&gt; c.IsActive)\n    .TagWith(\"Fetching active customers for debugging\")\n    .ToList();\n</code></pre>"},{"location":"entity-framework/tag-with/#5-acklamalarda-dinamik-veri-kullanmak","title":"5. A\u00e7\u0131klamalarda Dinamik Veri Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: A\u00e7\u0131klamalarda dinamik veri kullanarak sorgu performans\u0131n\u0131 olumsuz etkilemek.</p> <pre><code>var productId = 123;\nvar product = context.Products\n    .Where(p =&gt; p.Id == productId)\n    .TagWith($\"Fetching product with ID: {productId}\")\n    .FirstOrDefault();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Dinamik verileri a\u00e7\u0131klamalarda kullanmaktan ka\u00e7\u0131n\u0131n.</p> <pre><code>var product = context.Products\n    .Where(p =&gt; p.Id == 123)\n    .TagWith(\"Fetching specific product by ID\")\n    .FirstOrDefault();\n</code></pre>"},{"location":"entity-framework/temporal-tables/","title":"Temporal Tables","text":"<p>Temporal tables, veritaban\u0131 tablolar\u0131ndaki de\u011fi\u015fikliklerin ge\u00e7mi\u015fini tutarak veri versiyonlamas\u0131n\u0131 m\u00fcmk\u00fcn k\u0131lar. Bu \u00f6zellik, hata ay\u0131klama, veri analiti\u011fi ve yasal gereksinimler i\u00e7in olduk\u00e7a faydal\u0131d\u0131r. Ancak, yanl\u0131\u015f kullan\u0131mlar\u0131 depolama ve performans sorunlar\u0131na neden olabilir.</p>"},{"location":"entity-framework/temporal-tables/#1-temporal-tables-gereksiz-kullanmak","title":"1. Temporal Tables\u2019\u0131 Gereksiz Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Ge\u00e7mi\u015f verileri gerektirmeyen tablolar i\u00e7in temporal tables kullanmak.</p> <pre><code>CREATE TABLE Products\n(\n    ProductId INT PRIMARY KEY,\n    Name NVARCHAR(100),\n    Price DECIMAL(10, 2),\n    SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START,\n    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END,\n    PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime)\n) WITH (SYSTEM_VERSIONING = ON);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sadece ge\u00e7mi\u015f verilerin kritik oldu\u011fu tablolar i\u00e7in temporal tables etkinle\u015ftirin.</p> <pre><code>CREATE TABLE Orders\n(\n    OrderId INT PRIMARY KEY,\n    CustomerId INT,\n    OrderDate DATETIME2,\n    SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START,\n    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END,\n    PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime)\n) WITH (SYSTEM_VERSIONING = ON);\n</code></pre>"},{"location":"entity-framework/temporal-tables/#2-temporal-table-veri-yonetimini-goz-ard-etmek","title":"2. Temporal Table Veri Y\u00f6netimini G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Temporal tables verilerini otomatik olarak temizlememek.</p> <pre><code>-- T\u00fcm ge\u00e7mi\u015f veriler sonsuza kadar saklan\u0131r\nSELECT * FROM Orders FOR SYSTEM_TIME ALL;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Veritaban\u0131 boyutunu y\u00f6netmek i\u00e7in ge\u00e7mi\u015f verileri temizleyin.</p> <pre><code>ALTER DATABASE [YourDatabase] SET TEMPORAL_HISTORY_RETENTION_PERIOD = 6 MONTHS;\n</code></pre>"},{"location":"entity-framework/temporal-tables/#3-yanls-sorgu-yazm","title":"3. Yanl\u0131\u015f Sorgu Yaz\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Temporal tables i\u00e7in standart sorgular\u0131 kullanmak.</p> <pre><code>SELECT * FROM Orders WHERE OrderDate = '2023-01-01';\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Temporal tables sorgular\u0131nda ge\u00e7mi\u015f verileri a\u00e7\u0131k\u00e7a belirtin.</p> <pre><code>SELECT * FROM Orders\nFOR SYSTEM_TIME AS OF '2023-01-01T00:00:00';\n</code></pre>"},{"location":"entity-framework/temporal-tables/#4-temporal-tables-ile-yanls-iliskiler-kurmak","title":"4. Temporal Tables ile Yanl\u0131\u015f \u0130li\u015fkiler Kurmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Temporal table i\u00e7eren tablolar\u0131 yanl\u0131\u015f ili\u015fkilerle ba\u011flamak.</p> <pre><code>CREATE TABLE OrderDetails\n(\n    OrderDetailId INT PRIMARY KEY,\n    OrderId INT,\n    ProductId INT\n);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130li\u015fkileri temporal table\u2019lara uygun \u015fekilde tasarlay\u0131n.</p> <pre><code>CREATE TABLE OrderDetails\n(\n    OrderDetailId INT PRIMARY KEY,\n    OrderId INT,\n    ProductId INT,\n    SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START,\n    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END,\n    PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime)\n) WITH (SYSTEM_VERSIONING = ON);\n</code></pre>"},{"location":"entity-framework/temporal-tables/#5-hata-ayklama-ve-analiz-icin-temporal-tables-kullanmamak","title":"5. Hata Ay\u0131klama ve Analiz \u0130\u00e7in Temporal Tables\u2019\u0131 Kullanmamak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Temporal tables\u2019\u0131 hata ay\u0131klama veya veri analiti\u011fi i\u00e7in kullanmamak.</p> <pre><code>-- Ge\u00e7mi\u015f veriler sorgulanm\u0131yor\nSELECT * FROM Orders WHERE OrderId = 101;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Temporal tables\u2019\u0131 ge\u00e7mi\u015f verileri analiz etmek i\u00e7in etkin kullan\u0131n.</p> <pre><code>SELECT * FROM Orders\nFOR SYSTEM_TIME BETWEEN '2023-01-01T00:00:00' AND '2023-01-31T23:59:59';\n</code></pre>"},{"location":"entity-framework/temporal-tables/#6-performans-ve-depolama-maliyetlerini-goz-ard-etmek","title":"6. Performans ve Depolama Maliyetlerini G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Temporal tables veritaban\u0131 boyutunu y\u00f6netmemek.</p> <pre><code>-- T\u00fcm ge\u00e7mi\u015f veriler s\u00fcrekli saklan\u0131r\nSELECT * FROM Orders FOR SYSTEM_TIME ALL;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Performans\u0131 optimize etmek i\u00e7in indeksler ve ar\u015fivleme kullan\u0131n.</p> <pre><code>CREATE INDEX IX_Orders_SysStartTime ON Orders (SysStartTime);\n</code></pre>"},{"location":"entity-framework/value-conversions/","title":"Value Conversions","text":"<p>Entity Framework Core\u2019da Value Conversions, bir entity property\u2019sinin veritaban\u0131nda farkl\u0131 bir formatta saklanmas\u0131n\u0131 sa\u011flar. Bu \u00f6zellik, \u00f6zel veri t\u00fcrlerini desteklemek ve esneklik sa\u011flamak i\u00e7in olduk\u00e7a kullan\u0131\u015fl\u0131d\u0131r. Ancak, yanl\u0131\u015f kullan\u0131m\u0131 veri kay\u0131plar\u0131na ve performans sorunlar\u0131na neden olabilir.</p>"},{"location":"entity-framework/value-conversions/#1-gereksiz-value-converter-kullanm","title":"1. Gereksiz Value Converter Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Basit t\u00fcrler i\u00e7in gereksiz Value Converter tan\u0131mlamak.</p> <pre><code>modelBuilder.Entity&lt;Product&gt;()\n    .Property(p =&gt; p.Price)\n    .HasConversion(\n        v =&gt; v.ToString(),\n        v =&gt; decimal.Parse(v));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Value Converter\u2019\u0131 yaln\u0131zca gerekti\u011finde tan\u0131mlay\u0131n.</p> <pre><code>public class Product\n{\n    public decimal Price { get; set; }\n}\n</code></pre>"},{"location":"entity-framework/value-conversions/#2-veri-kayplarn-goz-ard-etmek","title":"2. Veri Kay\u0131plar\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: D\u00f6n\u00fc\u015f\u00fcm s\u0131ras\u0131nda veri kayb\u0131n\u0131 g\u00f6z ard\u0131 etmek.</p> <pre><code>modelBuilder.Entity&lt;Product&gt;()\n    .Property(p =&gt; p.Rating)\n    .HasConversion(\n        v =&gt; (int)v,  // Veri kayb\u0131 riski\n        v =&gt; (double)v);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: D\u00f6n\u00fc\u015f\u00fcm\u00fcn veri b\u00fct\u00fcnl\u00fc\u011f\u00fcn\u00fc koruyacak \u015fekilde yap\u0131lmas\u0131.</p> <pre><code>modelBuilder.Entity&lt;Product&gt;()\n    .Property(p =&gt; p.Rating)\n    .HasConversion(\n        v =&gt; Math.Round(v, 2),  // Hassasiyet korunur\n        v =&gt; v);\n</code></pre>"},{"location":"entity-framework/value-conversions/#3-karmask-donusumleri-property-duzeyinde-yapmak","title":"3. Karma\u015f\u0131k D\u00f6n\u00fc\u015f\u00fcmleri Property D\u00fczeyinde Yapmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Karma\u015f\u0131k d\u00f6n\u00fc\u015f\u00fcmleri Value Converter i\u00e7inde yapmak.</p> <pre><code>modelBuilder.Entity&lt;User&gt;()\n    .Property(u =&gt; u.Roles)\n    .HasConversion(\n        v =&gt; string.Join(\",\", v),  // Karma\u015f\u0131k d\u00f6n\u00fc\u015f\u00fcm\n        v =&gt; v.Split(','));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Karma\u015f\u0131k d\u00f6n\u00fc\u015f\u00fcmleri ayr\u0131 bir s\u0131n\u0131f veya metotla y\u00f6netmek.</p> <pre><code>public class RoleConverter : ValueConverter&lt;List&lt;string&gt;, string&gt;\n{\n    public RoleConverter()\n        : base(\n            v =&gt; string.Join(\",\", v),\n            v =&gt; v.Split(',').ToList())\n    {\n    }\n}\n\nmodelBuilder.Entity&lt;User&gt;()\n    .Property(u =&gt; u.Roles)\n    .HasConversion(new RoleConverter());\n</code></pre>"},{"location":"entity-framework/value-conversions/#4-tarih-ve-saat-donusumlerinde-yanls-format-kullanm","title":"4. Tarih ve Saat D\u00f6n\u00fc\u015f\u00fcmlerinde Yanl\u0131\u015f Format Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tarih ve saat d\u00f6n\u00fc\u015f\u00fcmlerinde standart format\u0131 kullanmamak.</p> <pre><code>modelBuilder.Entity&lt;Order&gt;()\n    .Property(o =&gt; o.OrderDate)\n    .HasConversion(\n        v =&gt; v.ToString(),\n        v =&gt; DateTime.Parse(v)); // K\u00fclt\u00fcr farklar\u0131 sorun yaratabilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Tarih ve saat d\u00f6n\u00fc\u015f\u00fcmlerinde <code>DateTimeOffset</code> kullanmak.</p> <pre><code>modelBuilder.Entity&lt;Order&gt;()\n    .Property(o =&gt; o.OrderDate)\n    .HasConversion(\n        v =&gt; v.ToString(\"o\"),\n        v =&gt; DateTimeOffset.Parse(v));\n</code></pre>"},{"location":"entity-framework/value-conversions/#5-performans-maliyetlerini-goz-ard-etmek","title":"5. Performans Maliyetlerini G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri k\u00fcmelerinde performans maliyetini g\u00f6z ard\u0131 etmek.</p> <pre><code>modelBuilder.Entity&lt;Log&gt;()\n    .Property(l =&gt; l.Details)\n    .HasConversion(\n        v =&gt; JsonConvert.SerializeObject(v),\n        v =&gt; JsonConvert.DeserializeObject&lt;Dictionary&lt;string, string&gt;&gt;(v)); // Yo\u011fun JSON d\u00f6n\u00fc\u015f\u00fcm\u00fc\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Performans\u0131 optimize eden daha h\u0131zl\u0131 d\u00f6n\u00fc\u015f\u00fcmler kullanmak.</p> <pre><code>modelBuilder.Entity&lt;Log&gt;()\n    .Property(l =&gt; l.Details)\n    .HasConversion(\n        v =&gt; System.Text.Json.JsonSerializer.Serialize(v),\n        v =&gt; System.Text.Json.JsonSerializer.Deserialize&lt;Dictionary&lt;string, string&gt;&gt;(v));\n</code></pre>"},{"location":"entity-framework/value-conversions/#6-test-edilebilirligi-goz-ard-etmek","title":"6. Test Edilebilirli\u011fi G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: D\u00f6n\u00fc\u015f\u00fcm mant\u0131\u011f\u0131n\u0131 test edilebilir hale getirmemek.</p> <pre><code>modelBuilder.Entity&lt;User&gt;()\n    .Property(u =&gt; u.Preferences)\n    .HasConversion(\n        v =&gt; string.Join(\";\", v),\n        v =&gt; v.Split(';').ToList());\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: D\u00f6n\u00fc\u015f\u00fcm mant\u0131\u011f\u0131n\u0131 test edilebilir hale getirmek i\u00e7in ayr\u0131 bir s\u0131n\u0131f kullanmak.</p> <pre><code>public class PreferencesConverter : ValueConverter&lt;List&lt;string&gt;, string&gt;\n{\n    public PreferencesConverter()\n        : base(\n            v =&gt; string.Join(\";\", v),\n            v =&gt; v.Split(';').ToList())\n    {\n    }\n}\n\nmodelBuilder.Entity&lt;User&gt;()\n    .Property(u =&gt; u.Preferences)\n    .HasConversion(new PreferencesConverter());\n</code></pre>"},{"location":"garbage-collector/memory-leak-detection/","title":"Garbage Collector: Bellek S\u0131z\u0131nt\u0131s\u0131 Tespiti","text":"<p>Bellek s\u0131z\u0131nt\u0131lar\u0131, bir uygulaman\u0131n gere\u011finden fazla bellek t\u00fcketmesine ve zamanla performans d\u00fc\u015f\u00fc\u015f\u00fcne neden olabilir. .NET\u2019in Garbage Collector (GC) mekanizmas\u0131 genellikle bellek y\u00f6netimini otomatik olarak yapar, ancak yanl\u0131\u015f referans y\u00f6netimi veya karma\u015f\u0131k nesne ili\u015fkileri bellek s\u0131z\u0131nt\u0131lar\u0131na yol a\u00e7abilir.</p>"},{"location":"garbage-collector/memory-leak-detection/#1-bellek-sznts-nedir","title":"1. Bellek S\u0131z\u0131nt\u0131s\u0131 Nedir?","text":"<p>Bellek s\u0131z\u0131nt\u0131s\u0131, art\u0131k kullan\u0131lmayan ancak Garbage Collector taraf\u0131ndan serbest b\u0131rak\u0131lmayan nesnelerin bellek t\u00fcketmeye devam etmesi durumudur. Bu, genellikle a\u015fa\u011f\u0131daki nedenlerden kaynaklan\u0131r:</p> <ul> <li>Yanl\u0131\u015f Referans Y\u00f6netimi: Gereksiz referanslar\u0131n tutulmas\u0131.</li> <li>Olay (Event) Abonelikleri: <code>event</code> aboneliklerinin iptal edilmemesi.</li> <li>Statik Nesneler: Statik alanlarda gereksiz veri tutulmas\u0131.</li> </ul>"},{"location":"garbage-collector/memory-leak-detection/#2-bellek-sznts-nasl-tespit-edilir","title":"2. Bellek S\u0131z\u0131nt\u0131s\u0131 Nas\u0131l Tespit Edilir?","text":"<p>.NET uygulamalar\u0131nda bellek s\u0131z\u0131nt\u0131lar\u0131n\u0131 tespit etmek i\u00e7in \u015fu ara\u00e7lar\u0131 kullanabilirsiniz:</p>"},{"location":"garbage-collector/memory-leak-detection/#visual-studio-diagnostic-tools","title":"Visual Studio Diagnostic Tools","text":"<ul> <li>Memory Usage: Uygulaman\u0131n bellek kullan\u0131m\u0131n\u0131 izler.</li> <li>Heap Snapshots: Anl\u0131k bellek durumlar\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131r.</li> </ul>"},{"location":"garbage-collector/memory-leak-detection/#net-cli-tools","title":".NET CLI Tools","text":"<ul> <li>dotnet-dump: Bellek d\u00f6k\u00fcmleri olu\u015fturur ve analiz eder.</li> <li>dotnet-counters: Ger\u00e7ek zamanl\u0131 bellek \u00f6l\u00e7\u00fcmleri sa\u011flar.</li> </ul> <pre><code>dotnet-dump collect --process-id &lt;pid&gt;\ndotnet-counters monitor --counters Microsoft-Windows-DotNETRuntime:GC/Heap\n</code></pre>"},{"location":"garbage-collector/memory-leak-detection/#3-bellek-sznts-nedenleri-ve-cozumleri","title":"3. Bellek S\u0131z\u0131nt\u0131s\u0131 Nedenleri ve \u00c7\u00f6z\u00fcmleri","text":""},{"location":"garbage-collector/memory-leak-detection/#yanls-referans-yonetimi","title":"Yanl\u0131\u015f Referans Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz referanslar\u0131 temizlememek.</p> <pre><code>static List&lt;byte[]&gt; cache = new();\n\nvoid AddToCache()\n{\n    var data = new byte[1024 * 1024];\n    cache.Add(data); // Referans b\u0131rak\u0131lm\u0131yor\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Referanslar\u0131 zaman\u0131nda serbest b\u0131rakmak.</p> <pre><code>static List&lt;byte[]&gt; cache = new();\n\nvoid ClearCache()\n{\n    cache.Clear(); // Referanslar serbest b\u0131rak\u0131l\u0131r\n}\n</code></pre>"},{"location":"garbage-collector/memory-leak-detection/#event-aboneliklerini-yonetmemek","title":"Event Aboneliklerini Y\u00f6netmemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Olaylara abone olduktan sonra iptal etmemek.</p> <pre><code>button.Click += OnButtonClick; // Abonelik iptal edilmez\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Olay aboneliklerini iptal edin.</p> <pre><code>button.Click -= OnButtonClick; // Abonelik iptal edilir\n</code></pre>"},{"location":"garbage-collector/memory-leak-detection/#statik-alanlarda-veri-tutmak","title":"Statik Alanlarda Veri Tutmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Statik alanlarda b\u00fcy\u00fck nesneleri gereksiz tutmak.</p> <pre><code>static List&lt;int&gt; staticData = new() { 1, 2, 3 };\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Statik alanlar\u0131 dikkatli y\u00f6netin.</p> <pre><code>static WeakReference&lt;List&lt;int&gt;&gt; staticData = new(new List&lt;int&gt; { 1, 2, 3 });\n</code></pre>"},{"location":"garbage-collector/memory-leak-detection/#4-garbage-collector-diagnostik-modu","title":"4. Garbage Collector Diagnostik Modu","text":"<p>.NET 9 ile gelen diagnostik ara\u00e7lar, GC\u2019nin bellek y\u00f6netimini analiz etmeyi kolayla\u015ft\u0131r\u0131r.</p> <pre><code>&lt;configuration&gt;\n  &lt;runtime&gt;\n    &lt;GCHeapHardLimitPercent value=\"80\" /&gt;\n  &lt;/runtime&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"garbage-collector/memory-leak-detection/#5-profiling-ve-izleme","title":"5. Profiling ve \u0130zleme","text":"<ul> <li>JetBrains dotMemory: Derinlemesine bellek analizi.</li> <li>Redgate ANTS Memory Profiler: Haf\u0131za s\u0131z\u0131nt\u0131lar\u0131n\u0131 tespit etmek i\u00e7in kullan\u0131l\u0131r.</li> </ul>"},{"location":"garbage-collector/new-features-v9/","title":"Garbage Collector: .NET 9\u2019daki Yeni \u00d6zellikler","text":"<p>.NET 9, Garbage Collector (GC) \u00fczerinde \u00e7e\u015fitli iyile\u015ftirmeler ve yeni \u00f6zellikler sunarak bellek y\u00f6netimi performans\u0131n\u0131 daha da geli\u015ftirmi\u015ftir. Bu \u00f6zellikler, b\u00fcy\u00fck \u00f6l\u00e7ekli uygulamalarda daha iyi verimlilik ve daha d\u00fc\u015f\u00fck gecikme s\u00fcreleri sa\u011flamay\u0131 ama\u00e7lar.</p>"},{"location":"garbage-collector/new-features-v9/#1-dynamic-pgo-ile-bellek-yonetimi","title":"1. Dynamic PGO ile Bellek Y\u00f6netimi","text":"<p>Dynamic Profile-Guided Optimization (Dynamic PGO), GC\u2019nin \u00e7al\u0131\u015fma zaman\u0131nda uygulaman\u0131z\u0131n davran\u0131\u015f\u0131na g\u00f6re kendisini optimize etmesine olanak tan\u0131r.</p> <p>\u2705 Yararlar\u0131: - Ger\u00e7ek zamanl\u0131 optimizasyon. - Daha iyi bellek tahsisi. - Performans art\u0131\u015f\u0131.</p> <pre><code>// Dynamic PGO'nun otomatik etkin oldu\u011fu bir uygulama \u00f6rne\u011fi\nvoid PerformTask()\n{\n    var data = new List&lt;int&gt;();\n    for (int i = 0; i &lt; 1000; i++)\n    {\n        data.Add(i);\n    }\n    // GC daha verimli tahsis ve toplama yapar.\n}\n</code></pre>"},{"location":"garbage-collector/new-features-v9/#2-loh-large-object-heap-skstrma","title":"2. LOH (Large Object Heap) S\u0131k\u0131\u015ft\u0131rma","text":"<p>.NET 9, Large Object Heap (LOH) i\u00e7in s\u0131k\u0131\u015ft\u0131rma \u00f6zelli\u011fi ekleyerek b\u00fcy\u00fck nesnelerin daha verimli bir \u015fekilde y\u00f6netilmesini sa\u011flar.</p> <p>\u274c \u00d6nceki Davran\u0131\u015f: LOH \u00fczerinde b\u00fcy\u00fck nesneler s\u0131k\u0131\u015ft\u0131r\u0131lmadan b\u0131rak\u0131l\u0131yordu, bu da bellek par\u00e7alanmas\u0131na yol a\u00e7abiliyordu.</p> <p>\u2705 Yeni \u00d6zellik: LOH s\u0131k\u0131\u015ft\u0131rma, bellek par\u00e7alanmas\u0131n\u0131 azalt\u0131r.</p> <pre><code>&lt;configuration&gt;\n  &lt;runtime&gt;\n    &lt;GCLOHCompact enabled=\"true\" /&gt;\n  &lt;/runtime&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"garbage-collector/new-features-v9/#3-gcnin-daha-iyi-thread-yonetimi","title":"3. GC\u2019nin Daha \u0130yi Thread Y\u00f6netimi","text":"<p>.NET 9, Garbage Collector\u2019\u0131n thread y\u00f6netimi algoritmalar\u0131nda geli\u015ftirmeler yapm\u0131\u015ft\u0131r. Bu iyile\u015ftirmeler, \u00f6zellikle \u00e7ok i\u015f par\u00e7ac\u0131kl\u0131 sunucu uygulamalar\u0131nda daha d\u00fc\u015f\u00fck gecikme sa\u011flar.</p> <pre><code>&lt;configuration&gt;\n  &lt;runtime&gt;\n    &lt;gcServer enabled=\"true\" /&gt;\n  &lt;/runtime&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"garbage-collector/new-features-v9/#4-bolgesel-bellek-yonetimi-regional-gc","title":"4. B\u00f6lgesel Bellek Y\u00f6netimi (Regional GC)","text":"<p>.NET 9, GC\u2019nin bellek y\u00f6netimini daha b\u00f6lgesel hale getirerek bellek tahsisini h\u0131zland\u0131r\u0131r ve gecikme s\u00fcrelerini azalt\u0131r.</p> <p>\u2705 Avantajlar: - Daha k\u00fc\u00e7\u00fck bellek bloklar\u0131 \u00fczerinde i\u015flem yapma. - Bellek tahsis s\u00fcresinin azalmas\u0131.</p>"},{"location":"garbage-collector/new-features-v9/#5-daha-iyi-diagnostik-ve-izleme-araclar","title":"5. Daha \u0130yi Diagnostik ve \u0130zleme Ara\u00e7lar\u0131","text":"<p>.NET 9, Garbage Collector performans\u0131n\u0131 izlemek i\u00e7in geli\u015ftirilmi\u015f diagnostik ara\u00e7lar sunar. Bu ara\u00e7lar sayesinde GC\u2019nin nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 daha detayl\u0131 bir \u015fekilde anlayabilirsiniz.</p> <pre><code>dotnet-counters monitor --process-id &lt;pid&gt; --counters Microsoft-Windows-DotNETRuntime:GC/Heap\n</code></pre>"},{"location":"garbage-collector/new-features-v9/#6-gc-performans-modu-secenekleri","title":"6. GC Performans Modu Se\u00e7enekleri","text":"<p>.NET 9, uygulama ihtiya\u00e7lar\u0131na g\u00f6re farkl\u0131 GC modlar\u0131 sunar:</p> <ul> <li>Interactive Mode: Kullan\u0131c\u0131 odakl\u0131 uygulamalar i\u00e7in d\u00fc\u015f\u00fck gecikme sa\u011flar.</li> <li>Batch Mode: Sunucu odakl\u0131 uygulamalarda daha y\u00fcksek throughput i\u00e7in optimize edilmi\u015ftir.</li> </ul> <pre><code>&lt;configuration&gt;\n  &lt;runtime&gt;\n    &lt;GCLatencyMode value=\"Interactive\" /&gt;\n  &lt;/runtime&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"garbage-collector/new-features-v9/#7-gelismis-is-parcacg-optimizasyonu","title":"7. Geli\u015fmi\u015f \u0130\u015f Par\u00e7ac\u0131\u011f\u0131 Optimizasyonu","text":"<p>.NET 9, GC\u2019nin i\u015f par\u00e7ac\u0131klar\u0131n\u0131 daha etkin kullanabilmesi i\u00e7in geli\u015fmi\u015f algoritmalar sunar. Bu, \u00f6zellikle \u00e7ok \u00e7ekirdekli i\u015flemcilerde performans art\u0131\u015f\u0131 sa\u011flar.</p> <pre><code>ThreadPool.SetMinThreads(10, 10);\n</code></pre>"},{"location":"garbage-collector/working-mechanism/","title":"Garbage Collector: \u00c7al\u0131\u015fma Mekanizmas\u0131","text":"<p>Garbage Collector (GC), .NET uygulamalar\u0131nda bellek y\u00f6netimini otomatikle\u015ftiren \u00f6nemli bir bile\u015fendir. GC, kullan\u0131lmayan nesneleri tespit ederek belle\u011fi temizler ve bellek s\u0131z\u0131nt\u0131lar\u0131n\u0131 \u00f6nler. Bu, geli\u015ftiricilerin manuel bellek y\u00f6netimi yapma zorunlulu\u011funu ortadan kald\u0131r\u0131r. Ancak, GC\u2019nin \u00e7al\u0131\u015fma prensiplerini anlamadan yaz\u0131lan kod performans sorunlar\u0131na yol a\u00e7abilir.</p>"},{"location":"garbage-collector/working-mechanism/#1-gcnin-calsma-prensibi","title":"1. GC\u2019nin \u00c7al\u0131\u015fma Prensibi","text":"<p>Garbage Collector, \u00fc\u00e7 temel a\u015famada \u00e7al\u0131\u015f\u0131r:</p> <ol> <li>Marking (\u0130\u015faretleme): Kullan\u0131lan ve kullan\u0131lmayan nesneler belirlenir.</li> <li>Relocating (Yer De\u011fi\u015ftirme): Kullan\u0131lan nesneler bir araya toplan\u0131r.</li> <li>Compacting (S\u0131k\u0131\u015ft\u0131rma): Bellek alan\u0131 yeniden d\u00fczenlenir.</li> </ol> <p>GC, bu i\u015flemleri nesneleri nesil (generation) temelli bir sistemle y\u00f6netir.</p>"},{"location":"garbage-collector/working-mechanism/#2-nesiller-generations","title":"2. Nesiller (Generations)","text":"<p>Garbage Collector, bellek y\u00f6netimini optimize etmek i\u00e7in nesneleri \u00fc\u00e7 farkl\u0131 nesilde y\u00f6netir:</p> <ul> <li>Generation 0: K\u0131sa \u00f6m\u00fcrl\u00fc nesneler (\u00f6rne\u011fin, yerel de\u011fi\u015fkenler) i\u00e7in kullan\u0131l\u0131r.</li> <li>Generation 1: Generation 0\u2019dan terfi eden nesneler.</li> <li>Generation 2: Uzun \u00f6m\u00fcrl\u00fc nesneler (\u00f6rne\u011fin, statik nesneler).</li> </ul> <p>Neden Nesiller? GC, k\u0131sa \u00f6m\u00fcrl\u00fc nesnelerin daha s\u0131k temizlendi\u011fi, uzun \u00f6m\u00fcrl\u00fc nesnelerin daha az s\u0131k temizlendi\u011fi bir strateji kullanarak performans\u0131 art\u0131r\u0131r.</p>"},{"location":"garbage-collector/working-mechanism/#3-gcnin-islem-turleri","title":"3. GC\u2019nin \u0130\u015flem T\u00fcrleri","text":"<p>GC, iki ana modda \u00e7al\u0131\u015fabilir:</p> <ol> <li>Workstation Mode: Tek kullan\u0131c\u0131l\u0131 uygulamalar i\u00e7in optimize edilmi\u015ftir.</li> <li>Server Mode: \u00c7ok i\u015f par\u00e7ac\u0131kl\u0131 ve y\u00fcksek performans gereksinimleri olan uygulamalar i\u00e7in optimize edilmi\u015ftir.</li> </ol>"},{"location":"garbage-collector/working-mechanism/#4-gcnin-performansa-etkisi","title":"4. GC\u2019nin Performansa Etkisi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz b\u00fcy\u00fck nesne tahsisleri.</p> <pre><code>var largeArray = new byte[1024 * 1024 * 100]; // B\u00fcy\u00fck nesneler LOH'yi etkiler\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: B\u00fcy\u00fck nesnelerden ka\u00e7\u0131n\u0131n veya gerekti\u011finde yeniden kullan\u0131n.</p> <pre><code>byte[] buffer = ArrayPool&lt;byte&gt;.Shared.Rent(1024 * 1024);\ntry\n{\n    // Kullan\u0131m\n}\nfinally\n{\n    ArrayPool&lt;byte&gt;.Shared.Return(buffer);\n}\n</code></pre>"},{"location":"garbage-collector/working-mechanism/#5-finalizer-ve-idisposable-kullanm","title":"5. Finalizer ve IDisposable Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Finalizer ile bellek y\u00f6netimi yapmaya \u00e7al\u0131\u015fmak.</p> <pre><code>~MyClass()\n{\n    // Temizleme i\u015flemleri\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: IDisposable aray\u00fcz\u00fcn\u00fc uygulay\u0131n ve <code>using</code> yap\u0131s\u0131n\u0131 kullan\u0131n.</p> <pre><code>public class MyClass : IDisposable\n{\n    public void Dispose()\n    {\n        // Kaynak temizleme\n    }\n}\n\nusing var myObject = new MyClass();\n</code></pre>"},{"location":"garbage-collector/working-mechanism/#6-gccollect-kullanm","title":"6. <code>GC.Collect</code> Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Manuel olarak <code>GC.Collect</code> \u00e7a\u011f\u0131rmak.</p> <pre><code>GC.Collect(); // Performans sorunlar\u0131na neden olabilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: GC\u2019yi otomatik \u00e7al\u0131\u015ft\u0131rmas\u0131na izin verin.</p> <pre><code>// GC'nin \u00e7al\u0131\u015fma zaman\u0131na g\u00fcvenin.\n</code></pre>"},{"location":"garbage-collector/working-mechanism/#7-buyuk-nesne-ygn-loh-yonetimi","title":"7. B\u00fcy\u00fck Nesne Y\u0131\u011f\u0131n\u0131 (LOH) Y\u00f6netimi","text":"<p>B\u00fcy\u00fck nesneler (85 KB\u2019den b\u00fcy\u00fck) Large Object Heap (LOH) \u00fczerinde depolan\u0131r ve GC taraf\u0131ndan s\u0131k\u0131\u015ft\u0131r\u0131lmaz.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz b\u00fcy\u00fck nesneler olu\u015fturmak.</p> <pre><code>var data = new byte[1024 * 1024 * 10]; // LOH \u00fczerinde b\u00fcy\u00fck tahsis\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Daha k\u00fc\u00e7\u00fck par\u00e7alar halinde i\u015flem yap\u0131n.</p> <pre><code>var chunks = new List&lt;byte[]&gt;();\nfor (int i = 0; i &lt; 10; i++)\n{\n    chunks.Add(new byte[1024 * 1024]); // Daha k\u00fc\u00e7\u00fck par\u00e7alara b\u00f6l\u00fcnm\u00fc\u015f nesneler\n}\n</code></pre>"},{"location":"linq/any-all-usage/","title":"LINQ ile Any ve All Kullan\u0131m\u0131","text":"<p><code>Any</code> ve <code>All</code>, LINQ sorgular\u0131nda koleksiyonlar \u00fczerinde belirli bir ko\u015fulu kontrol etmek i\u00e7in kullan\u0131lan iki g\u00fc\u00e7l\u00fc metottur. Do\u011fru kullan\u0131ld\u0131klar\u0131nda performans ve okunabilirlik sa\u011flarlar, ancak yanl\u0131\u015f kullan\u0131mlar\u0131 gereksiz i\u015flemlere neden olabilir.</p>"},{"location":"linq/any-all-usage/#1-any-ve-all-nedir","title":"1. Any ve All Nedir?","text":"<ul> <li>Any: Koleksiyondaki herhangi bir eleman\u0131n bir ko\u015fulu sa\u011flay\u0131p sa\u011flamad\u0131\u011f\u0131n\u0131 kontrol eder.</li> <li>All: Koleksiyondaki t\u00fcm elemanlar\u0131n bir ko\u015fulu sa\u011flay\u0131p sa\u011flamad\u0131\u011f\u0131n\u0131 kontrol eder.</li> </ul> <p>\u00d6rnek Kullan\u0131m:</p> <pre><code>var hasAdults = people.Any(p =&gt; p.Age &gt;= 18); // Herhangi bir ki\u015fi yeti\u015fkin mi?\nvar allAdults = people.All(p =&gt; p.Age &gt;= 18); // T\u00fcm ki\u015filer yeti\u015fkin mi?\n</code></pre>"},{"location":"linq/any-all-usage/#2-yanls-ve-ideal-kullanm","title":"2. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/any-all-usage/#yanls-kullanm-dongu-ile-kontrol","title":"Yanl\u0131\u015f Kullan\u0131m: D\u00f6ng\u00fc ile kontrol","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>bool hasAdults = false;\nforeach (var person in people)\n{\n    if (person.Age &gt;= 18)\n    {\n        hasAdults = true;\n        break;\n    }\n}\n</code></pre> <p>Bu y\u00f6ntem, <code>Any</code> metodu yerine gereksiz bir d\u00f6ng\u00fc kullan\u0131r ve kodun okunabilirli\u011fini d\u00fc\u015f\u00fcr\u00fcr.</p>"},{"location":"linq/any-all-usage/#ideal-kullanm-any-metodu-ile-kontrol","title":"\u0130deal Kullan\u0131m: <code>Any</code> metodu ile kontrol","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>var hasAdults = people.Any(p =&gt; p.Age &gt;= 18);\n</code></pre> <p>Bu y\u00f6ntem, koleksiyonun ilk uygun eleman\u0131n\u0131 buldu\u011funda i\u015flemi sonland\u0131r\u0131r ve daha performansl\u0131d\u0131r.</p>"},{"location":"linq/any-all-usage/#3-any-ve-all-kullanm-alanlar","title":"3. Any ve All Kullan\u0131m Alanlar\u0131","text":""},{"location":"linq/any-all-usage/#1-bos-koleksiyon-kontrolu","title":"1. Bo\u015f Koleksiyon Kontrol\u00fc","text":"<p><code>Any</code> metodu, bir koleksiyonun bo\u015f olup olmad\u0131\u011f\u0131n\u0131 kontrol etmek i\u00e7in kullan\u0131labilir.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>if (!people.Any())\n{\n    Console.WriteLine(\"Koleksiyon bo\u015f.\");\n}\n</code></pre>"},{"location":"linq/any-all-usage/#2-tum-elemanlar-kontrol-etme","title":"2. T\u00fcm Elemanlar\u0131 Kontrol Etme","text":"<p><code>All</code> metodu, bir koleksiyondaki t\u00fcm elemanlar\u0131n bir ko\u015fulu sa\u011flay\u0131p sa\u011flamad\u0131\u011f\u0131n\u0131 kontrol eder.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var allActive = users.All(u =&gt; u.IsActive);\n</code></pre>"},{"location":"linq/any-all-usage/#4-performans-ipuclar","title":"4. Performans \u0130pu\u00e7lar\u0131","text":"<ul> <li>Any: \u0130lk uygun eleman\u0131 bulduktan sonra i\u015flem biter, bu nedenle b\u00fcy\u00fck koleksiyonlarda h\u0131zl\u0131d\u0131r.</li> <li>All: Koleksiyonun t\u00fcm elemanlar\u0131n\u0131 kontrol eder, bu nedenle b\u00fcy\u00fck koleksiyonlarda daha yava\u015ft\u0131r.</li> </ul> <p>\u2705 \u00d6rnek Performans Kar\u015f\u0131la\u015ft\u0131rmas\u0131:</p> <pre><code>var stopwatch = Stopwatch.StartNew();\n\n// Any ile kontrol\nvar hasAdults = people.Any(p =&gt; p.Age &gt;= 18);\nstopwatch.Stop();\nConsole.WriteLine($\"Any S\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n\nstopwatch.Restart();\n\n// All ile kontrol\nvar allAdults = people.All(p =&gt; p.Age &gt;= 18);\nstopwatch.Stop();\nConsole.WriteLine($\"All S\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n</code></pre>"},{"location":"linq/any-all-usage/#5-dinamik-kosullar-ile-any-ve-all","title":"5. Dinamik Ko\u015fullar ile Any ve All","text":"<p>Ko\u015fullar\u0131 runtime s\u0131ras\u0131nda olu\u015fturabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>Func&lt;Person, bool&gt; isAdult = p =&gt; p.Age &gt;= 18;\n\nvar hasAdults = people.Any(isAdult);\nvar allAdults = people.All(isAdult);\n</code></pre>"},{"location":"linq/asnotracking-performance/","title":"AsNoTracking Kullan\u0131m\u0131 ile Performans Art\u0131\u015f\u0131","text":"<p>Entity Framework, veritaban\u0131 sorgular\u0131n\u0131 takip etmek ve de\u011fi\u015fiklikleri izlemek i\u00e7in varsay\u0131lan olarak bir tracking mekanizmas\u0131 kullan\u0131r. Ancak, yaln\u0131zca okuma i\u015flemleri i\u00e7in bu izleme mekanizmas\u0131 gereksizdir ve performans kayb\u0131na neden olabilir. <code>AsNoTracking</code>, izleme mekanizmas\u0131n\u0131 devre d\u0131\u015f\u0131 b\u0131rakarak bu sorunu \u00e7\u00f6zmek i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"linq/asnotracking-performance/#1-asnotracking-nedir","title":"1. AsNoTracking Nedir?","text":"<p><code>AsNoTracking</code>, sorgu sonucunda d\u00f6nen nesnelerin de\u011fi\u015fiklik izlenmesini devre d\u0131\u015f\u0131 b\u0131rakan bir Entity Framework \u00f6zelli\u011fidir. \u00d6zellikle sadece okuma i\u015flemlerinde bu y\u00f6ntem, bellek ve i\u015flemci kullan\u0131m\u0131n\u0131 azaltarak performans\u0131 art\u0131r\u0131r.</p>"},{"location":"linq/asnotracking-performance/#2-yanls-ve-ideal-kullanm","title":"2. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/asnotracking-performance/#yanls-kullanm-trackingin-devrede-oldugu-durumlarda-gereksiz-bellek-kullanm","title":"Yanl\u0131\u015f Kullan\u0131m: Tracking\u2019in devrede oldu\u011fu durumlarda gereksiz bellek kullan\u0131m\u0131.","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>using var context = new AppDbContext();\n\nvar customers = await context.Customers\n    .Where(c =&gt; c.IsActive)\n    .ToListAsync();\n\nforeach (var customer in customers)\n{\n    Console.WriteLine(customer.Name);\n}\n</code></pre> <p>Bu sorgu, d\u00f6nen <code>customers</code> listesindeki her bir nesne i\u00e7in izleme bilgisi tutar. Ancak izleme, yaln\u0131zca okuma i\u015flemlerinde gereksizdir.</p>"},{"location":"linq/asnotracking-performance/#ideal-kullanm-asnotracking-ile-gereksiz-izlemeyi-devre-ds-brakmak","title":"\u0130deal Kullan\u0131m: <code>AsNoTracking</code> ile gereksiz izlemeyi devre d\u0131\u015f\u0131 b\u0131rakmak.","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>using var context = new AppDbContext();\n\nvar customers = await context.Customers\n    .AsNoTracking()\n    .Where(c =&gt; c.IsActive)\n    .ToListAsync();\n\nforeach (var customer in customers)\n{\n    Console.WriteLine(customer.Name);\n}\n</code></pre> <p>Bu y\u00f6ntem, yaln\u0131zca okuma i\u015flemleri i\u00e7in kullan\u0131ld\u0131\u011f\u0131ndan izleme mekanizmas\u0131 devre d\u0131\u015f\u0131 b\u0131rak\u0131larak performans art\u0131\u015f\u0131 sa\u011flan\u0131r.</p>"},{"location":"linq/asnotracking-performance/#3-performans-kazanm","title":"3. Performans Kazan\u0131m\u0131","text":"<p><code>AsNoTracking</code>, \u00f6zellikle a\u015fa\u011f\u0131daki durumlarda performans\u0131 art\u0131r\u0131r: - B\u00fcy\u00fck veri k\u00fcmelerinde sorgular \u00e7al\u0131\u015ft\u0131r\u0131l\u0131rken. - Sorgular sadece veri okuma amac\u0131yla kullan\u0131ld\u0131\u011f\u0131nda. - Birden fazla sorgu ayn\u0131 anda \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda.</p> <p>\u00d6l\u00e7ekli sistemlerde bu performans fark\u0131 ciddi \u00f6l\u00e7\u00fcde hissedilir.</p>"},{"location":"linq/asnotracking-performance/#4-asnotrackingwithidentityresolution-kullanm","title":"4. <code>AsNoTrackingWithIdentityResolution</code> Kullan\u0131m\u0131","text":"<p><code>AsNoTracking</code> ile birlikte ayn\u0131 kimli\u011fe sahip nesnelerin do\u011fru \u015fekilde \u00e7\u00f6z\u00fclmesi i\u00e7in <code>AsNoTrackingWithIdentityResolution</code> kullan\u0131labilir.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>using var context = new AppDbContext();\n\nvar orders = await context.Orders\n    .AsNoTrackingWithIdentityResolution()\n    .Include(o =&gt; o.Customer)\n    .ToListAsync();\n\nforeach (var order in orders)\n{\n    Console.WriteLine($\"Order ID: {order.Id}, Customer: {order.Customer.Name}\");\n}\n</code></pre> <p>Bu y\u00f6ntem, ili\u015fkisel verilerle \u00e7al\u0131\u015f\u0131rken izleme mekanizmas\u0131 olmadan ayn\u0131 kimlikteki nesneleri birle\u015ftirir.</p>"},{"location":"linq/asnotracking-performance/#5-ornek-performans-testi","title":"5. \u00d6rnek Performans Testi","text":"<p>A\u015fa\u011f\u0131daki \u00f6rnek, <code>AsNoTracking</code> ile standart sorgular aras\u0131ndaki performans fark\u0131n\u0131 g\u00f6sterir:</p> <pre><code>var stopwatch = Stopwatch.StartNew();\n\nusing var context = new AppDbContext();\n\n// AsNoTracking olmadan\nvar trackedCustomers = await context.Customers\n    .Where(c =&gt; c.IsActive)\n    .ToListAsync();\n\nstopwatch.Stop();\nConsole.WriteLine($\"Tracked Query Time: {stopwatch.ElapsedMilliseconds} ms\");\n\nstopwatch.Restart();\n\n// AsNoTracking ile\nvar untrackedCustomers = await context.Customers\n    .AsNoTracking()\n    .Where(c =&gt; c.IsActive)\n    .ToListAsync();\n\nstopwatch.Stop();\nConsole.WriteLine($\"Untracked Query Time: {stopwatch.ElapsedMilliseconds} ms\");\n</code></pre> <p>Sonu\u00e7lar, <code>AsNoTracking</code> kullan\u0131m\u0131yla daha k\u0131sa sorgu s\u00fcreleri ve daha az bellek kullan\u0131m\u0131 sa\u011flayacakt\u0131r.</p>"},{"location":"linq/async-linq/","title":"Async LINQ","text":"<p>Async LINQ i\u015flemleri, \u00f6zellikle veritaban\u0131 sorgular\u0131nda IO ba\u011flaml\u0131 i\u015flemleri optimize etmek i\u00e7in kullan\u0131l\u0131r. Do\u011fru bir \u015fekilde uyguland\u0131\u011f\u0131nda performans\u0131 art\u0131rabilir ve kullan\u0131c\u0131 deneyimini iyile\u015ftirebilir. Ancak, yanl\u0131\u015f kullan\u0131m performans kayb\u0131na ve kaynaklar\u0131n yanl\u0131\u015f y\u00f6netilmesine yol a\u00e7abilir.</p>"},{"location":"linq/async-linq/#1-senkron-linq-ile-bekleme-surelerini-artrmak","title":"1. Senkron LINQ ile Bekleme S\u00fcrelerini Art\u0131rmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Senkron LINQ metotlar\u0131 kullanarak IO ba\u011flaml\u0131 i\u015flemleri engellemek.</p> <pre><code>var users = context.Users\n    .Where(u =&gt; u.IsActive)\n    .ToList(); // Senkron \u00e7a\u011fr\u0131, bloklama yarat\u0131r.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Asenkron LINQ metotlar\u0131 kullanarak bloklamay\u0131 \u00f6nleyin.</p> <pre><code>var users = await context.Users\n    .Where(u =&gt; u.IsActive)\n    .ToListAsync();\n</code></pre>"},{"location":"linq/async-linq/#2-tolistasync-kullanmn-gereksiz-yere-zincirlemek","title":"2. <code>ToListAsync</code> Kullan\u0131m\u0131n\u0131 Gereksiz Yere Zincirlemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>ToListAsync</code> \u00e7a\u011fr\u0131s\u0131n\u0131 gereksiz yere ba\u015fka i\u015flemlerle zincirlemek.</p> <pre><code>var users = (await context.Users.ToListAsync())\n    .Where(u =&gt; u.IsActive);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Filtreleri do\u011frudan asenkron sorguya dahil edin.</p> <pre><code>var users = await context.Users\n    .Where(u =&gt; u.IsActive)\n    .ToListAsync();\n</code></pre>"},{"location":"linq/async-linq/#3-her-satrda-await-kullanarak-performans-azaltmak","title":"3. Her Sat\u0131rda <code>Await</code> Kullanarak Performans\u0131 Azaltmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Her i\u015flemde ayr\u0131 ayr\u0131 <code>await</code> kullanmak.</p> <pre><code>var userList = new List&lt;User&gt;();\nforeach (var userId in userIds)\n{\n    var user = await context.Users.FindAsync(userId);\n    userList.Add(user);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Paralel i\u015flemleri bir arada \u00e7al\u0131\u015ft\u0131rmak i\u00e7in <code>Task.WhenAll</code> kullan\u0131n.</p> <pre><code>var tasks = userIds.Select(id =&gt; context.Users.FindAsync(id).AsTask());\nvar userList = await Task.WhenAll(tasks);\n</code></pre>"},{"location":"linq/async-linq/#4-asenkron-olmayan-veriler-icin-tolistasync-kullanm","title":"4. Asenkron Olmayan Veriler \u0130\u00e7in <code>ToListAsync</code> Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Bellekte olan verilerde asenkron \u00e7a\u011fr\u0131 kullanmak.</p> <pre><code>var inMemoryList = new List&lt;int&gt; { 1, 2, 3 };\nvar result = await inMemoryList.ToListAsync(); // Ge\u00e7ersiz kullan\u0131m\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Asenkron olmayan veriler i\u00e7in standart LINQ y\u00f6ntemlerini kullan\u0131n.</p> <pre><code>var inMemoryList = new List&lt;int&gt; { 1, 2, 3 };\nvar result = inMemoryList.ToList();\n</code></pre>"},{"location":"linq/async-linq/#5-firstasync-ve-singleasync-kullanmn-yanls-yonetmek","title":"5. <code>FirstAsync</code> ve <code>SingleAsync</code> Kullan\u0131m\u0131n\u0131 Yanl\u0131\u015f Y\u00f6netmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7ok fazla sonu\u00e7 d\u00f6nd\u00fcren bir sorgu i\u00e7in <code>SingleAsync</code> kullanmak.</p> <pre><code>var user = await context.Users.SingleAsync(u =&gt; u.IsActive); // Birden fazla sonu\u00e7 d\u00f6nerse hata\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sonu\u00e7lar\u0131n birden fazla olabilece\u011fi durumlarda <code>FirstOrDefaultAsync</code> kullan\u0131n.</p> <pre><code>var user = await context.Users.FirstOrDefaultAsync(u =&gt; u.IsActive);\nif (user == null)\n{\n    Console.WriteLine(\"Kullan\u0131c\u0131 bulunamad\u0131.\");\n}\n</code></pre>"},{"location":"linq/async-linq/#6-asnotracking-kullanmn-goz-ard-etmek","title":"6. <code>AsNoTracking</code> Kullan\u0131m\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Sorgu sonu\u00e7lar\u0131n\u0131 yaln\u0131zca okuma ama\u00e7l\u0131 kullan\u0131rken izleme (tracking) yapmay\u0131 ihmal etmek.</p> <pre><code>var products = await context.Products.ToListAsync(); // Tracking a\u00e7\u0131k\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Yaln\u0131zca okuma ama\u00e7l\u0131 sorgularda <code>AsNoTracking</code> kullan\u0131n.</p> <pre><code>var products = await context.Products.AsNoTracking().ToListAsync();\n</code></pre>"},{"location":"linq/expression-trees/","title":"Expression Trees ile Dinamik LINQ Sorgular\u0131","text":"<p>Expression Trees, C# dilinde dinamik ve karma\u015f\u0131k sorgular olu\u015fturmak i\u00e7in g\u00fc\u00e7l\u00fc bir ara\u00e7t\u0131r. \u00d6zellikle LINQ ile \u00e7al\u0131\u015f\u0131rken, runtime s\u0131ras\u0131nda sorgular \u00fcretmek ve bu sorgular\u0131 optimize etmek i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"linq/expression-trees/#1-expression-trees-nedir","title":"1. Expression Trees Nedir?","text":"<p>Expression Trees, kodunuzun bir ifade bi\u00e7iminde temsil edilmesini sa\u011flar. Bu, bir sorgunun veya lambda ifadesinin analiz edilmesine ve \u00e7al\u0131\u015fma zaman\u0131nda de\u011fi\u015ftirilmesine olanak tan\u0131r.  </p> <p>\u00d6zellikle a\u015fa\u011f\u0131daki durumlarda kullan\u0131l\u0131r: - Dinamik Filtreleme: Kullan\u0131c\u0131 girdilerine g\u00f6re ko\u015fullar olu\u015fturma. - Veritaban\u0131 Sorgular\u0131: LINQ to SQL veya Entity Framework ile dinamik sorgular \u00fcretme. - Derin Analiz: Lambda ifadelerini analiz ederek optimize etme.</p>"},{"location":"linq/expression-trees/#2-yanls-ve-ideal-kullanm","title":"2. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/expression-trees/#yanls-kullanm-statik-kosullar","title":"Yanl\u0131\u015f Kullan\u0131m: Statik Ko\u015fullar","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>var filteredData = data.Where(x =&gt; x.Age &gt; 32 &amp;&amp; x.Name == \"Murat\").ToList();\n</code></pre> <p>Bu sorgu, yaln\u0131zca belirli bir ko\u015ful i\u00e7in sabitlenmi\u015ftir ve yeniden kullan\u0131labilirli\u011fi d\u00fc\u015f\u00fckt\u00fcr.</p>"},{"location":"linq/expression-trees/#ideal-kullanm-dinamik-kosullar","title":"\u0130deal Kullan\u0131m: Dinamik Ko\u015fullar","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>using System.Linq.Expressions;\n\nExpression&lt;Func&lt;Person, bool&gt;&gt; filter = x =&gt; x.Age &gt; 32 &amp;&amp; x.Name == \"Murat\";\nvar filteredData = data.Where(filter.Compile()).ToList();\n</code></pre> <p>Bu y\u00f6ntem, ko\u015fullar\u0131 dinamik olarak olu\u015fturman\u0131za olanak tan\u0131r.</p>"},{"location":"linq/expression-trees/#3-dinamik-kosullar-olusturma","title":"3. Dinamik Ko\u015fullar Olu\u015fturma","text":"<p>Expression Trees ile ko\u015fullar runtime s\u0131ras\u0131nda olu\u015fturulabilir.</p> <p>\u2705 \u00d6rnek: Kullan\u0131c\u0131 Girdisine G\u00f6re Dinamik Sorgu</p> <pre><code>var parameter = Expression.Parameter(typeof(Person), \"x\");\nvar property = Expression.Property(parameter, \"Age\");\nvar constant = Expression.Constant(32);\nvar comparison = Expression.GreaterThan(property, constant);\n\nvar lambda = Expression.Lambda&lt;Func&lt;Person, bool&gt;&gt;(comparison, parameter);\n\nvar filteredData = data.Where(lambda.Compile()).ToList();\n</code></pre> <p>Bu kod, <code>x =&gt; x.Age &gt; 32</code> sorgusunu runtime s\u0131ras\u0131nda olu\u015fturur.</p>"},{"location":"linq/expression-trees/#4-birden-fazla-kosul-ile-dinamik-sorgu","title":"4. Birden Fazla Ko\u015ful ile Dinamik Sorgu","text":"<p>Expression Trees ile birden fazla ko\u015ful dinamik olarak birle\u015ftirilebilir.</p> <p>\u2705 \u00d6rnek: Dinamik Ko\u015fullar\u0131n Birle\u015ftirilmesi</p> <pre><code>var parameter = Expression.Parameter(typeof(Person), \"x\");\n\nvar ageProperty = Expression.Property(parameter, \"Age\");\nvar ageCondition = Expression.GreaterThan(ageProperty, Expression.Constant(32));\n\nvar nameProperty = Expression.Property(parameter, \"Name\");\nvar nameCondition = Expression.Equal(nameProperty, Expression.Constant(\"Murat\"));\n\nvar combinedCondition = Expression.AndAlso(ageCondition, nameCondition);\n\nvar lambda = Expression.Lambda&lt;Func&lt;Person, bool&gt;&gt;(combinedCondition, parameter);\n\nvar filteredData = data.Where(lambda.Compile()).ToList();\n</code></pre> <p>Bu kod, <code>x =&gt; x.Age &gt; 32 &amp;&amp; x.Name == \"Murat\"</code> sorgusunu olu\u015fturur.</p>"},{"location":"linq/expression-trees/#5-dinamik-sralama-dynamic-ordering","title":"5. Dinamik S\u0131ralama (Dynamic Ordering)","text":"<p>Expression Trees kullanarak s\u0131ralama i\u015flemleri dinamik hale getirilebilir.</p> <p>\u2705 \u00d6rnek: Dinamik S\u0131ralama</p> <pre><code>var parameter = Expression.Parameter(typeof(Person), \"x\");\nvar property = Expression.Property(parameter, \"Name\");\n\nvar lambda = Expression.Lambda&lt;Func&lt;Person, string&gt;&gt;(property, parameter);\n\nvar sortedData = data.OrderBy(lambda.Compile()).ToList();\n</code></pre> <p>Bu kod, ki\u015fileri adlar\u0131na g\u00f6re s\u0131ralar.</p>"},{"location":"linq/expression-trees/#6-performans-ve-optimizasyon","title":"6. Performans ve Optimizasyon","text":"<p>Expression Trees, do\u011fru kullan\u0131ld\u0131\u011f\u0131nda performans\u0131 art\u0131rabilir. Ancak, yanl\u0131\u015f kullan\u0131m\u0131 durumunda gereksiz karma\u015f\u0131kl\u0131k ve yava\u015flama yaratabilir. Ko\u015fullar: - \u00c7ok s\u0131k kullan\u0131lan sorgular \u00f6nceden derlenmeli. - Dinamik ko\u015fullar karma\u015f\u0131k hale gelirse sorgu analiz edilmeli.</p> <p>\u2705 Performans \u0130pucu:</p> <pre><code>var compiledLambda = lambda.Compile();\n// Compiled sorguyu tekrar kullanabilirsiniz\nvar filteredData = data.Where(compiledLambda).ToList();\n</code></pre>"},{"location":"linq/extension-methods/","title":"LINQ Extension Methods","text":"<p>LINQ (Language Integrated Query), C# ile veri i\u015flemlerini kolayla\u015ft\u0131rmak i\u00e7in g\u00fc\u00e7l\u00fc bir ara\u00e7t\u0131r. LINQ, geni\u015fletme metotlar\u0131 (extension methods) ile sorgu yaz\u0131m\u0131n\u0131 daha esnek ve okunabilir hale getirir. Ancak, bu metotlar\u0131n yanl\u0131\u015f kullan\u0131m\u0131 performans kayb\u0131na ve karma\u015f\u0131k kod yap\u0131lar\u0131na yol a\u00e7abilir.</p>"},{"location":"linq/extension-methods/#1-gereksiz-tolist-kullanm","title":"1. Gereksiz <code>ToList</code> Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Sorgular\u0131n her ad\u0131m\u0131nda <code>ToList</code> kullanmak.</p> <pre><code>var filteredData = context.Data\n    .Where(d =&gt; d.IsActive)\n    .ToList()\n    .Select(d =&gt; d.Name)\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sorguyu tek bir i\u015flemde y\u00fcr\u00fct\u00fcn.</p> <pre><code>var filteredData = context.Data\n    .Where(d =&gt; d.IsActive)\n    .Select(d =&gt; d.Name)\n    .ToList();\n</code></pre>"},{"location":"linq/extension-methods/#2-buyuk-veri-setlerinde-orderby-ile-performans-sorunlar","title":"2. B\u00fcy\u00fck Veri Setlerinde <code>OrderBy</code> ile Performans Sorunlar\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Bellekte s\u0131ralama yapmak.</p> <pre><code>var data = context.Data.ToList().OrderBy(d =&gt; d.Name).ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: S\u0131ralama i\u015flemini veritaban\u0131nda ger\u00e7ekle\u015ftirin.</p> <pre><code>var data = context.Data\n    .OrderBy(d =&gt; d.Name)\n    .ToList();\n</code></pre>"},{"location":"linq/extension-methods/#3-gereksiz-select-kullanm","title":"3. Gereksiz <code>Select</code> Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz projeksiyonlar yapmak.</p> <pre><code>var data = context.Data\n    .Select(d =&gt; new { d.Id, d.Name })\n    .Select(d =&gt; d.Name)\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Do\u011frudan ihtiyac\u0131n\u0131z olan veriyi se\u00e7in.</p> <pre><code>var data = context.Data\n    .Select(d =&gt; d.Name)\n    .ToList();\n</code></pre>"},{"location":"linq/extension-methods/#4-first-ve-single-kullanmn-yanls-yonetmek","title":"4. <code>First</code> ve <code>Single</code> Kullan\u0131m\u0131n\u0131 Yanl\u0131\u015f Y\u00f6netmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Veri bulunamamas\u0131 durumunda hata veren <code>First</code> veya <code>Single</code> kullanmak.</p> <pre><code>var item = context.Data.First(d =&gt; d.Id == 1); // Veri yoksa hata f\u0131rlat\u0131r\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: G\u00fcvenli sorgulamalar i\u00e7in <code>FirstOrDefault</code> veya <code>SingleOrDefault</code> kullan\u0131n.</p> <pre><code>var item = context.Data.FirstOrDefault(d =&gt; d.Id == 1);\nif (item == null)\n{\n    Console.WriteLine(\"Veri bulunamad\u0131.\");\n}\n</code></pre>"},{"location":"linq/extension-methods/#5-count-kullanmyla-performans-etkilemek","title":"5. <code>Count</code> Kullan\u0131m\u0131yla Performans\u0131 Etkilemek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>Count</code>\u2018u bellek i\u00e7indeki bir koleksiyona uygulamak.</p> <pre><code>var count = context.Data.ToList().Count;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Veritaban\u0131nda <code>Count</code> i\u015flemini ger\u00e7ekle\u015ftirin.</p> <pre><code>var count = context.Data.Count();\n</code></pre>"},{"location":"linq/extension-methods/#6-genisletme-metotlar-ile-karmask-yaplar-yazmak","title":"6. Geni\u015fletme Metotlar\u0131 ile Karma\u015f\u0131k Yap\u0131lar Yazmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Tek sat\u0131rda karma\u015f\u0131k i\u015flemleri zincirlemek.</p> <pre><code>var data = context.Data\n    .Where(d =&gt; d.IsActive)\n    .OrderBy(d =&gt; d.Name)\n    .Select(d =&gt; new { d.Id, d.Name, d.Date })\n    .ToList()\n    .GroupBy(d =&gt; d.Date.Year);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130\u015flemleri ad\u0131mlara b\u00f6lerek kodu daha okunabilir hale getirin.</p> <pre><code>var activeData = context.Data\n    .Where(d =&gt; d.IsActive)\n    .OrderBy(d =&gt; d.Name)\n    .Select(d =&gt; new { d.Id, d.Name, d.Date })\n    .ToList();\n\nvar groupedData = activeData.GroupBy(d =&gt; d.Date.Year);\n</code></pre>"},{"location":"linq/extension-methods/#7-any-ve-exists-kullanmn-goz-ard-etmek","title":"7. <code>Any</code> ve <code>Exists</code> Kullan\u0131m\u0131n\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Var olup olmad\u0131\u011f\u0131n\u0131 kontrol etmek i\u00e7in <code>Count</code> kullanmak.</p> <pre><code>var exists = context.Data.Count(d =&gt; d.IsActive) &gt; 0;\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Daha performansl\u0131 <code>Any</code> metodunu kullan\u0131n.</p> <pre><code>var exists = context.Data.Any(d =&gt; d.IsActive);\n</code></pre>"},{"location":"linq/first-single-differences/","title":"LINQ: First ve Single Farklar\u0131","text":"<p>LINQ\u2019da <code>First</code>, <code>FirstOrDefault</code>, <code>Single</code> ve <code>SingleOrDefault</code> metotlar\u0131, koleksiyonlardan belirli bir eleman se\u00e7mek i\u00e7in kullan\u0131l\u0131r. Ancak bu metotlar\u0131n yanl\u0131\u015f kullan\u0131m\u0131 performans ve hata y\u00f6netimi a\u00e7\u0131s\u0131ndan sorunlara yol a\u00e7abilir.</p>"},{"location":"linq/first-single-differences/#1-first-ve-single-nedir","title":"1. First ve Single Nedir?","text":""},{"location":"linq/first-single-differences/#first","title":"First","text":"<ul> <li>Koleksiyondaki ilk eleman\u0131 d\u00f6nd\u00fcr\u00fcr.</li> <li>Eleman yoksa <code>InvalidOperationException</code> f\u0131rlat\u0131r.</li> <li>\u0130lk eleman varsa hemen d\u00f6ner ve i\u015flem sona erer.</li> </ul> <p>\u00d6rnek:</p> <pre><code>var firstCustomer = customers.First(c =&gt; c.IsActive);\nConsole.WriteLine(firstCustomer.Name);\n</code></pre>"},{"location":"linq/first-single-differences/#single","title":"Single","text":"<ul> <li>Koleksiyonda yaln\u0131zca bir eleman varsa o eleman\u0131 d\u00f6nd\u00fcr\u00fcr.</li> <li>Birden fazla eleman varsa <code>InvalidOperationException</code> f\u0131rlat\u0131r.</li> <li>Eleman yoksa yine <code>InvalidOperationException</code> f\u0131rlat\u0131r.</li> </ul> <p>\u00d6rnek:</p> <pre><code>var singleCustomer = customers.Single(c =&gt; c.Id == 1);\nConsole.WriteLine(singleCustomer.Name);\n</code></pre>"},{"location":"linq/first-single-differences/#2-yanls-ve-ideal-kullanm","title":"2. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/first-single-differences/#yanls-kullanm-first-ile-benzersiz-bir-eleman-kontrolu","title":"Yanl\u0131\u015f Kullan\u0131m: First ile benzersiz bir eleman kontrol\u00fc","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>var singleCustomer = customers.First(c =&gt; c.Id == 1);\n</code></pre> <p>Bu kullan\u0131m, koleksiyonun benzersiz bir eleman i\u00e7erip i\u00e7ermedi\u011fini kontrol etmez ve yanl\u0131\u015f sonu\u00e7lara yol a\u00e7abilir.</p>"},{"location":"linq/first-single-differences/#ideal-kullanm-single-ile-benzersizlik-kontrolu","title":"\u0130deal Kullan\u0131m: Single ile benzersizlik kontrol\u00fc","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>var singleCustomer = customers.Single(c =&gt; c.Id == 1);\n</code></pre> <p>Bu y\u00f6ntem, koleksiyonda yaln\u0131zca bir eleman oldu\u011fundan emin olur.</p>"},{"location":"linq/first-single-differences/#3-default-deger-destegi","title":"3. Default De\u011fer Deste\u011fi","text":"<p>E\u011fer koleksiyonda eleman olmayabilece\u011fini d\u00fc\u015f\u00fcn\u00fcyorsan\u0131z <code>FirstOrDefault</code> veya <code>SingleOrDefault</code> kullanabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var firstCustomer = customers.FirstOrDefault(c =&gt; c.IsActive);\nif (firstCustomer != null)\n{\n    Console.WriteLine(firstCustomer.Name);\n}\n</code></pre> <pre><code>var singleCustomer = customers.SingleOrDefault(c =&gt; c.Id == 1);\nif (singleCustomer != null)\n{\n    Console.WriteLine(singleCustomer.Name);\n}\n</code></pre>"},{"location":"linq/first-single-differences/#4-performans-farklar","title":"4. Performans Farklar\u0131","text":"<ul> <li>First: \u0130lk e\u015fle\u015fmeyi buldu\u011funda i\u015flem sona erer, bu nedenle daha h\u0131zl\u0131d\u0131r.</li> <li>Single: Koleksiyonun tamam\u0131n\u0131 tarar, \u00e7\u00fcnk\u00fc benzersizlik kontrol\u00fc yapar.</li> </ul> <p>\u2705 Performans Kar\u015f\u0131la\u015ft\u0131rmas\u0131:</p> <pre><code>var stopwatch = Stopwatch.StartNew();\n\n// First kullan\u0131m\u0131\nvar firstCustomer = customers.First(c =&gt; c.IsActive);\nstopwatch.Stop();\nConsole.WriteLine($\"First S\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n\nstopwatch.Restart();\n\n// Single kullan\u0131m\u0131\nvar singleCustomer = customers.Single(c =&gt; c.Id == 1);\nstopwatch.Stop();\nConsole.WriteLine($\"Single S\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n</code></pre>"},{"location":"linq/first-single-differences/#5-hangi-durumda-hangisi-kullanlmal","title":"5. Hangi Durumda Hangisi Kullan\u0131lmal\u0131?","text":"Metot Kullan\u0131m Durumu First \u0130lk eleman\u0131 almak istedi\u011finizde. FirstOrDefault \u0130lk eleman yoksa varsay\u0131lan bir de\u011fer d\u00f6nd\u00fcrmek istedi\u011finizde. Single Koleksiyonda yaln\u0131zca bir eleman oldu\u011fundan emin oldu\u011funuzda. SingleOrDefault Koleksiyonda yaln\u0131zca bir eleman varsa d\u00f6nd\u00fcrmek istedi\u011finizde."},{"location":"linq/lazy-evaluation-performance/","title":"LINQ: Lazy Evaluation ve Performans \u00dczerindeki Etkisi","text":"<p>LINQ\u2019da sorgular\u0131n nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 anlamak, hem performans\u0131 optimize etmek hem de beklenmeyen sonu\u00e7lar\u0131n \u00f6n\u00fcne ge\u00e7mek i\u00e7in kritiktir. LINQ sorgular\u0131, varsay\u0131lan olarak \u201clazy evaluation\u201d (ertelemeli de\u011ferlendirme) prensibiyle \u00e7al\u0131\u015f\u0131r.</p>"},{"location":"linq/lazy-evaluation-performance/#1-lazy-evaluation-nedir","title":"1. Lazy Evaluation Nedir?","text":"<p>Lazy evaluation, bir LINQ sorgusunun ancak sonucun talep edilmesi durumunda \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131d\u0131r. Bu, sorgu zincirlerinin gereksiz yere \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131n\u0131 engeller ve bellek kullan\u0131m\u0131n\u0131 azalt\u0131r.</p> <p>\u00d6rnek:</p> <pre><code>var query = numbers.Where(n =&gt; n &gt; 10);\n\n// Sorgu burada \u00e7al\u0131\u015ft\u0131r\u0131lmaz, yaln\u0131zca tan\u0131mlan\u0131r.\nforeach (var number in query)\n{\n    Console.WriteLine(number);\n}\n// Sorgu burada \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r.\n</code></pre> <p>Bu \u00f6rnekte, <code>query</code> tan\u0131mlan\u0131r ancak yaln\u0131zca d\u00f6ng\u00fc \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda veritaban\u0131na sorgu g\u00f6nderilir.</p>"},{"location":"linq/lazy-evaluation-performance/#2-yanls-ve-ideal-kullanm","title":"2. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/lazy-evaluation-performance/#yanls-kullanm-gereksiz-islem-zincirleri-olusturmak","title":"Yanl\u0131\u015f Kullan\u0131m: Gereksiz i\u015flem zincirleri olu\u015fturmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>var query = numbers.Where(n =&gt; n &gt; 10).OrderBy(n =&gt; n).Skip(5);\n// Sorgu gereksiz yere zincirlenir ve performans\u0131 etkiler\nvar result = query.ToList();\n</code></pre> <p>Her bir ad\u0131m, gereksiz i\u015flemleri zincirleyerek veritaban\u0131nda a\u011f\u0131r bir sorguya d\u00f6n\u00fc\u015febilir.</p>"},{"location":"linq/lazy-evaluation-performance/#ideal-kullanm-yalnzca-ihtiyac-duyulan-islemleri-zincirlemek","title":"\u0130deal Kullan\u0131m: Yaln\u0131zca ihtiya\u00e7 duyulan i\u015flemleri zincirlemek","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>var result = numbers\n    .Where(n =&gt; n &gt; 10)\n    .OrderBy(n =&gt; n)\n    .Skip(5)\n    .Take(10)\n    .ToList();\n</code></pre> <p>Bu yakla\u015f\u0131m, yaln\u0131zca ihtiya\u00e7 duyulan veriyi i\u015fleyerek performans\u0131 art\u0131r\u0131r.</p>"},{"location":"linq/lazy-evaluation-performance/#3-immediate-execution","title":"3. Immediate Execution","text":"<p>E\u011fer bir sorgunun hemen \u00e7al\u0131\u015fmas\u0131n\u0131 istiyorsan\u0131z, <code>ToList()</code>, <code>Count()</code>, veya <code>First()</code> gibi metotlar kullanabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var result = numbers.Where(n =&gt; n &gt; 10).ToList();\n// Sorgu burada hemen \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r.\n</code></pre> <p>Immediate execution, \u00f6zellikle sonu\u00e7lar\u0131n birden fazla kez kullan\u0131laca\u011f\u0131 durumlarda faydal\u0131d\u0131r.</p>"},{"location":"linq/lazy-evaluation-performance/#4-performans-tuzag-multiple-iteration","title":"4. Performans Tuza\u011f\u0131: Multiple Iteration","text":"<p>Bir LINQ sorgusu birden fazla kez iterasyona tabi tutulursa, her seferinde yeniden \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>var query = numbers.Where(n =&gt; n &gt; 10);\n\nConsole.WriteLine(query.Count()); // Sorgu \u00e7al\u0131\u015f\u0131r\nforeach (var number in query) // Sorgu tekrar \u00e7al\u0131\u015f\u0131r\n{\n    Console.WriteLine(number);\n}\n</code></pre> <p>Bu yakla\u015f\u0131m, ayn\u0131 sorgunun iki kez \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131na neden olur.</p> <p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>var result = numbers.Where(n =&gt; n &gt; 10).ToList();\n\nConsole.WriteLine(result.Count());\nforeach (var number in result)\n{\n    Console.WriteLine(number);\n}\n</code></pre> <p>Bu y\u00f6ntem, sorgunun yaln\u0131zca bir kez \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"linq/lazy-evaluation-performance/#5-performans-testi","title":"5. Performans Testi","text":"<p>Lazy evaluation ile immediate execution aras\u0131ndaki fark\u0131 \u00f6l\u00e7mek i\u00e7in:</p> <p>\u2705 \u00d6rnek Performans Testi:</p> <pre><code>var stopwatch = Stopwatch.StartNew();\n\n// Lazy Evaluation\nvar query = numbers.Where(n =&gt; n &gt; 10);\nstopwatch.Stop();\nConsole.WriteLine($\"Lazy Evaluation S\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n\nstopwatch.Restart();\n\n// Immediate Execution\nvar result = numbers.Where(n =&gt; n &gt; 10).ToList();\nstopwatch.Stop();\nConsole.WriteLine($\"Immediate Execution S\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n</code></pre>"},{"location":"linq/lazy-evaluation-performance/#6-lazy-evaluationun-avantajlar-ve-dezavantajlar","title":"6. Lazy Evaluation\u2019un Avantajlar\u0131 ve Dezavantajlar\u0131","text":"Avantajlar Dezavantajlar Bellek kullan\u0131m\u0131n\u0131 optimize eder \u00c7ok say\u0131da tekrar eden iterasyon performans\u0131 d\u00fc\u015f\u00fcr\u00fcr Sorgular sadece ihtiya\u00e7 duyuldu\u011funda \u00e7al\u0131\u015f\u0131r Karma\u015f\u0131k sorgu zincirleri a\u011f\u0131r sorgular olu\u015fturabilir Verinin tamam\u0131 y\u00fcklenmeden i\u015flem yap\u0131labilir Sorgular\u0131n beklenmeyen zamanlarda \u00e7al\u0131\u015fmas\u0131na neden olabilir"},{"location":"linq/pagination-take-skip/","title":"LINQ ile Sayfalama: Take ve Skip Kullan\u0131m\u0131","text":"<p>B\u00fcy\u00fck veri k\u00fcmeleriyle \u00e7al\u0131\u015f\u0131rken verilerin belirli bir k\u0131sm\u0131n\u0131 almak veya sayfa bazl\u0131 veri d\u00f6nd\u00fcrmek yayg\u0131n bir ihtiya\u00e7t\u0131r. LINQ <code>Take</code> ve <code>Skip</code> metotlar\u0131, bu ihtiyac\u0131 kar\u015f\u0131lamak i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"linq/pagination-take-skip/#1-take-ve-skip-nedir","title":"1. Take ve Skip Nedir?","text":"<ul> <li>Take: Verilen say\u0131da eleman\u0131 al\u0131r.</li> <li>Skip: Verilen say\u0131da eleman\u0131 atlar.</li> </ul> <p>Bu iki metot bir arada kullan\u0131ld\u0131\u011f\u0131nda sayfalama i\u015flemleri kolayca ger\u00e7ekle\u015ftirilebilir.</p>"},{"location":"linq/pagination-take-skip/#2-yanls-ve-ideal-kullanm","title":"2. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/pagination-take-skip/#yanls-kullanm-tum-veriyi-getirmek","title":"Yanl\u0131\u015f Kullan\u0131m: T\u00fcm veriyi getirmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>var allData = data.ToList(); // T\u00fcm veriyi bellek i\u00e7ine al\u0131r\nvar pageData = allData.Skip(10).Take(10).ToList(); // Gereksiz bellek t\u00fcketimi\n</code></pre> <p>Bu y\u00f6ntem, gereksiz yere t\u00fcm veriyi belle\u011fe y\u00fckler ve performans kayb\u0131na yol a\u00e7ar.</p>"},{"location":"linq/pagination-take-skip/#ideal-kullanm-dogrudan-sorguda-take-ve-skip-kullanm","title":"\u0130deal Kullan\u0131m: Do\u011frudan sorguda Take ve Skip kullan\u0131m\u0131","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>var pageData = data.Skip(10).Take(10).ToList(); // Sorgu veritaban\u0131nda \u00e7al\u0131\u015f\u0131r\n</code></pre> <p>Bu y\u00f6ntem, veritaban\u0131nda yaln\u0131zca ihtiya\u00e7 duyulan verinin al\u0131nmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"linq/pagination-take-skip/#3-sayfalama-ornegi","title":"3. Sayfalama \u00d6rne\u011fi","text":"<p>A\u015fa\u011f\u0131daki \u00f6rnek, bir koleksiyon \u00fczerinde sayfalama yapman\u0131n temel mant\u0131\u011f\u0131n\u0131 g\u00f6sterir:</p> <pre><code>int pageNumber = 2;\nint pageSize = 10;\n\nvar pageData = data\n    .Skip((pageNumber - 1) * pageSize)\n    .Take(pageSize)\n    .ToList();\n\nforeach (var item in pageData)\n{\n    Console.WriteLine(item);\n}\n</code></pre> <p>Bu kod, 2. sayfadan 10 eleman al\u0131r.</p>"},{"location":"linq/pagination-take-skip/#4-performans-iyilestirme","title":"4. Performans \u0130yile\u015ftirme","text":"<p>Veri taban\u0131nda b\u00fcy\u00fck koleksiyonlarla \u00e7al\u0131\u015f\u0131rken <code>AsQueryable</code> kullanarak performans art\u0131\u015f\u0131 sa\u011flayabilirsiniz:</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var pageData = context.Customers\n    .AsQueryable()\n    .Skip(20)\n    .Take(10)\n    .ToList();\n</code></pre> <p>Bu sorgu, yaln\u0131zca ihtiya\u00e7 duyulan veriyi veritaban\u0131ndan \u00e7eker ve belle\u011fi optimize eder.</p>"},{"location":"linq/pagination-take-skip/#5-dinamik-sayfalama","title":"5. Dinamik Sayfalama","text":"<p>Kullan\u0131c\u0131 giri\u015fine g\u00f6re dinamik olarak sayfalama i\u015flemi yap\u0131labilir:</p> <p>\u2705 \u00d6rnek:</p> <pre><code>public List&lt;T&gt; GetPagedData&lt;T&gt;(IQueryable&lt;T&gt; query, int pageNumber, int pageSize)\n{\n    return query\n        .Skip((pageNumber - 1) * pageSize)\n        .Take(pageSize)\n        .ToList();\n}\n\n// Kullan\u0131m\nvar customersPage = GetPagedData(context.Customers, 3, 15);\n</code></pre>"},{"location":"linq/pagination-take-skip/#6-toplam-sayfa-says-hesaplama","title":"6. Toplam Sayfa Say\u0131s\u0131 Hesaplama","text":"<p>Sayfalama yaparken toplam sayfa say\u0131s\u0131n\u0131 hesaplamak i\u00e7in veri setindeki toplam eleman say\u0131s\u0131 kullan\u0131labilir:</p> <p>\u2705 \u00d6rnek:</p> <pre><code>int totalItems = context.Customers.Count();\nint pageSize = 10;\nint totalPages = (int)Math.Ceiling((double)totalItems / pageSize);\n\nConsole.WriteLine($\"Toplam Sayfa: {totalPages}\");\n</code></pre>"},{"location":"linq/pagination-take-skip/#7-ileri-ve-geri-gezinme","title":"7. \u0130leri ve Geri Gezinme","text":"<p>Kullan\u0131c\u0131lar\u0131n sayfalar aras\u0131nda kolayca gezinebilmeleri i\u00e7in ileri ve geri gezinme mant\u0131\u011f\u0131 uygulanabilir:</p> <p>\u2705 \u00d6rnek:</p> <pre><code>int currentPage = 1;\n\nvar nextPageData = data\n    .Skip(currentPage * pageSize)\n    .Take(pageSize)\n    .ToList();\n\ncurrentPage--;\n\nvar previousPageData = data\n    .Skip((currentPage - 1) * pageSize)\n    .Take(pageSize)\n    .ToList();\n</code></pre>"},{"location":"linq/performance-orderby/","title":"LINQ ile Performansl\u0131 S\u0131ralama: OrderBy Kullan\u0131m\u0131","text":"<p>Veri s\u0131ralama i\u015flemleri, genellikle b\u00fcy\u00fck veri k\u00fcmelerinde performans\u0131 etkileyen \u00f6nemli bir ad\u0131md\u0131r. LINQ <code>OrderBy</code> ve <code>ThenBy</code> metotlar\u0131 ile s\u0131ralama i\u015flemleri ger\u00e7ekle\u015ftirilir.</p>"},{"location":"linq/performance-orderby/#1-orderby-ve-thenby-nedir","title":"1. OrderBy ve ThenBy Nedir?","text":"<ul> <li>OrderBy: Veriyi belirli bir s\u00fctuna g\u00f6re artan s\u0131rada s\u0131ralar.</li> <li>ThenBy: \u00d6nceki s\u0131ralama kriterinden sonra ikinci bir s\u0131ralama uygular.</li> </ul> <p>\u00d6rnek Kullan\u0131m:</p> <pre><code>var sortedData = data.OrderBy(x =&gt; x.Name).ThenBy(x =&gt; x.Age).ToList();\n</code></pre> <p>Bu kod, <code>Name</code> alan\u0131na g\u00f6re artan s\u0131ralama yapar. E\u011fer <code>Name</code> ayn\u0131ysa, <code>Age</code> alan\u0131na g\u00f6re s\u0131ralama yapar.</p>"},{"location":"linq/performance-orderby/#2-yanls-ve-ideal-kullanm","title":"2. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/performance-orderby/#yanls-kullanm-cok-sayda-sralama-islemi","title":"Yanl\u0131\u015f Kullan\u0131m: \u00c7ok say\u0131da s\u0131ralama i\u015flemi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>var sortedData = data\n    .OrderBy(x =&gt; x.Name)\n    .OrderBy(x =&gt; x.Age)\n    .ToList();\n</code></pre> <p>Bu kod, her <code>OrderBy</code> \u00e7a\u011fr\u0131s\u0131nda s\u0131ralama i\u015flemini yeniden ba\u015flat\u0131r. Bu nedenle performans kayb\u0131na neden olur.</p>"},{"location":"linq/performance-orderby/#ideal-kullanm-thenby-ile-sralamalar-birlestirme","title":"\u0130deal Kullan\u0131m: ThenBy ile s\u0131ralamalar\u0131 birle\u015ftirme","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>var sortedData = data\n    .OrderBy(x =&gt; x.Name)\n    .ThenBy(x =&gt; x.Age)\n    .ToList();\n</code></pre> <p>Bu y\u00f6ntem, s\u0131ralamalar\u0131 birle\u015ftirerek daha verimli bir i\u015flem yapar.</p>"},{"location":"linq/performance-orderby/#3-sralama-performansn-artrmak","title":"3. S\u0131ralama Performans\u0131n\u0131 Art\u0131rmak","text":""},{"location":"linq/performance-orderby/#1-asqueryable-kullanm","title":"1. AsQueryable Kullan\u0131m\u0131","text":"<p>Veri taban\u0131 sorgular\u0131nda, s\u0131ralama i\u015flemini belle\u011fe ta\u015f\u0131madan \u00f6nce veritaban\u0131nda ger\u00e7ekle\u015ftirmek daha performansl\u0131d\u0131r.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var sortedData = context.Customers\n    .AsQueryable()\n    .OrderBy(x =&gt; x.Name)\n    .ToList();\n</code></pre>"},{"location":"linq/performance-orderby/#2-sutun-indeksleri","title":"2. S\u00fctun \u0130ndeksleri","text":"<p>Veritaban\u0131nda s\u0131ralama yap\u0131lan s\u00fctunlarda indeks olu\u015fturmak, s\u0131ralama performans\u0131n\u0131 ciddi \u015fekilde art\u0131r\u0131r.</p> <pre><code>CREATE INDEX idx_name ON Customers (Name);\n</code></pre>"},{"location":"linq/performance-orderby/#3-azalan-sralama-descending-order","title":"3. Azalan S\u0131ralama (Descending Order)","text":"<p>LINQ <code>OrderByDescending</code> ile veriyi azalan s\u0131rada s\u0131ralayabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var sortedData = data.OrderByDescending(x =&gt; x.Date).ToList();\n</code></pre>"},{"location":"linq/performance-orderby/#4-dinamik-sralama","title":"4. Dinamik S\u0131ralama","text":"<p>Kullan\u0131c\u0131dan gelen giri\u015flere ba\u011fl\u0131 olarak s\u0131ralama yapmak gerekebilir.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>public List&lt;T&gt; SortData&lt;T&gt;(IQueryable&lt;T&gt; query, string sortColumn, bool ascending)\n{\n    var parameter = Expression.Parameter(typeof(T), \"x\");\n    var property = Expression.Property(parameter, sortColumn);\n    var lambda = Expression.Lambda&lt;Func&lt;T, object&gt;&gt;(Expression.Convert(property, typeof(object)), parameter);\n\n    return ascending\n        ? query.OrderBy(lambda).ToList()\n        : query.OrderByDescending(lambda).ToList();\n}\n\n// Kullan\u0131m\nvar sortedCustomers = SortData(context.Customers, \"Name\", true);\n</code></pre>"},{"location":"linq/performance-orderby/#5-birden-fazla-alan-ile-sralama","title":"5. Birden Fazla Alan ile S\u0131ralama","text":"<p>Birden fazla alan\u0131 s\u0131ralama kriteri olarak belirlemek i\u00e7in <code>ThenBy</code> ve <code>ThenByDescending</code> kullan\u0131labilir.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var sortedData = data\n    .OrderBy(x =&gt; x.LastName)\n    .ThenByDescending(x =&gt; x.FirstName)\n    .ToList();\n</code></pre> <p>Bu kod, \u00f6nce <code>LastName</code> alan\u0131na g\u00f6re s\u0131ralama yapar, ayn\u0131 de\u011ferlerde ise <code>FirstName</code> alan\u0131na g\u00f6re azalan s\u0131ralama yapar.</p>"},{"location":"linq/performance-orderby/#6-performans-testi","title":"6. Performans Testi","text":"<p>S\u0131ralama i\u015flemlerinin performans\u0131n\u0131 \u00f6l\u00e7mek i\u00e7in <code>Stopwatch</code> kullanabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var stopwatch = Stopwatch.StartNew();\n\nvar sortedData = data.OrderBy(x =&gt; x.Name).ToList();\n\nstopwatch.Stop();\nConsole.WriteLine($\"S\u0131ralama s\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n</code></pre>"},{"location":"linq/performance/","title":"Performans Optimizasyonu","text":"<p>Performans optimizasyonu, \u00f6zellikle b\u00fcy\u00fck \u00f6l\u00e7ekli uygulamalarda kaynak t\u00fcketimini azaltmak ve kullan\u0131c\u0131 deneyimini iyile\u015ftirmek i\u00e7in hayati \u00f6neme sahiptir. Yanl\u0131\u015f uygulamalar sistemi yava\u015flatabilir, hatta \u00e7\u00f6kmesine neden olabilir.</p>"},{"location":"linq/performance/#1-gereksiz-veri-getirme","title":"1. Gereksiz Veri Getirme","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz t\u00fcm s\u00fctunlar\u0131 sorguya dahil etmek.</p> <pre><code>var products = context.Products.ToList(); // T\u00fcm s\u00fctunlar getirilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sadece gerekli s\u00fctunlar\u0131 projekte edin.</p> <pre><code>var productNames = context.Products\n    .Select(p =&gt; new { p.Name, p.Price })\n    .ToList();\n</code></pre>"},{"location":"linq/performance/#2-eager-loading-ve-lazy-loadingi-yanls-yonetmek","title":"2. Eager Loading ve Lazy Loading\u2019i Yanl\u0131\u015f Y\u00f6netmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz <code>Include</code> kullan\u0131m\u0131yla fazla veri y\u00fcklemek.</p> <pre><code>var orders = context.Orders\n    .Include(o =&gt; o.Customer)\n    .Include(o =&gt; o.Products)\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130htiya\u00e7 duyulan veriler i\u00e7in <code>Include</code> kullan\u0131n.</p> <pre><code>var orders = context.Orders\n    .Include(o =&gt; o.Products)\n    .Where(o =&gt; o.OrderDate &gt; DateTime.UtcNow.AddMonths(-1))\n    .ToList();\n</code></pre>"},{"location":"linq/performance/#3-n1-sorgu-problemini-goz-ard-etmek","title":"3. N+1 Sorgu Problemini G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u0130lgili veriler i\u00e7in ayr\u0131 sorgular \u00e7al\u0131\u015ft\u0131rmak.</p> <pre><code>var customers = context.Customers.ToList();\nforeach (var customer in customers)\n{\n    var orders = context.Orders.Where(o =&gt; o.CustomerId == customer.Id).ToList();\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: \u0130lgili verileri tek bir sorguda getirin.</p> <pre><code>var customersWithOrders = context.Customers\n    .Include(c =&gt; c.Orders)\n    .ToList();\n</code></pre>"},{"location":"linq/performance/#4-filtrelemeyi-bellek-tarafnda-yapmak","title":"4. Filtrelemeyi Bellek Taraf\u0131nda Yapmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: T\u00fcm veriyi bellek i\u00e7inde filtrelemek.</p> <pre><code>var orders = context.Orders.ToList();\nvar recentOrders = orders.Where(o =&gt; o.OrderDate &gt; DateTime.UtcNow.AddMonths(-1));\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Filtrelemeyi veritaban\u0131 taraf\u0131nda yap\u0131n.</p> <pre><code>var recentOrders = context.Orders\n    .Where(o =&gt; o.OrderDate &gt; DateTime.UtcNow.AddMonths(-1))\n    .ToList();\n</code></pre>"},{"location":"linq/performance/#5-indeksleri-goz-ard-etmek","title":"5. Indeksleri G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Sorgular i\u00e7in uygun indekslerin olmamas\u0131.</p> <pre><code>SELECT * FROM Orders WHERE CustomerId = 123;\n-- Bu sorgu indeks yoksa yava\u015f \u00e7al\u0131\u015fabilir.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: S\u0131k kullan\u0131lan s\u00fctunlar i\u00e7in indeksler olu\u015fturun.</p> <pre><code>CREATE INDEX IX_Orders_CustomerId ON Orders (CustomerId);\n</code></pre>"},{"location":"linq/performance/#6-cok-fazla-izleme-tracking","title":"6. \u00c7ok Fazla \u0130zleme (Tracking)","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gereksiz izleme (tracking) ile kaynak t\u00fcketimini art\u0131rmak.</p> <pre><code>var products = context.Products.ToList(); // Tracking a\u00e7\u0131k\nproducts[0].Price = 10; // De\u011fi\u015fiklik takibi yapar\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sorgular\u0131 izleme olmadan \u00e7al\u0131\u015ft\u0131r\u0131n.</p> <pre><code>var products = context.Products.AsNoTracking().ToList();\n</code></pre>"},{"location":"linq/performance/#7-transaction-kullanmn-ihmal-etmek","title":"7. Transaction Kullan\u0131m\u0131n\u0131 \u0130hmal Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: \u00c7oklu veri taban\u0131 i\u015flemlerini transaction olmadan ger\u00e7ekle\u015ftirmek.</p> <pre><code>context.Products.Add(new Product { Name = \"Product1\" });\ncontext.SaveChanges();\ncontext.Orders.Add(new Order { ProductId = 1, Quantity = 10 });\ncontext.SaveChanges();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: T\u00fcm i\u015flemleri bir transaction i\u00e7inde y\u00fcr\u00fct\u00fcn.</p> <pre><code>using var transaction = context.Database.BeginTransaction();\ncontext.Products.Add(new Product { Name = \"Product1\" });\ncontext.SaveChanges();\ncontext.Orders.Add(new Order { ProductId = 1, Quantity = 10 });\ncontext.SaveChanges();\ntransaction.Commit();\n</code></pre>"},{"location":"linq/queryable-enumerable-differences/","title":"LINQ: IQueryable ve IEnumerable Aras\u0131ndaki Farklar","text":"<p>LINQ ile \u00e7al\u0131\u015f\u0131rken <code>IQueryable</code> ve <code>IEnumerable</code> aray\u00fczleri aras\u0131nda do\u011fru se\u00e7im yapmak, performans ve sorgu davran\u0131\u015f\u0131 a\u00e7\u0131s\u0131ndan kritik \u00f6neme sahiptir. Bu iki aray\u00fcz\u00fcn i\u015fleyi\u015fi ve kullan\u0131m alanlar\u0131 farkl\u0131d\u0131r.</p>"},{"location":"linq/queryable-enumerable-differences/#1-iqueryable-nedir","title":"1. IQueryable Nedir?","text":"<ul> <li>Tan\u0131m: Sorgunun veritaban\u0131 veya uzak bir kaynaktan y\u00fcr\u00fct\u00fclmesine olanak tan\u0131r.</li> <li>\u00c7al\u0131\u015fma Prensibi: Sorgular, veritaban\u0131na g\u00f6nderilir ve i\u015flenir (deferred execution).</li> </ul> <p>\u00d6rnek:</p> <pre><code>using var context = new AppDbContext();\n\nIQueryable&lt;Customer&gt; query = context.Customers.Where(c =&gt; c.IsActive);\nvar activeCustomers = query.ToList(); // Sorgu burada \u00e7al\u0131\u015f\u0131r\n</code></pre> <p><code>IQueryable</code> sayesinde sorgu, veritaban\u0131nda \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r ve sadece ihtiya\u00e7 duyulan veriler \u00e7ekilir.</p>"},{"location":"linq/queryable-enumerable-differences/#2-ienumerable-nedir","title":"2. IEnumerable Nedir?","text":"<ul> <li>Tan\u0131m: Veriyi belle\u011fe y\u00fckler ve bellekte i\u015fleme al\u0131r.</li> <li>\u00c7al\u0131\u015fma Prensibi: Sorgular, bellekte y\u00fcr\u00fct\u00fcl\u00fcr.</li> </ul> <p>\u00d6rnek:</p> <pre><code>IEnumerable&lt;Customer&gt; customers = context.Customers.ToList();\nvar activeCustomers = customers.Where(c =&gt; c.IsActive).ToList(); // Filtreleme bellekte yap\u0131l\u0131r\n</code></pre> <p><code>IEnumerable</code>, t\u00fcm veriyi belle\u011fe \u00e7eker ve filtreleme i\u015flemi bellek \u00fczerinde yap\u0131l\u0131r.</p>"},{"location":"linq/queryable-enumerable-differences/#3-yanls-ve-ideal-kullanm","title":"3. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/queryable-enumerable-differences/#yanls-kullanm-buyuk-veri-kumelerini-bellege-cekmek","title":"Yanl\u0131\u015f Kullan\u0131m: B\u00fcy\u00fck veri k\u00fcmelerini belle\u011fe \u00e7ekmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>var allCustomers = context.Customers.ToList(); // T\u00fcm veriyi belle\u011fe \u00e7eker\nvar activeCustomers = allCustomers.Where(c =&gt; c.IsActive).ToList();\n</code></pre> <p>Bu yakla\u015f\u0131m, b\u00fcy\u00fck veri k\u00fcmeleri i\u00e7in gereksiz bellek t\u00fcketimine yol a\u00e7ar.</p>"},{"location":"linq/queryable-enumerable-differences/#ideal-kullanm-sorgular-veritabannda-calstrmak","title":"\u0130deal Kullan\u0131m: Sorgular\u0131 veritaban\u0131nda \u00e7al\u0131\u015ft\u0131rmak","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>var activeCustomers = context.Customers\n    .Where(c =&gt; c.IsActive)\n    .ToList(); // Sorgu do\u011frudan veritaban\u0131nda \u00e7al\u0131\u015f\u0131r\n</code></pre> <p>Bu y\u00f6ntem, yaln\u0131zca gerekli veriyi \u00e7ekerek bellek t\u00fcketimini optimize eder.</p>"},{"location":"linq/queryable-enumerable-differences/#4-iqueryable-ve-ienumerable-farklar","title":"4. IQueryable ve IEnumerable Farklar\u0131","text":"\u00d6zellik IQueryable IEnumerable \u00c7al\u0131\u015fma Yeri Veritaban\u0131 veya uzak kaynak Bellek Performans Daha iyi (sorgu kayna\u011f\u0131nda \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r) Daha d\u00fc\u015f\u00fck (veri bellekte i\u015flenir) Kullan\u0131m Alan\u0131 B\u00fcy\u00fck veri k\u00fcmeleri, veritaban\u0131 sorgular\u0131 K\u00fc\u00e7\u00fck veri k\u00fcmeleri, bellek i\u015flemleri Lazy Execution Evet Evet Sorgu \u0130\u015fleme SQL gibi sorgu dilleri Bellek \u00fcst\u00fcnde LINQ"},{"location":"linq/queryable-enumerable-differences/#5-dinamik-sorgu-ornegi","title":"5. Dinamik Sorgu \u00d6rne\u011fi","text":"<p>\u2705 \u00d6rnek: Kullan\u0131c\u0131 giri\u015fine ba\u011fl\u0131 sorgu</p> <pre><code>public List&lt;Customer&gt; GetCustomers(bool onlyActive)\n{\n    using var context = new AppDbContext();\n\n    IQueryable&lt;Customer&gt; query = context.Customers;\n\n    if (onlyActive)\n    {\n        query = query.Where(c =&gt; c.IsActive);\n    }\n\n    return query.ToList();\n}\n</code></pre> <p>Bu y\u00f6ntem, sorgular\u0131 yaln\u0131zca ihtiya\u00e7 duyulan verilere g\u00f6re dinamik olarak optimize eder.</p>"},{"location":"linq/queryable-enumerable-differences/#6-performans-testi","title":"6. Performans Testi","text":"<p><code>IQueryable</code> ve <code>IEnumerable</code> aras\u0131ndaki performans fark\u0131n\u0131 test etmek i\u00e7in a\u015fa\u011f\u0131daki kodu kullanabilirsiniz:</p> <p>\u2705 Performans Testi:</p> <pre><code>var stopwatch = Stopwatch.StartNew();\n\n// IQueryable ile\nvar activeCustomersQuery = context.Customers.Where(c =&gt; c.IsActive).ToList();\nstopwatch.Stop();\nConsole.WriteLine($\"IQueryable S\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n\nstopwatch.Restart();\n\n// IEnumerable ile\nvar allCustomers = context.Customers.ToList();\nvar activeCustomersEnum = allCustomers.Where(c =&gt; c.IsActive).ToList();\nstopwatch.Stop();\nConsole.WriteLine($\"IEnumerable S\u00fcresi: {stopwatch.ElapsedMilliseconds} ms\");\n</code></pre>"},{"location":"linq/queryable-enumerable-differences/#7-hangi-durumda-hangisi-kullanlmal","title":"7. Hangi Durumda Hangisi Kullan\u0131lmal\u0131?","text":"Durum Tercih Edilen Aray\u00fcz Veritaban\u0131 i\u015flemleri IQueryable Bellekte k\u00fc\u00e7\u00fck veri k\u00fcmeleriyle \u00e7al\u0131\u015fma IEnumerable Dinamik sorgu olu\u015fturma IQueryable Performans kritik olan b\u00fcy\u00fck veri setleri IQueryable"},{"location":"linq/select-vs-selectmany/","title":"LINQ: Select ve SelectMany Farklar\u0131","text":"<p>LINQ\u2019da <code>Select</code> ve <code>SelectMany</code>, veri projeksiyonlar\u0131 yapmak i\u00e7in kullan\u0131lan g\u00fc\u00e7l\u00fc metotlard\u0131r. Ancak bu iki metot aras\u0131nda \u00f6nemli farklar bulunmaktad\u0131r. Do\u011fru metodu kullanmak, hem performans hem de kodun okunabilirli\u011fi a\u00e7\u0131s\u0131ndan kritik \u00f6neme sahiptir.</p>"},{"location":"linq/select-vs-selectmany/#1-select-nedir","title":"1. Select Nedir?","text":"<p><code>Select</code>, her bir eleman\u0131 bir projeksiyondan ge\u00e7irerek yeni bir koleksiyon olu\u015fturur. Bu metot, genellikle bir koleksiyondaki elemanlar\u0131 d\u00f6n\u00fc\u015ft\u00fcrmek veya belirli \u00f6zelliklerini se\u00e7mek i\u00e7in kullan\u0131l\u0131r.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var names = people.Select(p =&gt; p.Name).ToList();\n\nforeach (var name in names)\n{\n    Console.WriteLine(name);\n}\n</code></pre> <p>Bu \u00f6rnekte, <code>people</code> koleksiyonundaki <code>Name</code> \u00f6zellikleri al\u0131n\u0131r ve yeni bir koleksiyon olu\u015fturulur.</p>"},{"location":"linq/select-vs-selectmany/#2-selectmany-nedir","title":"2. SelectMany Nedir?","text":"<p><code>SelectMany</code>, her bir eleman\u0131n i\u00e7indeki koleksiyonlar\u0131 d\u00fczle\u015ftirerek tek bir koleksiyon haline getirir. Bu, i\u00e7 i\u00e7e koleksiyonlarla \u00e7al\u0131\u015f\u0131rken olduk\u00e7a kullan\u0131\u015fl\u0131d\u0131r.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var allSubjects = students.SelectMany(s =&gt; s.Subjects).ToList();\n\nforeach (var subject in allSubjects)\n{\n    Console.WriteLine(subject);\n}\n</code></pre> <p>Bu \u00f6rnekte, her bir \u00f6\u011frencinin <code>Subjects</code> koleksiyonu d\u00fczle\u015ftirilerek tek bir koleksiyon haline getirilir.</p>"},{"location":"linq/select-vs-selectmany/#3-yanls-ve-ideal-kullanm","title":"3. Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":""},{"location":"linq/select-vs-selectmany/#yanls-kullanm-select-ile-duzlestirme-yapmaya-calsmak","title":"Yanl\u0131\u015f Kullan\u0131m: Select ile d\u00fczle\u015ftirme yapmaya \u00e7al\u0131\u015fmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m:</p> <pre><code>var allSubjects = students.Select(s =&gt; s.Subjects).ToList();\n\nforeach (var subjectList in allSubjects)\n{\n    foreach (var subject in subjectList)\n    {\n        Console.WriteLine(subject);\n    }\n}\n</code></pre> <p>Bu y\u00f6ntem, her \u00f6\u011frencinin <code>Subjects</code> listesini ayr\u0131 ayr\u0131 i\u015fler ve gereksiz bir karma\u015f\u0131kl\u0131k olu\u015fturur.</p>"},{"location":"linq/select-vs-selectmany/#ideal-kullanm-selectmany-ile-duzlestirme","title":"\u0130deal Kullan\u0131m: SelectMany ile d\u00fczle\u015ftirme","text":"<p>\u2705 \u0130deal Kullan\u0131m:</p> <pre><code>var allSubjects = students.SelectMany(s =&gt; s.Subjects).ToList();\n\nforeach (var subject in allSubjects)\n{\n    Console.WriteLine(subject);\n}\n</code></pre> <p>Bu y\u00f6ntem, t\u00fcm <code>Subjects</code> koleksiyonlar\u0131n\u0131 tek bir listeye d\u00f6n\u00fc\u015ft\u00fcrerek daha verimli bir sonu\u00e7 sa\u011flar.</p>"},{"location":"linq/select-vs-selectmany/#4-select-ve-selectmany-farklar","title":"4. Select ve SelectMany Farklar\u0131","text":"\u00d6zellik Select SelectMany \u00c7\u0131kt\u0131 Koleksiyon D\u00fczle\u015ftirilmi\u015f Koleksiyon Kullan\u0131m Alan\u0131 Eleman projeksiyonu \u0130\u00e7 i\u00e7e koleksiyonlar\u0131 d\u00fczle\u015ftirme Performans Daha az karma\u015f\u0131kl\u0131k B\u00fcy\u00fck veri setlerinde avantajl\u0131"},{"location":"linq/select-vs-selectmany/#5-dinamik-kullanm","title":"5. Dinamik Kullan\u0131m","text":"<p>\u2705 \u00d6rnek: Dinamik projeksiyon olu\u015fturma</p> <pre><code>var subjectsByStudent = students\n    .Select(s =&gt; new { s.Name, Subjects = s.Subjects })\n    .ToList();\n\nforeach (var item in subjectsByStudent)\n{\n    Console.WriteLine($\"{item.Name}: {string.Join(\", \", item.Subjects)}\");\n}\n</code></pre>"},{"location":"linq/select-where-aggregate/","title":"Select, Where ve Aggregate","text":"<p>LINQ sorgular\u0131, koleksiyonlar ve veritaban\u0131 i\u015flemleri \u00fczerinde etkili bir \u015fekilde veri i\u015flemek i\u00e7in g\u00fc\u00e7l\u00fc bir ara\u00e7t\u0131r. Ancak, <code>Select</code>, <code>Where</code> ve <code>Aggregate</code> gibi LINQ y\u00f6ntemlerinin yanl\u0131\u015f kullan\u0131m\u0131 performans kayb\u0131na ve karma\u015f\u0131k kod yap\u0131s\u0131na yol a\u00e7abilir.</p>"},{"location":"linq/select-where-aggregate/#1-gereksiz-select-kullanm","title":"1. Gereksiz <code>Select</code> Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Gerekli olmayan veri projeksiyonlar\u0131 yapmak.</p> <pre><code>var productNames = context.Products\n    .Select(p =&gt; new { p.Name, p.Price })\n    .Select(p =&gt; p.Name)\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Gereksiz <code>Select</code> projeksiyonlar\u0131ndan ka\u00e7\u0131n\u0131n.</p> <pre><code>var productNames = context.Products\n    .Select(p =&gt; p.Name)\n    .ToList();\n</code></pre>"},{"location":"linq/select-where-aggregate/#2-where-ile-karmask-filtreler-yazmak","title":"2. <code>Where</code> ile Karma\u015f\u0131k Filtreler Yazmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>Where</code> i\u00e7inde karma\u015f\u0131k mant\u0131k kullanarak okunabilirli\u011fi azaltmak.</p> <pre><code>var expensiveProducts = context.Products\n    .Where(p =&gt; p.Price &gt; 100 &amp;&amp; p.Stock &gt; 0 &amp;&amp; p.Category == \"Electronics\")\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Filtreleri yard\u0131mc\u0131 metotlarla b\u00f6lerek okunabilirli\u011fi art\u0131r\u0131n.</p> <pre><code>var expensiveProducts = context.Products\n    .Where(IsExpensiveAndInStock)\n    .ToList();\n\nbool IsExpensiveAndInStock(Product product) =&gt;\n    product.Price &gt; 100 &amp;&amp; product.Stock &gt; 0 &amp;&amp; product.Category == \"Electronics\";\n</code></pre>"},{"location":"linq/select-where-aggregate/#3-aggregatei-yanls-kullanmak","title":"3. <code>Aggregate</code>\u2018i Yanl\u0131\u015f Kullanmak","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Basit toplam veya birle\u015ftirme i\u015flemleri i\u00e7in <code>Aggregate</code> kullanmak.</p> <pre><code>var totalStock = context.Products\n    .Select(p =&gt; p.Stock)\n    .Aggregate(0, (acc, stock) =&gt; acc + stock);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Basit i\u015flemler i\u00e7in uygun LINQ y\u00f6ntemlerini kullan\u0131n.</p> <pre><code>var totalStock = context.Products.Sum(p =&gt; p.Stock);\n</code></pre>"},{"location":"linq/select-where-aggregate/#4-performans-goz-ard-etmek","title":"4. Performans\u0131 G\u00f6z Ard\u0131 Etmek","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Filtreleri veritaban\u0131 yerine bellek i\u00e7inde yapmak.</p> <pre><code>var products = context.Products.ToList();\nvar expensiveProducts = products.Where(p =&gt; p.Price &gt; 100);\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Filtreleme i\u015flemlerini veritaban\u0131 taraf\u0131nda yap\u0131n.</p> <pre><code>var expensiveProducts = context.Products\n    .Where(p =&gt; p.Price &gt; 100)\n    .ToList();\n</code></pre>"},{"location":"linq/select-where-aggregate/#5-cok-asamal-sorgularn-karmasklastrlmas","title":"5. \u00c7ok A\u015famal\u0131 Sorgular\u0131n Karma\u015f\u0131kla\u015ft\u0131r\u0131lmas\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Birden fazla LINQ zinciri ile karma\u015f\u0131k sorgular yazmak.</p> <pre><code>var productData = context.Products\n    .Where(p =&gt; p.Price &gt; 100)\n    .Select(p =&gt; new { p.Name, p.Stock })\n    .Where(p =&gt; p.Stock &gt; 10)\n    .ToList();\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Sorgular\u0131 a\u00e7\u0131k ve tek bir zincir halinde yaz\u0131n.</p> <pre><code>var productData = context.Products\n    .Where(p =&gt; p.Price &gt; 100 &amp;&amp; p.Stock &gt; 10)\n    .Select(p =&gt; new { p.Name, p.Stock })\n    .ToList();\n</code></pre>"},{"location":"linq/select-where-aggregate/#6-hatal-first-ve-single-kullanm","title":"6. Hatal\u0131 <code>First</code> ve <code>Single</code> Kullan\u0131m\u0131","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: <code>First</code> veya <code>Single</code> kullanarak hata riski olu\u015fturmak.</p> <pre><code>var product = context.Products.Single(p =&gt; p.Id == 1); // Veri yoksa hata verir.\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: <code>FirstOrDefault</code> veya <code>SingleOrDefault</code> kullanarak g\u00fcvenli sorgulama yap\u0131n.</p> <pre><code>var product = context.Products.SingleOrDefault(p =&gt; p.Id == 1);\nif (product == null)\n{\n    Console.WriteLine(\"\u00dcr\u00fcn bulunamad\u0131.\");\n}\n</code></pre>"},{"location":"mediatr-cqrs/","title":"MediatR ve CQRS","text":"<p>MediatR ve CQRS (Command Query Responsibility Segregation) pattern\u2019\u0131, modern .NET uygulamalar\u0131nda yayg\u0131n olarak kullan\u0131lan g\u00fc\u00e7l\u00fc bir mimari yakla\u015f\u0131md\u0131r. Bu rehber, bu pattern\u2019lar\u0131n etkili kullan\u0131m\u0131na dair ipu\u00e7lar\u0131 ve best practice\u2019leri i\u00e7ermektedir.</p>"},{"location":"mediatr-cqrs/#icindekiler","title":"\u0130\u00e7indekiler","text":"<ul> <li>Temel Kavramlar</li> <li>Command Pattern</li> <li>Query Pattern</li> <li>Pipeline Behaviors</li> <li>Event Handling</li> <li>Validation</li> <li>Error Handling</li> <li>Testing</li> <li>Best Practices</li> </ul> <p>Her b\u00f6l\u00fcm, konunun detayl\u0131 bir \u015fekilde anlat\u0131m\u0131n\u0131 ve pratik \u00f6rneklerini i\u00e7ermektedir.</p>"},{"location":"mediatr-cqrs/#temel-kavramlar","title":"Temel Kavramlar","text":""},{"location":"mediatr-cqrs/#mediatr-nedir","title":"MediatR Nedir?","text":"<p>MediatR, in-process mesajla\u015fma i\u00e7in basit bir mediator pattern implementasyonudur. Request/response ve notification pattern\u2019lar\u0131n\u0131 destekler.</p>"},{"location":"mediatr-cqrs/#cqrs-nedir","title":"CQRS Nedir?","text":"<p>CQRS, veri okuma (Query) ve yazma (Command) i\u015flemlerini birbirinden ay\u0131ran bir pattern\u2019d\u0131r. Bu ayr\u0131m, uygulaman\u0131n \u00f6l\u00e7eklenebilirli\u011fini ve bak\u0131m\u0131n\u0131 kolayla\u015ft\u0131r\u0131r.</p>"},{"location":"mediatr-cqrs/#pratik-ipuclar","title":"Pratik \u0130pu\u00e7lar\u0131","text":""},{"location":"mediatr-cqrs/#1-command-ve-query-ayrm","title":"1. Command ve Query Ayr\u0131m\u0131","text":"<pre><code>// Command \u00f6rne\u011fi\npublic class CreateProductCommand : IRequest&lt;int&gt;\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n\n// Query \u00f6rne\u011fi\npublic class GetProductByIdQuery : IRequest&lt;ProductDto&gt;\n{\n    public int Id { get; set; }\n}\n</code></pre>"},{"location":"mediatr-cqrs/#2-pipeline-behavior-kullanm","title":"2. Pipeline Behavior Kullan\u0131m\u0131","text":"<pre><code>public class LoggingBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        // Request \u00f6ncesi loglama\n        var response = await next();\n        // Response sonras\u0131 loglama\n        return response;\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/#3-event-handling","title":"3. Event Handling","text":"<pre><code>public class ProductCreatedEvent : INotification\n{\n    public int ProductId { get; set; }\n}\n\npublic class ProductCreatedEventHandler : INotificationHandler&lt;ProductCreatedEvent&gt;\n{\n    public async Task Handle(ProductCreatedEvent notification, CancellationToken cancellationToken)\n    {\n        // Event handling logic\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Command ve Query S\u0131n\u0131flar\u0131    - Command\u2019lar immutable olmal\u0131    - Query\u2019ler sadece veri okumal\u0131    - Her command/query tek bir i\u015f yapmal\u0131</p> </li> <li> <p>Handler Organizasyonu    - Her handler tek bir sorumlulu\u011fa sahip olmal\u0131    - Business logic handler i\u00e7inde olmal\u0131    - Cross-cutting concern\u2019ler behavior\u2019lara ta\u015f\u0131nmal\u0131</p> </li> <li> <p>Validation    - FluentValidation kullan\u0131m\u0131 \u00f6nerilir    - Validation logic\u2019i behavior\u2019larda olmal\u0131</p> </li> <li> <p>Error Handling    - Global exception handling kullan\u0131lmal\u0131    - \u00d6zel exception tipleri tan\u0131mlanmal\u0131</p> </li> </ol>"},{"location":"mediatr-cqrs/#ornek-proje-yaps","title":"\u00d6rnek Proje Yap\u0131s\u0131","text":"<pre><code>Project/\n\u251c\u2500\u2500 Commands/\n\u2502   \u251c\u2500\u2500 CreateProduct/\n\u2502   \u2502   \u251c\u2500\u2500 CreateProductCommand.cs\n\u2502   \u2502   \u251c\u2500\u2500 CreateProductCommandHandler.cs\n\u2502   \u2502   \u2514\u2500\u2500 CreateProductCommandValidator.cs\n\u2502   \u2514\u2500\u2500 UpdateProduct/\n\u251c\u2500\u2500 Queries/\n\u2502   \u251c\u2500\u2500 GetProductById/\n\u2502   \u2502   \u251c\u2500\u2500 GetProductByIdQuery.cs\n\u2502   \u2502   \u2514\u2500\u2500 GetProductByIdQueryHandler.cs\n\u2502   \u2514\u2500\u2500 GetProducts/\n\u251c\u2500\u2500 Events/\n\u2502   \u251c\u2500\u2500 ProductCreated/\n\u2502   \u2502   \u251c\u2500\u2500 ProductCreatedEvent.cs\n\u2502   \u2502   \u2514\u2500\u2500 ProductCreatedEventHandler.cs\n\u2502   \u2514\u2500\u2500 ProductUpdated/\n\u2514\u2500\u2500 Behaviors/\n    \u251c\u2500\u2500 LoggingBehavior.cs\n    \u2514\u2500\u2500 ValidationBehavior.cs\n</code></pre>"},{"location":"mediatr-cqrs/01-basic-concepts/","title":"Temel Kavramlar","text":""},{"location":"mediatr-cqrs/01-basic-concepts/#mediatr-nedir","title":"MediatR Nedir?","text":"<p>MediatR, in-process mesajla\u015fma i\u00e7in basit bir mediator pattern implementasyonudur. Temel \u00f6zellikleri:</p> <ul> <li>Request/Response pattern\u2019\u0131</li> <li>Notification pattern\u2019\u0131</li> <li>Pipeline behavior\u2019lar</li> <li>Basit ve hafif yap\u0131</li> </ul>"},{"location":"mediatr-cqrs/01-basic-concepts/#mediatrn-avantajlar","title":"MediatR\u2019\u0131n Avantajlar\u0131","text":"<ol> <li>Loose Coupling: S\u0131n\u0131flar aras\u0131 ba\u011f\u0131ml\u0131l\u0131klar\u0131 azalt\u0131r</li> <li>Single Responsibility: Her handler tek bir i\u015f yapar</li> <li>Testability: Test edilebilirli\u011fi art\u0131r\u0131r</li> <li>Cross-Cutting Concerns: Logging, validation gibi i\u015flemleri merkezi olarak y\u00f6netir</li> </ol>"},{"location":"mediatr-cqrs/01-basic-concepts/#cqrs-nedir","title":"CQRS Nedir?","text":"<p>CQRS (Command Query Responsibility Segregation), veri okuma (Query) ve yazma (Command) i\u015flemlerini birbirinden ay\u0131ran bir pattern\u2019d\u0131r.</p>"},{"location":"mediatr-cqrs/01-basic-concepts/#cqrsin-avantajlar","title":"CQRS\u2019in Avantajlar\u0131","text":"<ol> <li>\u00d6l\u00e7eklenebilirlik: Okuma ve yazma i\u015flemleri ayr\u0131 ayr\u0131 \u00f6l\u00e7eklendirilebilir</li> <li>Optimizasyon: Her i\u015flem i\u00e7in \u00f6zel optimizasyonlar yap\u0131labilir</li> <li>Bak\u0131m Kolayl\u0131\u011f\u0131: Kod daha organize ve bak\u0131m\u0131 daha kolay</li> <li>Performans: Okuma ve yazma i\u015flemleri i\u00e7in farkl\u0131 veri modelleri kullan\u0131labilir</li> </ol>"},{"location":"mediatr-cqrs/01-basic-concepts/#mediatr-ve-cqrs-birlikte-kullanm","title":"MediatR ve CQRS Birlikte Kullan\u0131m\u0131","text":"<p>MediatR ve CQRS birlikte kullan\u0131ld\u0131\u011f\u0131nda:</p> <ol> <li>Command\u2019lar: Veri de\u011fi\u015ftirme i\u015flemleri i\u00e7in</li> <li>Query\u2019ler: Veri okuma i\u015flemleri i\u00e7in</li> <li>Event\u2019ler: Domain event\u2019leri i\u00e7in</li> <li>Behavior\u2019lar: Cross-cutting concern\u2019ler i\u00e7in</li> </ol> <p>kullan\u0131l\u0131r.</p>"},{"location":"mediatr-cqrs/01-basic-concepts/#ornek-kullanm","title":"\u00d6rnek Kullan\u0131m","text":"<pre><code>// Command \u00f6rne\u011fi\npublic class CreateProductCommand : IRequest&lt;int&gt;\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n\n// Query \u00f6rne\u011fi\npublic class GetProductByIdQuery : IRequest&lt;ProductDto&gt;\n{\n    public int Id { get; set; }\n}\n\n// Event \u00f6rne\u011fi\npublic class ProductCreatedEvent : INotification\n{\n    public int ProductId { get; set; }\n}\n</code></pre>"},{"location":"mediatr-cqrs/01-basic-concepts/#temel-bilesenler","title":"Temel Bile\u015fenler","text":"<ol> <li>IRequest: Command ve Query\u2019ler i\u00e7in temel interface <li>IRequestHandler: Command ve Query handler\u2019lar\u0131 i\u00e7in interface <li>INotification: Event\u2019ler i\u00e7in interface</li> <li>INotificationHandler: Event handler\u2019lar\u0131 i\u00e7in interface <li>IPipelineBehavior: Pipeline behavior\u2019lar i\u00e7in interface"},{"location":"mediatr-cqrs/02-command-pattern/","title":"Command Pattern","text":"<p>Command Pattern, veri de\u011fi\u015ftirme i\u015flemlerini temsil eden bir pattern\u2019d\u0131r. MediatR\u2019da command\u2019lar <code>IRequest&lt;T&gt;</code> interface\u2019ini implemente eder.</p>"},{"location":"mediatr-cqrs/02-command-pattern/#command-ozellikleri","title":"Command \u00d6zellikleri","text":"<ol> <li>Immutable: Command\u2019lar immutable olmal\u0131d\u0131r</li> <li>Tek Sorumluluk: Her command tek bir i\u015f yapmal\u0131d\u0131r</li> <li>Validation: Command\u2019lar validate edilebilir olmal\u0131d\u0131r</li> <li>Idempotent: M\u00fcmk\u00fcnse idempotent olmal\u0131d\u0131r</li> </ol>"},{"location":"mediatr-cqrs/02-command-pattern/#command-ornekleri","title":"Command \u00d6rnekleri","text":""},{"location":"mediatr-cqrs/02-command-pattern/#basit-command","title":"Basit Command","text":"<pre><code>public class CreateProductCommand : IRequest&lt;int&gt;\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n\npublic class CreateProductCommandHandler : IRequestHandler&lt;CreateProductCommand, int&gt;\n{\n    private readonly IProductRepository _repository;\n\n    public CreateProductCommandHandler(IProductRepository repository)\n    {\n        _repository = repository;\n    }\n\n    public async Task&lt;int&gt; Handle(CreateProductCommand request, CancellationToken cancellationToken)\n    {\n        var product = new Product\n        {\n            Name = request.Name,\n            Price = request.Price\n        };\n\n        await _repository.AddAsync(product);\n        return product.Id;\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/02-command-pattern/#complex-command","title":"Complex Command","text":"<pre><code>public class UpdateProductCommand : IRequest\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public string Description { get; set; }\n}\n\npublic class UpdateProductCommandHandler : IRequestHandler&lt;UpdateProductCommand&gt;\n{\n    private readonly IProductRepository _repository;\n    private readonly IUnitOfWork _unitOfWork;\n\n    public UpdateProductCommandHandler(\n        IProductRepository repository,\n        IUnitOfWork unitOfWork)\n    {\n        _repository = repository;\n        _unitOfWork = unitOfWork;\n    }\n\n    public async Task&lt;Unit&gt; Handle(UpdateProductCommand request, CancellationToken cancellationToken)\n    {\n        var product = await _repository.GetByIdAsync(request.Id);\n\n        product.Name = request.Name;\n        product.Price = request.Price;\n        product.Description = request.Description;\n\n        await _repository.UpdateAsync(product);\n        await _unitOfWork.SaveChangesAsync();\n\n        return Unit.Value;\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/02-command-pattern/#command-best-practices","title":"Command Best Practices","text":"<ol> <li> <p>Command Validation    - FluentValidation kullan\u0131n    - Validation logic\u2019i behavior\u2019larda olmal\u0131</p> </li> <li> <p>Command Handler Organization    - Her handler tek bir repository kullanmal\u0131    - Business logic handler i\u00e7inde olmal\u0131    - Cross-cutting concern\u2019ler behavior\u2019lara ta\u015f\u0131nmal\u0131</p> </li> <li> <p>Error Handling    - \u00d6zel exception tipleri kullan\u0131n    - Global exception handling kullan\u0131n</p> </li> <li> <p>Testing    - Handler\u2019lar unit test edilmeli    - Integration testler yaz\u0131lmal\u0131</p> </li> </ol>"},{"location":"mediatr-cqrs/02-command-pattern/#command-pipeline","title":"Command Pipeline","text":"<p>Command\u2019lar pipeline \u00fczerinden ge\u00e7er:</p> <ol> <li>Validation</li> <li>Authorization</li> <li>Logging</li> <li>Transaction</li> <li>Handler</li> <li>Event Publishing</li> </ol> <pre><code>public class CommandPipelineBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        // Pre-processing\n        var response = await next();\n        // Post-processing\n        return response;\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/03-query-pattern/","title":"Query Pattern","text":"<p>Query Pattern, veri okuma i\u015flemlerini temsil eden bir pattern\u2019d\u0131r. MediatR\u2019da query\u2019ler de <code>IRequest&lt;T&gt;</code> interface\u2019ini implemente eder.</p>"},{"location":"mediatr-cqrs/03-query-pattern/#query-ozellikleri","title":"Query \u00d6zellikleri","text":"<ol> <li>Read-Only: Query\u2019ler sadece veri okumal\u0131d\u0131r</li> <li>Tek Sorumluluk: Her query tek bir veri seti d\u00f6nmelidir</li> <li>Performans: Query\u2019ler optimize edilmi\u015f olmal\u0131d\u0131r</li> <li>Caching: M\u00fcmk\u00fcnse caching kullan\u0131lmal\u0131d\u0131r</li> </ol>"},{"location":"mediatr-cqrs/03-query-pattern/#query-ornekleri","title":"Query \u00d6rnekleri","text":""},{"location":"mediatr-cqrs/03-query-pattern/#basit-query","title":"Basit Query","text":"<pre><code>public class GetProductByIdQuery : IRequest&lt;ProductDto&gt;\n{\n    public int Id { get; set; }\n}\n\npublic class GetProductByIdQueryHandler : IRequestHandler&lt;GetProductByIdQuery, ProductDto&gt;\n{\n    private readonly IProductRepository _repository;\n\n    public GetProductByIdQueryHandler(IProductRepository repository)\n    {\n        _repository = repository;\n    }\n\n    public async Task&lt;ProductDto&gt; Handle(GetProductByIdQuery request, CancellationToken cancellationToken)\n    {\n        var product = await _repository.GetByIdAsync(request.Id);\n        return new ProductDto\n        {\n            Id = product.Id,\n            Name = product.Name,\n            Price = product.Price\n        };\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/03-query-pattern/#complex-query","title":"Complex Query","text":"<pre><code>public class GetProductsQuery : IRequest&lt;PagedList&lt;ProductDto&gt;&gt;\n{\n    public string SearchTerm { get; set; }\n    public int PageNumber { get; set; } = 1;\n    public int PageSize { get; set; } = 10;\n    public string SortBy { get; set; }\n    public bool SortDescending { get; set; }\n}\n\npublic class GetProductsQueryHandler : IRequestHandler&lt;GetProductsQuery, PagedList&lt;ProductDto&gt;&gt;\n{\n    private readonly IProductRepository _repository;\n\n    public GetProductsQueryHandler(IProductRepository repository)\n    {\n        _repository = repository;\n    }\n\n    public async Task&lt;PagedList&lt;ProductDto&gt;&gt; Handle(GetProductsQuery request, CancellationToken cancellationToken)\n    {\n        var query = _repository.GetAll();\n\n        if (!string.IsNullOrWhiteSpace(request.SearchTerm))\n        {\n            query = query.Where(p =&gt; p.Name.Contains(request.SearchTerm));\n        }\n\n        query = request.SortDescending\n            ? query.OrderByDescending(p =&gt; EF.Property&lt;object&gt;(p, request.SortBy))\n            : query.OrderBy(p =&gt; EF.Property&lt;object&gt;(p, request.SortBy));\n\n        var totalCount = await query.CountAsync();\n        var items = await query\n            .Skip((request.PageNumber - 1) * request.PageSize)\n            .Take(request.PageSize)\n            .Select(p =&gt; new ProductDto\n            {\n                Id = p.Id,\n                Name = p.Name,\n                Price = p.Price\n            })\n            .ToListAsync();\n\n        return new PagedList&lt;ProductDto&gt;(items, totalCount, request.PageNumber, request.PageSize);\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/03-query-pattern/#query-best-practices","title":"Query Best Practices","text":"<ol> <li> <p>Query Optimization    - Select sadece ihtiya\u00e7 duyulan alanlar\u0131    - Include\u2019lar\u0131 dikkatli kullan\u0131n    - Index\u2019leri do\u011fru kullan\u0131n</p> </li> <li> <p>Query Handler Organization    - Repository pattern kullan\u0131n    - DTO\u2019lar\u0131 kullan\u0131n    - Mapping i\u015flemlerini otomatize edin</p> </li> <li> <p>Caching    - Query sonu\u00e7lar\u0131n\u0131 cache\u2019leyin    - Cache invalidation stratejisi belirleyin    - Distributed cache kullan\u0131n</p> </li> <li> <p>Testing    - Query\u2019leri unit test edin    - Integration testler yaz\u0131n    - Performance testleri yap\u0131n</p> </li> </ol>"},{"location":"mediatr-cqrs/03-query-pattern/#query-pipeline","title":"Query Pipeline","text":"<p>Query\u2019ler pipeline \u00fczerinden ge\u00e7er:</p> <ol> <li>Caching</li> <li>Validation</li> <li>Authorization</li> <li>Logging</li> <li>Handler</li> </ol> <pre><code>public class QueryPipelineBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    private readonly ICacheService _cache;\n\n    public QueryPipelineBehavior(ICacheService cache)\n    {\n        _cache = cache;\n    }\n\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        var cacheKey = $\"{typeof(TRequest).Name}-{request.GetHashCode()}\";\n\n        var cachedResponse = await _cache.GetAsync&lt;TResponse&gt;(cacheKey);\n        if (cachedResponse != null)\n        {\n            return cachedResponse;\n        }\n\n        var response = await next();\n        await _cache.SetAsync(cacheKey, response);\n\n        return response;\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/04-pipeline-behaviors/","title":"Pipeline Behaviors","text":"<p>Pipeline Behaviors, MediatR pipeline\u2019\u0131nda request\u2019lerin i\u015flenmesi s\u0131ras\u0131nda \u00e7al\u0131\u015fan middleware\u2019lerdir. Cross-cutting concern\u2019ler i\u00e7in idealdir.</p>"},{"location":"mediatr-cqrs/04-pipeline-behaviors/#behavior-ozellikleri","title":"Behavior \u00d6zellikleri","text":"<ol> <li>Pre-Processing: Request handler\u2019dan \u00f6nce \u00e7al\u0131\u015f\u0131r</li> <li>Post-Processing: Request handler\u2019dan sonra \u00e7al\u0131\u015f\u0131r</li> <li>Exception Handling: Exception\u2019lar\u0131 yakalayabilir</li> <li>Response Manipulation: Response\u2019lar\u0131 de\u011fi\u015ftirebilir</li> </ol>"},{"location":"mediatr-cqrs/04-pipeline-behaviors/#yaygn-behavior-ornekleri","title":"Yayg\u0131n Behavior \u00d6rnekleri","text":""},{"location":"mediatr-cqrs/04-pipeline-behaviors/#logging-behavior","title":"Logging Behavior","text":"<pre><code>public class LoggingBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    private readonly ILogger&lt;LoggingBehavior&lt;TRequest, TResponse&gt;&gt; _logger;\n\n    public LoggingBehavior(ILogger&lt;LoggingBehavior&lt;TRequest, TResponse&gt;&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        _logger.LogInformation(\"Handling {RequestName}\", typeof(TRequest).Name);\n\n        var response = await next();\n\n        _logger.LogInformation(\"Handled {RequestName}\", typeof(TRequest).Name);\n\n        return response;\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/04-pipeline-behaviors/#validation-behavior","title":"Validation Behavior","text":"<pre><code>public class ValidationBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    private readonly IEnumerable&lt;IValidator&lt;TRequest&gt;&gt; _validators;\n\n    public ValidationBehavior(IEnumerable&lt;IValidator&lt;TRequest&gt;&gt; validators)\n    {\n        _validators = validators;\n    }\n\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        var context = new ValidationContext&lt;TRequest&gt;(request);\n\n        var failures = _validators\n            .Select(v =&gt; v.Validate(context))\n            .SelectMany(result =&gt; result.Errors)\n            .Where(f =&gt; f != null)\n            .ToList();\n\n        if (failures.Any())\n        {\n            throw new ValidationException(failures);\n        }\n\n        return await next();\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/04-pipeline-behaviors/#transaction-behavior","title":"Transaction Behavior","text":"<pre><code>public class TransactionBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    private readonly IUnitOfWork _unitOfWork;\n\n    public TransactionBehavior(IUnitOfWork unitOfWork)\n    {\n        _unitOfWork = unitOfWork;\n    }\n\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        await _unitOfWork.BeginTransactionAsync();\n\n        try\n        {\n            var response = await next();\n            await _unitOfWork.CommitTransactionAsync();\n            return response;\n        }\n        catch\n        {\n            await _unitOfWork.RollbackTransactionAsync();\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/04-pipeline-behaviors/#performance-behavior","title":"Performance Behavior","text":"<pre><code>public class PerformanceBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    private readonly ILogger&lt;PerformanceBehavior&lt;TRequest, TResponse&gt;&gt; _logger;\n    private readonly Stopwatch _timer;\n\n    public PerformanceBehavior(ILogger&lt;PerformanceBehavior&lt;TRequest, TResponse&gt;&gt; logger)\n    {\n        _logger = logger;\n        _timer = new Stopwatch();\n    }\n\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        _timer.Start();\n\n        var response = await next();\n\n        _timer.Stop();\n\n        var elapsedMilliseconds = _timer.ElapsedMilliseconds;\n\n        if (elapsedMilliseconds &gt; 500)\n        {\n            _logger.LogWarning(\n                \"Long Running Request: {RequestName} ({ElapsedMilliseconds} milliseconds)\",\n                typeof(TRequest).Name,\n                elapsedMilliseconds);\n        }\n\n        return response;\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/04-pipeline-behaviors/#behavior-best-practices","title":"Behavior Best Practices","text":"<ol> <li> <p>Behavior S\u0131ralamas\u0131    - Validation    - Authorization    - Logging    - Transaction    - Caching    - Performance</p> </li> <li> <p>Error Handling    - Her behavior kendi exception\u2019lar\u0131n\u0131 yakalamal\u0131    - Global exception handling kullan\u0131lmal\u0131</p> </li> <li> <p>Testing    - Behavior\u2019lar unit test edilmeli    - Integration testler yaz\u0131lmal\u0131</p> </li> <li> <p>Performance    - Behavior\u2019lar hafif olmal\u0131    - Gereksiz i\u015flemlerden ka\u00e7\u0131n\u0131lmal\u0131</p> </li> </ol>"},{"location":"mediatr-cqrs/04-pipeline-behaviors/#behavior-registration","title":"Behavior Registration","text":"<pre><code>services.AddMediatR(cfg =&gt; {\n    cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly());\n    cfg.AddBehavior(typeof(ValidationBehavior&lt;,&gt;));\n    cfg.AddBehavior(typeof(LoggingBehavior&lt;,&gt;));\n    cfg.AddBehavior(typeof(TransactionBehavior&lt;,&gt;));\n    cfg.AddBehavior(typeof(PerformanceBehavior&lt;,&gt;));\n});\n</code></pre>"},{"location":"mediatr-cqrs/05-event-handling/","title":"Event Handling","text":"<p>Event Handling, MediatR\u2019da domain event\u2019leri y\u00f6netmek i\u00e7in kullan\u0131lan bir pattern\u2019d\u0131r. Event\u2019ler <code>INotification</code> interface\u2019ini implemente eder.</p>"},{"location":"mediatr-cqrs/05-event-handling/#event-ozellikleri","title":"Event \u00d6zellikleri","text":"<ol> <li>Immutable: Event\u2019ler immutable olmal\u0131d\u0131r</li> <li>Past Tense: Event isimleri ge\u00e7mi\u015f zaman kullanmal\u0131d\u0131r</li> <li>Domain Specific: Event\u2019ler domain\u2019e \u00f6zg\u00fc olmal\u0131d\u0131r</li> <li>Idempotent: M\u00fcmk\u00fcnse idempotent olmal\u0131d\u0131r</li> </ol>"},{"location":"mediatr-cqrs/05-event-handling/#event-ornekleri","title":"Event \u00d6rnekleri","text":""},{"location":"mediatr-cqrs/05-event-handling/#basit-event","title":"Basit Event","text":"<pre><code>public class ProductCreatedEvent : INotification\n{\n    public int ProductId { get; }\n    public string Name { get; }\n    public decimal Price { get; }\n\n    public ProductCreatedEvent(int productId, string name, decimal price)\n    {\n        ProductId = productId;\n        Name = name;\n        Price = price;\n    }\n}\n\npublic class ProductCreatedEventHandler : INotificationHandler&lt;ProductCreatedEvent&gt;\n{\n    private readonly IEmailService _emailService;\n    private readonly ILogger&lt;ProductCreatedEventHandler&gt; _logger;\n\n    public ProductCreatedEventHandler(\n        IEmailService emailService,\n        ILogger&lt;ProductCreatedEventHandler&gt; logger)\n    {\n        _emailService = emailService;\n        _logger = logger;\n    }\n\n    public async Task Handle(ProductCreatedEvent notification, CancellationToken cancellationToken)\n    {\n        _logger.LogInformation(\"Product created: {ProductId}\", notification.ProductId);\n\n        await _emailService.SendProductCreatedEmail(\n            notification.ProductId,\n            notification.Name,\n            notification.Price);\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/05-event-handling/#complex-event","title":"Complex Event","text":"<pre><code>public class OrderPlacedEvent : INotification\n{\n    public int OrderId { get; }\n    public string CustomerEmail { get; }\n    public List&lt;OrderItem&gt; Items { get; }\n    public decimal TotalAmount { get; }\n\n    public OrderPlacedEvent(\n        int orderId,\n        string customerEmail,\n        List&lt;OrderItem&gt; items,\n        decimal totalAmount)\n    {\n        OrderId = orderId;\n        CustomerEmail = customerEmail;\n        Items = items;\n        TotalAmount = totalAmount;\n    }\n}\n\npublic class OrderPlacedEventHandler : INotificationHandler&lt;OrderPlacedEvent&gt;\n{\n    private readonly IEmailService _emailService;\n    private readonly IInventoryService _inventoryService;\n    private readonly ILogger&lt;OrderPlacedEventHandler&gt; _logger;\n\n    public OrderPlacedEventHandler(\n        IEmailService emailService,\n        IInventoryService inventoryService,\n        ILogger&lt;OrderPlacedEventHandler&gt; logger)\n    {\n        _emailService = emailService;\n        _inventoryService = inventoryService;\n        _logger = logger;\n    }\n\n    public async Task Handle(OrderPlacedEvent notification, CancellationToken cancellationToken)\n    {\n        _logger.LogInformation(\"Order placed: {OrderId}\", notification.OrderId);\n\n        // Send confirmation email\n        await _emailService.SendOrderConfirmationEmail(\n            notification.OrderId,\n            notification.CustomerEmail,\n            notification.Items,\n            notification.TotalAmount);\n\n        // Update inventory\n        await _inventoryService.UpdateInventory(notification.Items);\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/05-event-handling/#event-best-practices","title":"Event Best Practices","text":"<ol> <li> <p>Event Publishing    - Event\u2019leri handler i\u00e7inde publish edin    - Transaction i\u00e7inde publish edin    - Exception durumunda rollback yap\u0131n</p> </li> <li> <p>Event Handler Organization    - Her handler tek bir i\u015f yapmal\u0131    - Handler\u2019lar ba\u011f\u0131ms\u0131z olmal\u0131    - Cross-cutting concern\u2019ler behavior\u2019lara ta\u015f\u0131nmal\u0131</p> </li> <li> <p>Error Handling    - Her handler kendi exception\u2019lar\u0131n\u0131 yakalamal\u0131    - Global exception handling kullan\u0131lmal\u0131    - Retry mekanizmas\u0131 kullan\u0131lmal\u0131</p> </li> <li> <p>Testing    - Handler\u2019lar unit test edilmeli    - Integration testler yaz\u0131lmal\u0131    - Event flow test edilmeli</p> </li> </ol>"},{"location":"mediatr-cqrs/05-event-handling/#event-pipeline","title":"Event Pipeline","text":"<p>Event\u2019ler pipeline \u00fczerinden ge\u00e7er:</p> <ol> <li>Validation</li> <li>Logging</li> <li>Handler</li> <li>Retry</li> </ol> <pre><code>public class EventPipelineBehavior&lt;TNotification&gt; : IPipelineBehavior&lt;TNotification, Unit&gt;\n    where TNotification : INotification\n{\n    private readonly ILogger&lt;EventPipelineBehavior&lt;TNotification&gt;&gt; _logger;\n\n    public EventPipelineBehavior(ILogger&lt;EventPipelineBehavior&lt;TNotification&gt;&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task&lt;Unit&gt; Handle(\n        TNotification notification,\n        NotificationHandlerDelegate next,\n        CancellationToken cancellationToken)\n    {\n        try\n        {\n            await next();\n            return Unit.Value;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error handling notification {NotificationName}\", typeof(TNotification).Name);\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/05-event-handling/#event-registration","title":"Event Registration","text":"<pre><code>services.AddMediatR(cfg =&gt; {\n    cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly());\n    cfg.AddNotificationHandler(typeof(ProductCreatedEventHandler));\n    cfg.AddNotificationHandler(typeof(OrderPlacedEventHandler));\n});\n</code></pre>"},{"location":"mediatr-cqrs/06-validation/","title":"Validation","text":"<p>Validation, MediatR\u2019da request\u2019lerin do\u011frulu\u011funu kontrol etmek i\u00e7in kullan\u0131lan bir mekanizmad\u0131r. FluentValidation k\u00fct\u00fcphanesi ile entegre \u00e7al\u0131\u015f\u0131r.</p>"},{"location":"mediatr-cqrs/06-validation/#validation-ozellikleri","title":"Validation \u00d6zellikleri","text":"<ol> <li>Request Validation: Command ve Query\u2019lerin do\u011frulu\u011funu kontrol eder</li> <li>Custom Validation: \u00d6zel validation kurallar\u0131 tan\u0131mlanabilir</li> <li>Cross-Cutting: Validation logic\u2019i merkezi olarak y\u00f6netilir</li> <li>Error Handling: Validation hatalar\u0131 \u00f6zel exception\u2019lar ile y\u00f6netilir</li> </ol>"},{"location":"mediatr-cqrs/06-validation/#validation-ornekleri","title":"Validation \u00d6rnekleri","text":""},{"location":"mediatr-cqrs/06-validation/#command-validation","title":"Command Validation","text":"<pre><code>public class CreateProductCommandValidator : AbstractValidator&lt;CreateProductCommand&gt;\n{\n    public CreateProductCommandValidator()\n    {\n        RuleFor(x =&gt; x.Name)\n            .NotEmpty()\n            .MaximumLength(100);\n\n        RuleFor(x =&gt; x.Price)\n            .GreaterThan(0);\n\n        RuleFor(x =&gt; x.Description)\n            .MaximumLength(500);\n    }\n}\n\npublic class CreateProductCommand : IRequest&lt;int&gt;\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public string Description { get; set; }\n}\n</code></pre>"},{"location":"mediatr-cqrs/06-validation/#query-validation","title":"Query Validation","text":"<pre><code>public class GetProductsQueryValidator : AbstractValidator&lt;GetProductsQuery&gt;\n{\n    public GetProductsQueryValidator()\n    {\n        RuleFor(x =&gt; x.PageNumber)\n            .GreaterThan(0);\n\n        RuleFor(x =&gt; x.PageSize)\n            .GreaterThan(0)\n            .LessThanOrEqualTo(100);\n\n        RuleFor(x =&gt; x.SortBy)\n            .Must(BeAValidSortField)\n            .When(x =&gt; !string.IsNullOrEmpty(x.SortBy));\n    }\n\n    private bool BeAValidSortField(string sortBy)\n    {\n        var validFields = new[] { \"name\", \"price\", \"createdDate\" };\n        return validFields.Contains(sortBy.ToLower());\n    }\n}\n\npublic class GetProductsQuery : IRequest&lt;PagedList&lt;ProductDto&gt;&gt;\n{\n    public int PageNumber { get; set; } = 1;\n    public int PageSize { get; set; } = 10;\n    public string SortBy { get; set; }\n    public bool SortDescending { get; set; }\n}\n</code></pre>"},{"location":"mediatr-cqrs/06-validation/#custom-validation","title":"Custom Validation","text":"<pre><code>public class UniqueProductNameValidator : AbstractValidator&lt;CreateProductCommand&gt;\n{\n    private readonly IProductRepository _repository;\n\n    public UniqueProductNameValidator(IProductRepository repository)\n    {\n        _repository = repository;\n\n        RuleFor(x =&gt; x.Name)\n            .MustAsync(BeUniqueName)\n            .WithMessage(\"Product name must be unique\");\n    }\n\n    private async Task&lt;bool&gt; BeUniqueName(string name, CancellationToken cancellationToken)\n    {\n        return !await _repository.ExistsAsync(x =&gt; x.Name == name);\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/06-validation/#validation-best-practices","title":"Validation Best Practices","text":"<ol> <li> <p>Validation Rules    - Her request i\u00e7in ayr\u0131 validator s\u0131n\u0131f\u0131    - Validation kurallar\u0131 a\u00e7\u0131k ve anla\u015f\u0131l\u0131r olmal\u0131    - Custom validation kurallar\u0131 kullan\u0131lmal\u0131</p> </li> <li> <p>Error Messages    - Hata mesajlar\u0131 a\u00e7\u0131klay\u0131c\u0131 olmal\u0131    - \u00c7oklu dil deste\u011fi olmal\u0131    - Hata kodlar\u0131 kullan\u0131lmal\u0131</p> </li> <li> <p>Performance    - Validation kurallar\u0131 optimize edilmeli    - Gereksiz validation\u2019lardan ka\u00e7\u0131n\u0131lmal\u0131    - Async validation kullan\u0131lmal\u0131</p> </li> <li> <p>Testing    - Validator\u2019lar unit test edilmeli    - Edge case\u2019ler test edilmeli    - Custom validation\u2019lar test edilmeli</p> </li> </ol>"},{"location":"mediatr-cqrs/06-validation/#validation-pipeline","title":"Validation Pipeline","text":"<p>Validation pipeline \u00fczerinden ge\u00e7er:</p> <ol> <li>Rule Definition</li> <li>Rule Execution</li> <li>Error Collection</li> <li>Exception Throwing</li> </ol> <pre><code>public class ValidationBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    private readonly IEnumerable&lt;IValidator&lt;TRequest&gt;&gt; _validators;\n\n    public ValidationBehavior(IEnumerable&lt;IValidator&lt;TRequest&gt;&gt; validators)\n    {\n        _validators = validators;\n    }\n\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        var context = new ValidationContext&lt;TRequest&gt;(request);\n\n        var failures = _validators\n            .Select(v =&gt; v.Validate(context))\n            .SelectMany(result =&gt; result.Errors)\n            .Where(f =&gt; f != null)\n            .ToList();\n\n        if (failures.Any())\n        {\n            throw new ValidationException(failures);\n        }\n\n        return await next();\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/06-validation/#validation-registration","title":"Validation Registration","text":"<pre><code>services.AddMediatR(cfg =&gt; {\n    cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly());\n    cfg.AddBehavior(typeof(ValidationBehavior&lt;,&gt;));\n});\n\nservices.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());\n</code></pre>"},{"location":"mediatr-cqrs/07-error-handling/","title":"Error Handling","text":"<p>Error Handling, MediatR\u2019da exception\u2019lar\u0131 y\u00f6netmek i\u00e7in kullan\u0131lan bir mekanizmad\u0131r. Global exception handling ve \u00f6zel exception tipleri kullan\u0131l\u0131r.</p>"},{"location":"mediatr-cqrs/07-error-handling/#error-handling-ozellikleri","title":"Error Handling \u00d6zellikleri","text":"<ol> <li>Global Exception Handling: T\u00fcm exception\u2019lar merkezi olarak y\u00f6netilir</li> <li>Custom Exception Types: \u00d6zel exception tipleri tan\u0131mlan\u0131r</li> <li>Error Response: Hata durumunda \u00f6zel response\u2019lar d\u00f6n\u00fcl\u00fcr</li> <li>Logging: Hatalar loglan\u0131r</li> </ol>"},{"location":"mediatr-cqrs/07-error-handling/#exception-tipleri","title":"Exception Tipleri","text":""},{"location":"mediatr-cqrs/07-error-handling/#custom-exceptions","title":"Custom Exceptions","text":"<pre><code>public class ValidationException : Exception\n{\n    public ValidationException(string message) : base(message)\n    {\n    }\n\n    public ValidationException(string message, Exception innerException) \n        : base(message, innerException)\n    {\n    }\n}\n\npublic class NotFoundException : Exception\n{\n    public NotFoundException(string message) : base(message)\n    {\n    }\n}\n\npublic class UnauthorizedException : Exception\n{\n    public UnauthorizedException(string message) : base(message)\n    {\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/07-error-handling/#exception-middleware","title":"Exception Middleware","text":"<pre><code>public class ExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger&lt;ExceptionMiddleware&gt; _logger;\n\n    public ExceptionMiddleware(\n        RequestDelegate next,\n        ILogger&lt;ExceptionMiddleware&gt; logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"An error occurred\");\n            await HandleExceptionAsync(context, ex);\n        }\n    }\n\n    private static async Task HandleExceptionAsync(HttpContext context, Exception exception)\n    {\n        context.Response.ContentType = \"application/json\";\n        var response = new ErrorResponse();\n\n        switch (exception)\n        {\n            case ValidationException validationException:\n                context.Response.StatusCode = StatusCodes.Status400BadRequest;\n                response = new ErrorResponse\n                {\n                    StatusCode = StatusCodes.Status400BadRequest,\n                    Message = validationException.Message\n                };\n                break;\n\n            case NotFoundException notFoundException:\n                context.Response.StatusCode = StatusCodes.Status404NotFound;\n                response = new ErrorResponse\n                {\n                    StatusCode = StatusCodes.Status404NotFound,\n                    Message = notFoundException.Message\n                };\n                break;\n\n            case UnauthorizedException unauthorizedException:\n                context.Response.StatusCode = StatusCodes.Status401Unauthorized;\n                response = new ErrorResponse\n                {\n                    StatusCode = StatusCodes.Status401Unauthorized,\n                    Message = unauthorizedException.Message\n                };\n                break;\n\n            default:\n                context.Response.StatusCode = StatusCodes.Status500InternalServerError;\n                response = new ErrorResponse\n                {\n                    StatusCode = StatusCodes.Status500InternalServerError,\n                    Message = \"Internal server error\"\n                };\n                break;\n        }\n\n        await context.Response.WriteAsJsonAsync(response);\n    }\n}\n\npublic class ErrorResponse\n{\n    public int StatusCode { get; set; }\n    public string Message { get; set; }\n}\n</code></pre>"},{"location":"mediatr-cqrs/07-error-handling/#error-handling-best-practices","title":"Error Handling Best Practices","text":"<ol> <li> <p>Exception Types    - Her hata tipi i\u00e7in \u00f6zel exception s\u0131n\u0131f\u0131    - Exception mesajlar\u0131 a\u00e7\u0131klay\u0131c\u0131 olmal\u0131    - Inner exception\u2019lar korunmal\u0131</p> </li> <li> <p>Error Response    - HTTP status code\u2019lar\u0131 do\u011fru kullan\u0131lmal\u0131    - Error response\u2019lar\u0131 standart olmal\u0131    - Hata detaylar\u0131 uygun seviyede olmal\u0131</p> </li> <li> <p>Logging    - T\u00fcm hatalar loglanmal\u0131    - Log seviyeleri do\u011fru kullan\u0131lmal\u0131    - Sensitive data loglanmamal\u0131</p> </li> <li> <p>Testing    - Exception senaryolar\u0131 test edilmeli    - Error response\u2019lar\u0131 test edilmeli    - Logging test edilmeli</p> </li> </ol>"},{"location":"mediatr-cqrs/07-error-handling/#error-handling-pipeline","title":"Error Handling Pipeline","text":"<p>Error handling pipeline \u00fczerinden ge\u00e7er:</p> <ol> <li>Exception Catching</li> <li>Exception Logging</li> <li>Error Response Generation</li> <li>Response Sending</li> </ol> <pre><code>public class ErrorHandlingBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    private readonly ILogger&lt;ErrorHandlingBehavior&lt;TRequest, TResponse&gt;&gt; _logger;\n\n    public ErrorHandlingBehavior(ILogger&lt;ErrorHandlingBehavior&lt;TRequest, TResponse&gt;&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task&lt;TResponse&gt; Handle(\n        TRequest request,\n        RequestHandlerDelegate&lt;TResponse&gt; next,\n        CancellationToken cancellationToken)\n    {\n        try\n        {\n            return await next();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error handling request {RequestName}\", typeof(TRequest).Name);\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/07-error-handling/#error-handling-registration","title":"Error Handling Registration","text":"<pre><code>services.AddMediatR(cfg =&gt; {\n    cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly());\n    cfg.AddBehavior(typeof(ErrorHandlingBehavior&lt;,&gt;));\n});\n\napp.UseMiddleware&lt;ExceptionMiddleware&gt;();\n</code></pre>"},{"location":"mediatr-cqrs/08-testing/","title":"Testing","text":"<p>Testing, MediatR ve CQRS pattern\u2019\u0131n\u0131n do\u011fru \u00e7al\u0131\u015ft\u0131\u011f\u0131ndan emin olmak i\u00e7in \u00f6nemlidir. Unit testler ve integration testler kullan\u0131l\u0131r.</p>"},{"location":"mediatr-cqrs/08-testing/#testing-ozellikleri","title":"Testing \u00d6zellikleri","text":"<ol> <li>Unit Testing: Command ve Query handler\u2019lar\u0131 test edilir</li> <li>Integration Testing: Pipeline ve behavior\u2019lar test edilir</li> <li>Mocking: Ba\u011f\u0131ml\u0131l\u0131klar mock\u2019lan\u0131r</li> <li>Test Coverage: Kod coverage\u2019\u0131 \u00f6l\u00e7\u00fcl\u00fcr</li> </ol>"},{"location":"mediatr-cqrs/08-testing/#unit-testing-ornekleri","title":"Unit Testing \u00d6rnekleri","text":""},{"location":"mediatr-cqrs/08-testing/#command-handler-test","title":"Command Handler Test","text":"<pre><code>public class CreateProductCommandHandlerTests\n{\n    private readonly Mock&lt;IProductRepository&gt; _repositoryMock;\n    private readonly CreateProductCommandHandler _handler;\n\n    public CreateProductCommandHandlerTests()\n    {\n        _repositoryMock = new Mock&lt;IProductRepository&gt;();\n        _handler = new CreateProductCommandHandler(_repositoryMock.Object);\n    }\n\n    [Fact]\n    public async Task Handle_ValidCommand_ReturnsProductId()\n    {\n        // Arrange\n        var command = new CreateProductCommand\n        {\n            Name = \"Test Product\",\n            Price = 100\n        };\n\n        var product = new Product\n        {\n            Id = 1,\n            Name = command.Name,\n            Price = command.Price\n        };\n\n        _repositoryMock\n            .Setup(x =&gt; x.AddAsync(It.IsAny&lt;Product&gt;()))\n            .ReturnsAsync(product);\n\n        // Act\n        var result = await _handler.Handle(command, CancellationToken.None);\n\n        // Assert\n        Assert.Equal(product.Id, result);\n        _repositoryMock.Verify(x =&gt; x.AddAsync(It.IsAny&lt;Product&gt;()), Times.Once);\n    }\n\n    [Fact]\n    public async Task Handle_InvalidCommand_ThrowsValidationException()\n    {\n        // Arrange\n        var command = new CreateProductCommand\n        {\n            Name = \"\",\n            Price = -1\n        };\n\n        // Act &amp; Assert\n        await Assert.ThrowsAsync&lt;ValidationException&gt;(() =&gt;\n            _handler.Handle(command, CancellationToken.None));\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/08-testing/#query-handler-test","title":"Query Handler Test","text":"<pre><code>public class GetProductByIdQueryHandlerTests\n{\n    private readonly Mock&lt;IProductRepository&gt; _repositoryMock;\n    private readonly GetProductByIdQueryHandler _handler;\n\n    public GetProductByIdQueryHandlerTests()\n    {\n        _repositoryMock = new Mock&lt;IProductRepository&gt;();\n        _handler = new GetProductByIdQueryHandler(_repositoryMock.Object);\n    }\n\n    [Fact]\n    public async Task Handle_ValidQuery_ReturnsProductDto()\n    {\n        // Arrange\n        var query = new GetProductByIdQuery { Id = 1 };\n\n        var product = new Product\n        {\n            Id = 1,\n            Name = \"Test Product\",\n            Price = 100\n        };\n\n        _repositoryMock\n            .Setup(x =&gt; x.GetByIdAsync(query.Id))\n            .ReturnsAsync(product);\n\n        // Act\n        var result = await _handler.Handle(query, CancellationToken.None);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(product.Id, result.Id);\n        Assert.Equal(product.Name, result.Name);\n        Assert.Equal(product.Price, result.Price);\n    }\n\n    [Fact]\n    public async Task Handle_NonExistentProduct_ThrowsNotFoundException()\n    {\n        // Arrange\n        var query = new GetProductByIdQuery { Id = 1 };\n\n        _repositoryMock\n            .Setup(x =&gt; x.GetByIdAsync(query.Id))\n            .ReturnsAsync((Product)null);\n\n        // Act &amp; Assert\n        await Assert.ThrowsAsync&lt;NotFoundException&gt;(() =&gt;\n            _handler.Handle(query, CancellationToken.None));\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/08-testing/#integration-testing-ornekleri","title":"Integration Testing \u00d6rnekleri","text":""},{"location":"mediatr-cqrs/08-testing/#pipeline-test","title":"Pipeline Test","text":"<pre><code>public class ValidationPipelineTests\n{\n    private readonly ServiceProvider _serviceProvider;\n\n    public ValidationPipelineTests()\n    {\n        var services = new ServiceCollection();\n\n        services.AddMediatR(cfg =&gt; {\n            cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly());\n            cfg.AddBehavior(typeof(ValidationBehavior&lt;,&gt;));\n        });\n\n        services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());\n\n        _serviceProvider = services.BuildServiceProvider();\n    }\n\n    [Fact]\n    public async Task Send_InvalidCommand_ThrowsValidationException()\n    {\n        // Arrange\n        var mediator = _serviceProvider.GetRequiredService&lt;IMediator&gt;();\n        var command = new CreateProductCommand\n        {\n            Name = \"\",\n            Price = -1\n        };\n\n        // Act &amp; Assert\n        await Assert.ThrowsAsync&lt;ValidationException&gt;(() =&gt;\n            mediator.Send(command));\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/08-testing/#testing-best-practices","title":"Testing Best Practices","text":"<ol> <li> <p>Unit Testing    - Her handler i\u00e7in ayr\u0131 test s\u0131n\u0131f\u0131    - T\u00fcm senaryolar test edilmeli    - Mock\u2019lar do\u011fru kullan\u0131lmal\u0131</p> </li> <li> <p>Integration Testing    - Pipeline\u2019lar test edilmeli    - Behavior\u2019lar test edilmeli    - Ger\u00e7ek ba\u011f\u0131ml\u0131l\u0131klar kullan\u0131lmal\u0131</p> </li> <li> <p>Test Organization    - Test s\u0131n\u0131flar\u0131 organize edilmeli    - Test metodlar\u0131 a\u00e7\u0131klay\u0131c\u0131 olmal\u0131    - Test verileri ayr\u0131 tutulmal\u0131</p> </li> <li> <p>Test Coverage    - Kod coverage\u2019\u0131 y\u00fcksek olmal\u0131    - Edge case\u2019ler test edilmeli    - Performance testleri yap\u0131lmal\u0131</p> </li> </ol>"},{"location":"mediatr-cqrs/08-testing/#test-helpers","title":"Test Helpers","text":"<pre><code>public static class TestHelpers\n{\n    public static Mock&lt;T&gt; CreateMock&lt;T&gt;() where T : class\n    {\n        return new Mock&lt;T&gt;();\n    }\n\n    public static IMediator CreateMediator(ServiceCollection services)\n    {\n        services.AddMediatR(cfg =&gt; {\n            cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly());\n        });\n\n        var serviceProvider = services.BuildServiceProvider();\n        return serviceProvider.GetRequiredService&lt;IMediator&gt;();\n    }\n\n    public static CancellationToken CreateCancellationToken()\n    {\n        return new CancellationTokenSource().Token;\n    }\n}\n</code></pre>"},{"location":"mediatr-cqrs/09-best-practices/","title":"Best Practices","text":"<p>MediatR ve CQRS pattern\u2019\u0131n\u0131n etkili kullan\u0131m\u0131 i\u00e7in best practice\u2019ler.</p>"},{"location":"mediatr-cqrs/09-best-practices/#command-ve-query-best-practices","title":"Command ve Query Best Practices","text":"<ol> <li> <p>Command\u2019lar    - Immutable olmal\u0131    - Tek sorumlulu\u011fu olmal\u0131    - Validation kurallar\u0131 tan\u0131mlanmal\u0131    - Idempotent olmal\u0131</p> </li> <li> <p>Query\u2019ler    - Read-only olmal\u0131    - Performans optimize edilmeli    - Caching kullan\u0131lmal\u0131    - Pagination desteklemeli</p> </li> <li> <p>Handler\u2019lar    - Tek sorumlulu\u011fu olmal\u0131    - Business logic i\u00e7ermeli    - Ba\u011f\u0131ml\u0131l\u0131klar\u0131 minimize etmeli    - Test edilebilir olmal\u0131</p> </li> </ol>"},{"location":"mediatr-cqrs/09-best-practices/#pipeline-best-practices","title":"Pipeline Best Practices","text":"<ol> <li> <p>Behavior S\u0131ralamas\u0131    - Validation    - Authorization    - Logging    - Transaction    - Caching    - Performance</p> </li> <li> <p>Behavior\u2019lar    - Hafif olmal\u0131    - Gereksiz i\u015flemlerden ka\u00e7\u0131n\u0131lmal\u0131    - Exception handling yap\u0131lmal\u0131    - Test edilebilir olmal\u0131</p> </li> </ol>"},{"location":"mediatr-cqrs/09-best-practices/#event-best-practices","title":"Event Best Practices","text":"<ol> <li> <p>Event\u2019ler    - Immutable olmal\u0131    - Ge\u00e7mi\u015f zaman kullanmal\u0131    - Domain\u2019e \u00f6zg\u00fc olmal\u0131    - Idempotent olmal\u0131</p> </li> <li> <p>Event Handler\u2019lar    - Tek sorumlulu\u011fu olmal\u0131    - Ba\u011f\u0131ms\u0131z olmal\u0131    - Retry mekanizmas\u0131 olmal\u0131    - Test edilebilir olmal\u0131</p> </li> </ol>"},{"location":"mediatr-cqrs/09-best-practices/#validation-best-practices","title":"Validation Best Practices","text":"<ol> <li> <p>Validation Rules    - Her request i\u00e7in ayr\u0131 validator    - Kurallar a\u00e7\u0131k ve anla\u015f\u0131l\u0131r olmal\u0131    - Custom validation kullan\u0131lmal\u0131    - Async validation desteklenmeli</p> </li> <li> <p>Error Messages    - A\u00e7\u0131klay\u0131c\u0131 olmal\u0131    - \u00c7oklu dil deste\u011fi olmal\u0131    - Hata kodlar\u0131 kullan\u0131lmal\u0131    - Sensitive data i\u00e7ermemeli</p> </li> </ol>"},{"location":"mediatr-cqrs/09-best-practices/#error-handling-best-practices","title":"Error Handling Best Practices","text":"<ol> <li> <p>Exception Types    - Her hata tipi i\u00e7in \u00f6zel exception    - Mesajlar a\u00e7\u0131klay\u0131c\u0131 olmal\u0131    - Inner exception\u2019lar korunmal\u0131    - Stack trace korunmal\u0131</p> </li> <li> <p>Error Response    - HTTP status code\u2019lar\u0131 do\u011fru kullan\u0131lmal\u0131    - Response\u2019lar standart olmal\u0131    - Hata detaylar\u0131 uygun seviyede olmal\u0131    - Sensitive data i\u00e7ermemeli</p> </li> </ol>"},{"location":"mediatr-cqrs/09-best-practices/#testing-best-practices","title":"Testing Best Practices","text":"<ol> <li> <p>Unit Testing    - Her handler i\u00e7in test    - T\u00fcm senaryolar test edilmeli    - Mock\u2019lar do\u011fru kullan\u0131lmal\u0131    - Test coverage y\u00fcksek olmal\u0131</p> </li> <li> <p>Integration Testing    - Pipeline\u2019lar test edilmeli    - Behavior\u2019lar test edilmeli    - Ger\u00e7ek ba\u011f\u0131ml\u0131l\u0131klar kullan\u0131lmal\u0131    - Performance testleri yap\u0131lmal\u0131</p> </li> </ol>"},{"location":"mediatr-cqrs/09-best-practices/#project-structure-best-practices","title":"Project Structure Best Practices","text":"<ol> <li> <p>Folder Structure <pre><code>Project/\n\u251c\u2500\u2500 Commands/\n\u2502   \u251c\u2500\u2500 CreateProduct/\n\u2502   \u2502   \u251c\u2500\u2500 CreateProductCommand.cs\n\u2502   \u2502   \u251c\u2500\u2500 CreateProductCommandHandler.cs\n\u2502   \u2502   \u2514\u2500\u2500 CreateProductCommandValidator.cs\n\u2502   \u2514\u2500\u2500 UpdateProduct/\n\u251c\u2500\u2500 Queries/\n\u2502   \u251c\u2500\u2500 GetProductById/\n\u2502   \u2502   \u251c\u2500\u2500 GetProductByIdQuery.cs\n\u2502   \u2502   \u2514\u2500\u2500 GetProductByIdQueryHandler.cs\n\u2502   \u2514\u2500\u2500 GetProducts/\n\u251c\u2500\u2500 Events/\n\u2502   \u251c\u2500\u2500 ProductCreated/\n\u2502   \u2502   \u251c\u2500\u2500 ProductCreatedEvent.cs\n\u2502   \u2502   \u2514\u2500\u2500 ProductCreatedEventHandler.cs\n\u2502   \u2514\u2500\u2500 ProductUpdated/\n\u2514\u2500\u2500 Behaviors/\n    \u251c\u2500\u2500 LoggingBehavior.cs\n    \u2514\u2500\u2500 ValidationBehavior.cs\n</code></pre></p> </li> <li> <p>Naming Conventions    - Command\u2019lar: <code>{Action}{Entity}Command</code>    - Query\u2019ler: <code>Get{Entity}{By}{Criteria}Query</code>    - Event\u2019ler: <code>{Entity}{Action}Event</code>    - Handler\u2019lar: <code>{Command/Query/Event}Handler</code></p> </li> </ol>"},{"location":"mediatr-cqrs/09-best-practices/#performance-best-practices","title":"Performance Best Practices","text":"<ol> <li> <p>Command Performance    - Batch i\u015flemler kullan\u0131lmal\u0131    - Transaction\u2019lar optimize edilmeli    - Index\u2019ler do\u011fru kullan\u0131lmal\u0131    - Bulk insert/update kullan\u0131lmal\u0131</p> </li> <li> <p>Query Performance    - Select sadece ihtiya\u00e7 duyulan alanlar\u0131    - Include\u2019lar\u0131 dikkatli kullan\u0131n    - Index\u2019leri do\u011fru kullan\u0131n    - Caching kullan\u0131n</p> </li> </ol>"},{"location":"mediatr-cqrs/09-best-practices/#security-best-practices","title":"Security Best Practices","text":"<ol> <li> <p>Authorization    - Role-based authorization    - Policy-based authorization    - Resource-based authorization    - Claims-based authorization</p> </li> <li> <p>Data Protection    - Sensitive data \u015fifrelenmeli    - Audit logging yap\u0131lmal\u0131    - Input validation yap\u0131lmal\u0131    - Output encoding yap\u0131lmal\u0131 </p> </li> </ol>"},{"location":"observability/application-performance-monitoring/","title":"Application Performance Monitoring - APM (Uygulama Performans \u0130zleme)","text":"<p>Uygulama Performans \u0130zleme (APM - Application Performance Monitoring), yaz\u0131l\u0131m uygulamalar\u0131n\u0131n performans\u0131n\u0131 ve sa\u011fl\u0131k durumunu izlemek i\u00e7in kullan\u0131lan y\u00f6ntemlerin b\u00fct\u00fcn\u00fcd\u00fcr. APM ara\u00e7lar\u0131 sayesinde gecikmeler, hatalar, yava\u015f sorgular ve i\u015flem darbo\u011fazlar\u0131 tespit edilebilir.</p>"},{"location":"observability/application-performance-monitoring/#1-neden-apm-kullanmalyz","title":"1. Neden APM Kullanmal\u0131y\u0131z?","text":"<p>\u2714 Uygulama performans\u0131n\u0131 \u00f6l\u00e7mek ve iyile\u015ftirmek \u2714 Gecikmeleri ve darbo\u011fazlar\u0131 analiz etmek \u2714 Ger\u00e7ek zamanl\u0131 metrikleri ve uyar\u0131lar\u0131 y\u00f6netmek \u2714 Servisler aras\u0131 \u00e7a\u011fr\u0131lar\u0131 izlemek \u2714 Veritaban\u0131 sorgular\u0131n\u0131 ve HTTP isteklerini takip etmek </p> <p>APM \u00e7\u00f6z\u00fcmleri, \u00f6zellikle mikroservis mimarilerinde sistemin genel performans\u0131n\u0131 anlamak i\u00e7in kritik \u00f6neme sahiptir.</p>"},{"location":"observability/application-performance-monitoring/#2-apm-icin-populer-araclar","title":"2. APM \u0130\u00e7in Pop\u00fcler Ara\u00e7lar","text":"<p>\ud83d\udccc .NET i\u00e7in Yayg\u0131n Kullan\u0131lan APM Ara\u00e7lar\u0131: - Application Insights (Azure) - New Relic - Datadog APM - Elastic APM - Jaeger Tracing - Zipkin - Prometheus + Grafana </p> <p>Bu ara\u00e7lar sayesinde HTTP istekleri, veritaban\u0131 \u00e7a\u011fr\u0131lar\u0131, bellek kullan\u0131m\u0131 ve CPU t\u00fcketimi gibi metrikler detayl\u0131 olarak incelenebilir.</p>"},{"location":"observability/application-performance-monitoring/#3-net-uygulamalarnda-apm-entegrasyonu","title":"3. .NET Uygulamalar\u0131nda APM Entegrasyonu","text":""},{"location":"observability/application-performance-monitoring/#1-azure-application-insights-ile-apm","title":"1. Azure Application Insights ile APM","text":"<p>Azure Application Insights, .NET uygulamalar\u0131nda performans izleme i\u00e7in en g\u00fc\u00e7l\u00fc \u00e7\u00f6z\u00fcmlerden biridir.</p> <p>\ud83d\udccc Application Insights i\u00e7in Gerekli Paketleri Y\u00fckleyin:</p> <pre><code>dotnet add package Microsoft.ApplicationInsights.AspNetCore\n</code></pre> <p>\ud83d\udccc Application Insights\u2019\u0131 ASP.NET Core Uygulamas\u0131na Dahil Etme:</p> <pre><code>var builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddApplicationInsightsTelemetry(\"&lt;YOUR_INSTRUMENTATION_KEY&gt;\");\n</code></pre> <p>\ud83d\udccc \u00d6zel Telemetri Loglar\u0131 G\u00f6nderme:</p> <pre><code>using Microsoft.ApplicationInsights;\n\nvar telemetry = new TelemetryClient();\ntelemetry.TrackEvent(\"UserLoggedIn\");\ntelemetry.TrackMetric(\"RequestTime\", 120);\ntelemetry.TrackException(new Exception(\"Hata olu\u015ftu!\"));\n</code></pre> <p>\u2705 Application Insights ile: - Ger\u00e7ek zamanl\u0131 metrikler toplan\u0131r. - Hata analizi yap\u0131labilir. - Kullan\u0131c\u0131 etkile\u015fimleri izlenebilir. </p>"},{"location":"observability/application-performance-monitoring/#2-prometheus-grafana-ile-performans-izleme","title":"2. Prometheus + Grafana ile Performans \u0130zleme","text":"<p>\ud83d\udccc Prometheus ve Grafana\u2019y\u0131 Docker ile \u00c7al\u0131\u015ft\u0131rma:</p> <pre><code>docker run -d -p 9090:9090 --name prometheus prom/prometheus\ndocker run -d -p 3000:3000 --name grafana grafana/grafana\n</code></pre> <p>\ud83d\udccc ASP.NET Core Uygulamalar\u0131nda Prometheus Metriklerini Toplama:</p> <pre><code>dotnet add package prometheus-net.AspNetCore\n</code></pre> <p>\ud83d\udccc Startup.cs veya Program.cs i\u00e7ine ekleyin:</p> <pre><code>app.UseMetricServer();\napp.UseHttpMetrics();\n</code></pre> <p>\u2705 Bu sayede: - Prometheus ile HTTP istekleri ve gecikmeler analiz edilir. - Grafana ile metrikler g\u00f6rselle\u015ftirilir. </p>"},{"location":"observability/application-performance-monitoring/#4-dagtk-izleme-distributed-tracing-kullanm","title":"4. Da\u011f\u0131t\u0131k \u0130zleme (Distributed Tracing) Kullan\u0131m\u0131","text":"<p>Uygulamalar\u0131n\u0131zda servisler aras\u0131 \u00e7a\u011fr\u0131lar\u0131 izlemek i\u00e7in OpenTelemetry, Jaeger veya Zipkin gibi da\u011f\u0131t\u0131k izleme sistemleri kullan\u0131labilir.</p> <p>\ud83d\udccc OpenTelemetry ile \u0130zleme:</p> <pre><code>var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddAspNetCoreInstrumentation()\n    .AddHttpClientInstrumentation()\n    .AddConsoleExporter()\n    .Build();\n</code></pre> <p>\ud83d\udccc Jaeger Entegrasyonu:</p> <pre><code>.AddJaegerExporter(options =&gt;\n{\n    options.AgentHost = \"localhost\";\n    options.AgentPort = 6831;\n})\n</code></pre> <p>\u2705 Bu sayede: - Servisler aras\u0131 istekler takip edilir. - Her iste\u011fin gecikme s\u00fcresi \u00f6l\u00e7\u00fcl\u00fcr. - Performans darbo\u011fazlar\u0131 tespit edilir. </p>"},{"location":"observability/application-performance-monitoring/#5-apm-kullanarak-performans-testleri-yapma","title":"5. APM Kullanarak Performans Testleri Yapma","text":"<p>\ud83d\udccc BenchmarkDotNet Kullanarak Performans \u00d6l\u00e7\u00fcm\u00fc:</p> <pre><code>dotnet add package BenchmarkDotNet\n</code></pre> <p>\ud83d\udccc \u00d6rnek Benchmark Testi:</p> <pre><code>using BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\n\npublic class PerformanceTests\n{\n    private readonly List&lt;int&gt; numbers = Enumerable.Range(1, 100000).ToList();\n\n    [Benchmark]\n    public int SumWithLinq() =&gt; numbers.Sum();\n\n    [Benchmark]\n    public int SumWithLoop()\n    {\n        int sum = 0;\n        foreach (var num in numbers)\n            sum += num;\n        return sum;\n    }\n}\n\nBenchmarkRunner.Run&lt;PerformanceTests&gt;();\n</code></pre> <p>\u2705 Bu test ile: - Kodunuzun performans\u0131n\u0131 \u00f6l\u00e7ebilirsiniz. - Linq vs D\u00f6ng\u00fc gibi kar\u015f\u0131la\u015ft\u0131rmalar yapabilirsiniz. </p>"},{"location":"observability/application-performance-monitoring/#6-apm-en-iyi-pratikleri","title":"6. APM En \u0130yi Pratikleri","text":"<p>\u2714 Uygulaman\u0131n CPU, bellek, disk ve a\u011f kullan\u0131m\u0131 izlenmeli. \u2714 APM ara\u00e7lar\u0131 ile gecikmeler ve darbo\u011fazlar analiz edilmeli. \u2714 Kritik noktalar i\u00e7in metrikler toplanmal\u0131 ve alarmlar ayarlanmal\u0131. \u2714 Loglar merkezi bir sistemde toplanarak hatalar anl\u0131k tespit edilmeli.</p>"},{"location":"observability/centralized-logging/","title":"Centralized Logging (Merkezi Loglama)","text":"<p>Merkezi loglama, da\u011f\u0131t\u0131k sistemlerde uygulama loglar\u0131n\u0131n tek bir merkezde toplanmas\u0131n\u0131, analiz edilmesini ve aranabilir hale getirilmesini sa\u011flayan bir y\u00f6ntemdir. Mikroservis mimarilerinde, loglar\u0131n farkl\u0131 servislerden toplan\u0131p merkezi bir noktaya g\u00f6nderilmesi hata ay\u0131klama, performans takibi ve g\u00fcvenlik analizleri a\u00e7\u0131s\u0131ndan kritik \u00f6neme sahiptir.</p>"},{"location":"observability/centralized-logging/#1-neden-merkezi-loglama-kullanmalyz","title":"1. Neden Merkezi Loglama Kullanmal\u0131y\u0131z?","text":"<p>\u2714 T\u00fcm servislerden gelen loglar\u0131 tek bir yerden izleme \u2714 Da\u011f\u0131t\u0131k sistemlerde hata tespiti ve analiz kolayl\u0131\u011f\u0131 \u2714 Ger\u00e7ek zamanl\u0131 monitoring ve alerting entegrasyonu \u2714 G\u00fcvenlik olaylar\u0131n\u0131 merkezi olarak analiz etme </p> <p>Merkezi loglama sayesinde, servisler aras\u0131 \u00e7a\u011fr\u0131lar ve hatalar ba\u011flam kaybolmadan takip edilebilir.</p>"},{"location":"observability/centralized-logging/#2-merkezi-loglama-icin-populer-araclar","title":"2. Merkezi Loglama i\u00e7in Pop\u00fcler Ara\u00e7lar","text":"<ul> <li>Elastic Stack (ELK - Elasticsearch, Logstash, Kibana) </li> <li>Grafana Loki </li> <li>Fluentd ve Fluent Bit </li> <li>Seq ile Yap\u0131land\u0131r\u0131lm\u0131\u015f Loglama </li> <li>Application Insights (Azure) </li> <li>Amazon CloudWatch (AWS) </li> <li>Google Cloud Logging </li> </ul>"},{"location":"observability/centralized-logging/#3-net-uygulamalarnda-merkezi-loglama-entegrasyonu","title":"3. .NET Uygulamalar\u0131nda Merkezi Loglama Entegrasyonu","text":""},{"location":"observability/centralized-logging/#1-serilog-ile-yaplandrlms-loglama","title":"1. Serilog ile Yap\u0131land\u0131r\u0131lm\u0131\u015f Loglama","text":"<p>Serilog, merkezi loglama sistemleriyle kolayca entegre edilebilen g\u00fc\u00e7l\u00fc bir .NET loglama k\u00fct\u00fcphanesidir.</p> <pre><code>dotnet add package Serilog.AspNetCore\ndotnet add package Serilog.Sinks.Elasticsearch\ndotnet add package Serilog.Sinks.File\ndotnet add package Serilog.Sinks.Seq\n</code></pre>"},{"location":"observability/centralized-logging/#2-serilog-konfigurasyonu","title":"2. Serilog Konfig\u00fcrasyonu","text":"<p>A\u015fa\u011f\u0131daki kod blo\u011fu, Serilog\u2019u Elasticsearch, File ve Seq gibi merkezi loglama \u00e7\u00f6z\u00fcmleriyle nas\u0131l kullanaca\u011f\u0131n\u0131z\u0131 g\u00f6sterir:</p> <pre><code>Log.Logger = new LoggerConfiguration()\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/app-log.txt\", rollingInterval: RollingInterval.Day)\n    .WriteTo.Seq(\"http://localhost:5341\")\n    .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(\"http://localhost:9200\"))\n    {\n        AutoRegisterTemplate = true,\n        IndexFormat = \"logs-dotnet-{0:yyyy.MM}\"\n    })\n    .CreateLogger();\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Host.UseSerilog();\n</code></pre> <p>\u2705 Bu yap\u0131land\u0131rma: - Console ve File ile yerel loglama yapar. - Seq ile merkezi log g\u00f6r\u00fcnt\u00fcleme sunar. - Elasticsearch ile loglar\u0131 indeksleyerek Kibana ile analiz edilebilir hale getirir.  </p>"},{"location":"observability/centralized-logging/#4-elasticsearch-ve-kibana-kullanarak-merkezi-loglama","title":"4. Elasticsearch ve Kibana Kullanarak Merkezi Loglama","text":"<p>ELK (Elasticsearch, Logstash, Kibana) loglar\u0131 saklamak, indekslemek ve g\u00f6rselle\u015ftirmek i\u00e7in kullan\u0131lan g\u00fc\u00e7l\u00fc bir ara\u00e7t\u0131r.</p>"},{"location":"observability/centralized-logging/#1-elasticsearch-ve-kibanay-docker-ile-calstrma","title":"1. Elasticsearch ve Kibana\u2019y\u0131 Docker ile \u00c7al\u0131\u015ft\u0131rma","text":"<pre><code>docker network create elk\n\ndocker run -d --name elasticsearch --net elk -p 9200:9200 -e \"discovery.type=single-node\" elasticsearch:7.10.0\n\ndocker run -d --name kibana --net elk -p 5601:5601 kibana:7.10.0\n</code></pre> <p>Elasticsearch\u2019e g\u00f6nderilen loglar\u0131 Kibana UI\u2019den inceleyebilirsiniz: http://localhost:5601</p>"},{"location":"observability/centralized-logging/#5-merkezi-loglama-icin-yaplandrlms-structured-log-kullanm","title":"5. Merkezi Loglama \u0130\u00e7in Yap\u0131land\u0131r\u0131lm\u0131\u015f (Structured) Log Kullan\u0131m\u0131","text":"<p>Loglar\u0131n analiz edilebilir olmas\u0131 i\u00e7in yap\u0131land\u0131r\u0131lm\u0131\u015f (JSON format\u0131nda) olmas\u0131 \u00f6nemlidir.</p> <p>\u2705 \u00d6rnek Serilog JSON Log \u00c7\u0131kt\u0131s\u0131:</p> <pre><code>{\n    \"Timestamp\": \"2024-02-12T10:23:45.678Z\",\n    \"Level\": \"Information\",\n    \"Message\": \"Kullan\u0131c\u0131 giri\u015f yapt\u0131\",\n    \"Properties\": {\n        \"UserId\": \"12345\",\n        \"IpAddress\": \"192.168.1.10\",\n        \"Location\": \"Istanbul, Turkey\"\n    }\n}\n</code></pre> <p>Bu format, loglar\u0131n Elasticsearch veya di\u011fer merkezi sistemler taraf\u0131ndan kolayca aranmas\u0131n\u0131 ve analiz edilmesini sa\u011flar.</p>"},{"location":"observability/centralized-logging/#6-net-ile-opentelemetry-kullanarak-loglama","title":"6. .NET ile OpenTelemetry Kullanarak Loglama","text":"<p>OpenTelemetry ile merkezi loglama yapmak i\u00e7in a\u015fa\u011f\u0131daki konfig\u00fcrasyon kullan\u0131labilir:</p> <pre><code>var loggerFactory = LoggerFactory.Create(builder =&gt;\n{\n    builder.AddOpenTelemetry(options =&gt;\n    {\n        options.AddConsoleExporter();\n        options.AddOtlpExporter(opt =&gt;\n        {\n            opt.Endpoint = new Uri(\"http://otel-collector:4317\");\n        });\n    });\n});\n</code></pre> <p>\u2705 Bu yap\u0131land\u0131rma: - OpenTelemetry Collector kullanarak merkezi log toplanmas\u0131n\u0131 sa\u011flar. - OTLP (OpenTelemetry Protocol) ile Prometheus, Grafana gibi sistemlere veri g\u00f6nderebilir. </p>"},{"location":"observability/centralized-logging/#7-merkezi-loglama-ve-alert-mekanizmalar","title":"7. Merkezi Loglama ve Alert Mekanizmalar\u0131","text":"<p>Merkezi loglama sistemleriyle olay bazl\u0131 uyar\u0131lar olu\u015fturabilirsiniz. \u00d6rne\u011fin: Kibana ve Prometheus kullanarak hata oranlar\u0131 belirli bir e\u015fik de\u011feri a\u015ft\u0131\u011f\u0131nda Slack veya e-posta bildirimi g\u00f6nderebilirsiniz.</p> <p>\u2705 \u00d6rnek Prometheus Alerting Kurallar\u0131:</p> <pre><code>groups:\n  - name: LogAlerts\n    rules:\n      - alert: HighErrorRate\n        expr: rate(http_requests_total{status=\"500\"}[5m]) &gt; 0.1\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Hata oran\u0131 \u00e7ok y\u00fcksek!\"\n          description: \"Son 5 dakikada hata oran\u0131 %10\u2019u a\u015ft\u0131!\"\n</code></pre> <p>Bu alerting mekanizmas\u0131: - E\u015fik de\u011feri belirlenen hata oranlar\u0131n\u0131 alg\u0131lar. - Slack, Telegram veya e-posta bildirimleri tetikleyebilir. </p>"},{"location":"observability/centralized-logging/#8-merkezi-loglama-en-iyi-pratikleri","title":"8. Merkezi Loglama En \u0130yi Pratikleri","text":"<p>\u2714 Log Seviyelerini Do\u011fru Kullan\u0131n: <code>Debug</code>, <code>Info</code>, <code>Warning</code>, <code>Error</code>, <code>Critical</code>. \u2714 Kullan\u0131c\u0131 ve \u0130stek Ba\u011flam\u0131n\u0131 Koruyun: <code>Correlation ID</code> ile iste\u011fi takip edin. \u2714 Yap\u0131land\u0131r\u0131lm\u0131\u015f (JSON) Log Format\u0131 Kullan\u0131n: Loglar\u0131 analiz edilebilir hale getirin. \u2714 Log Saklama S\u00fcresini Tan\u0131mlay\u0131n: Log Retention Policy ile gereksiz loglar\u0131 temizleyin. \u2714 Merkezi Ar\u015fivleme Kullan\u0131n: Elasticsearch, Seq veya Grafana Loki gibi \u00e7\u00f6z\u00fcmlerle loglar\u0131 y\u00f6netin.</p>"},{"location":"observability/opentelemetry-tracing/","title":"OpenTelemetry ile Da\u011f\u0131t\u0131k \u0130zleme (Tracing)","text":"<p>Da\u011f\u0131t\u0131k sistemlerde g\u00f6zlemlenebilirlik sa\u011flamak i\u00e7in OpenTelemetry, tracing (izleme), metrik ve loglama gibi kritik telemetri verilerini toplamak i\u00e7in kullan\u0131lan a\u00e7\u0131k kaynakl\u0131 bir standartt\u0131r.</p>"},{"location":"observability/opentelemetry-tracing/#1-opentelemetry-nedir","title":"1. OpenTelemetry Nedir?","text":"<p>OpenTelemetry, mikroservisler ve da\u011f\u0131t\u0131k sistemlerde uygulama g\u00f6zlemlenebilirli\u011fini art\u0131rmak i\u00e7in geli\u015ftirilen bir Observability Framework\u2018t\u00fcr. Tracing, metrik toplama ve loglama deste\u011fi sa\u011flar.</p> <p>\u2705 OpenTelemetry\u2019nin Sa\u011flad\u0131klar\u0131: - Servisler aras\u0131nda istek takibi (Distributed Tracing) - Hata analizi ve performans \u00f6l\u00e7\u00fcm\u00fc - Metrik ve log entegrasyonu - Prometheus, Jaeger, Zipkin, Grafana gibi ara\u00e7larla entegrasyon </p>"},{"location":"observability/opentelemetry-tracing/#2-opentelemetry-ile-tracing-mantg","title":"2. OpenTelemetry ile Tracing Mant\u0131\u011f\u0131","text":"<p>Tracing, bir iste\u011fin birden fazla servis ve i\u015flem boyunca nas\u0131l ilerledi\u011fini takip etmeye yarar. OpenTelemetry, trace, span ve context gibi kavramlarla \u00e7al\u0131\u015f\u0131r:</p> <ul> <li>Trace: Bir iste\u011fin uygulama boyunca izlenen ya\u015fam d\u00f6ng\u00fcs\u00fcd\u00fcr.</li> <li>Span: Bir i\u015flemin belirli bir bile\u015feni taraf\u0131ndan ger\u00e7ekle\u015ftirilen ba\u011f\u0131ms\u0131z bir b\u00f6l\u00fcmd\u00fcr.</li> <li>Context: Spesifik bir iste\u011fin ili\u015fkili oldu\u011fu ba\u011flam\u0131 tan\u0131mlar.</li> </ul> <p>\u2705 \u00d6rnek Trace Yap\u0131s\u0131: </p> <pre><code>[Trace: API Request]\n    \u251c\u2500\u2500 [Span 1: API Gateway]\n    \u251c\u2500\u2500 [Span 2: Authentication Service]\n    \u251c\u2500\u2500 [Span 3: Order Service]\n    \u251c\u2500\u2500 [Span 4: Payment Service]\n</code></pre>"},{"location":"observability/opentelemetry-tracing/#3-net-uygulamalarnda-opentelemetry-kullanm","title":"3. .NET Uygulamalar\u0131nda OpenTelemetry Kullan\u0131m\u0131","text":"<p>OpenTelemetry\u2019yi .NET uygulamalar\u0131na entegre etmek i\u00e7in OpenTelemetry NuGet paketleri y\u00fcklenmelidir.</p>"},{"location":"observability/opentelemetry-tracing/#1-gerekli-bagmllklar-yukleyin","title":"1. Gerekli Ba\u011f\u0131ml\u0131l\u0131klar\u0131 Y\u00fckleyin","text":"<pre><code>dotnet add package OpenTelemetry\ndotnet add package OpenTelemetry.Exporter.Console\ndotnet add package OpenTelemetry.Exporter.Zipkin\ndotnet add package OpenTelemetry.Trace\n</code></pre>"},{"location":"observability/opentelemetry-tracing/#2-opentelemetry-konfigurasyonu","title":"2. OpenTelemetry Konfig\u00fcrasyonu","text":"<p>A\u015fa\u011f\u0131daki yap\u0131land\u0131rma ile tracing i\u015flemleri ba\u015flat\u0131labilir.</p> <pre><code>using OpenTelemetry.Trace;\nusing OpenTelemetry.Resources;\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(\"MyApp\"))\n    .AddSource(\"MyApp.Tracing\")\n    .AddConsoleExporter()\n    .AddZipkinExporter(options =&gt;\n    {\n        options.Endpoint = new Uri(\"http://localhost:9411/api/v2/spans\");\n    })\n    .Build();\n</code></pre> <p>\u2705 Bu yap\u0131land\u0131rma: - MyApp adl\u0131 bir servis i\u00e7in tracing olu\u015fturur. - Console Exporter ile verileri terminalde g\u00f6sterir. - Zipkin Exporter ile verileri Zipkin servisine g\u00f6nderir.  </p>"},{"location":"observability/opentelemetry-tracing/#4-opentelemetry-ile-trace-olusturma","title":"4. OpenTelemetry ile Trace Olu\u015fturma","text":""},{"location":"observability/opentelemetry-tracing/#1-manuel-trace-baslatma","title":"1. Manuel Trace Ba\u015flatma","text":"<p>Tracing i\u015flemi i\u00e7in manuel span ekleyebiliriz:</p> <pre><code>using System.Diagnostics;\n\nvar activitySource = new ActivitySource(\"MyApp.Tracing\");\n\nusing (var activity = activitySource.StartActivity(\"ProcessOrder\"))\n{\n    activity?.SetTag(\"order.id\", \"1234\");\n    activity?.SetTag(\"order.status\", \"Processing\");\n}\n</code></pre>"},{"location":"observability/opentelemetry-tracing/#2-otomatik-http-isteklerini-izleme","title":"2. Otomatik HTTP \u0130steklerini \u0130zleme","text":"<p>E\u011fer uygulaman\u0131zda HttpClient ile \u00e7a\u011fr\u0131lar yap\u0131yorsan\u0131z, OpenTelemetry bu \u00e7a\u011fr\u0131lar\u0131 otomatik olarak izleyebilir:</p> <pre><code>var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddHttpClientInstrumentation()\n    .AddAspNetCoreInstrumentation()\n    .Build();\n</code></pre> <p>\u2705 Bu sayede: - HttpClient \u00e7a\u011fr\u0131lar\u0131 otomatik olarak izlenir. - ASP.NET Core uygulamalar\u0131nda t\u00fcm istekler otomatik olarak trace edilir. </p>"},{"location":"observability/opentelemetry-tracing/#5-opentelemetry-ile-jaeger-ve-zipkin-entegrasyonu","title":"5. OpenTelemetry ile Jaeger ve Zipkin Entegrasyonu","text":"<p>OpenTelemetry ile Jaeger ve Zipkin gibi pop\u00fcler tracing ara\u00e7lar\u0131na veri g\u00f6nderebilirsiniz.</p>"},{"location":"observability/opentelemetry-tracing/#1-jaeger-kullanm","title":"1. Jaeger Kullan\u0131m\u0131","text":"<p>Jaeger servisini \u00e7al\u0131\u015ft\u0131rmak i\u00e7in Docker kullanabilirsiniz:</p> <pre><code>docker run -d --name jaeger   -e COLLECTOR_ZIPKIN_HTTP_PORT=9411   -p 5775:5775/udp   -p 6831:6831/udp   -p 6832:6832/udp   -p 5778:5778   -p 16686:16686   -p 14268:14268   -p 14250:14250   -p 9411:9411   jaegertracing/all-in-one:1.38\n</code></pre> <p>Jaeger UI\u2019ye taray\u0131c\u0131n\u0131zdan eri\u015febilirsiniz: http://localhost:16686 </p>"},{"location":"observability/opentelemetry-tracing/#2-zipkin-kullanm","title":"2. Zipkin Kullan\u0131m\u0131","text":"<p>Zipkin servisini \u00e7al\u0131\u015ft\u0131rmak i\u00e7in:</p> <pre><code>docker run -d -p 9411:9411 openzipkin/zipkin\n</code></pre> <p>\u2705 Jaeger ve Zipkin Entegrasyonu:</p> <pre><code>.AddZipkinExporter(options =&gt;\n{\n    options.Endpoint = new Uri(\"http://localhost:9411/api/v2/spans\");\n})\n.AddJaegerExporter(options =&gt;\n{\n    options.AgentHost = \"localhost\";\n    options.AgentPort = 6831;\n})\n</code></pre>"},{"location":"observability/opentelemetry-tracing/#6-opentelemetry-ile-trace-gorsellestirme","title":"6. OpenTelemetry ile Trace G\u00f6rselle\u015ftirme","text":"<p>A\u015fa\u011f\u0131daki g\u00f6rselde bir da\u011f\u0131t\u0131k sistemde OpenTelemetry ile izlenen i\u015flemler g\u00f6sterilmektedir.</p> <p></p>"},{"location":"observability/opentelemetry-tracing/#7-opentelemetry-tracing-kullanm-senaryolar","title":"7. OpenTelemetry Tracing Kullan\u0131m Senaryolar\u0131","text":"<p>\u2714 Mikroservis Mimarileri \u2192 Bir iste\u011fin t\u00fcm servisler boyunca nas\u0131l ilerledi\u011fini takip etme. \u2714 API Performans Analizi \u2192 Hangi API endpoint\u2019lerinin ne kadar s\u00fcrede yan\u0131t verdi\u011fini \u00f6l\u00e7me. \u2714 Hata Tespiti \u2192 Yava\u015f veya hatal\u0131 \u00e7al\u0131\u015fan servisleri bulma ve analiz etme. \u2714 Veritaban\u0131 Sorgu Takibi \u2192 Yava\u015f SQL sorgular\u0131n\u0131 tespit etme ve iyile\u015ftirme.</p>"},{"location":"observability/structured-logging/","title":"Yap\u0131land\u0131r\u0131lm\u0131\u015f Loglama (Structured Logging)","text":"<p>Yap\u0131land\u0131r\u0131lm\u0131\u015f loglama (Structured Logging), geleneksel d\u00fcz metin loglar\u0131n\u0131n aksine, JSON veya di\u011fer yap\u0131land\u0131r\u0131lm\u0131\u015f formatlarda loglar\u0131n tutulmas\u0131n\u0131 sa\u011flayarak daha iyi analiz ve aranabilirlik sunar. Merkezi log y\u00f6netim sistemleri (Elasticsearch, Seq, Grafana, Kibana, Splunk) ile entegre \u00e7al\u0131\u015farak loglar\u0131n i\u015flenmesini kolayla\u015ft\u0131r\u0131r.</p>"},{"location":"observability/structured-logging/#1-neden-yaplandrlms-loglama-kullanmalyz","title":"1. Neden Yap\u0131land\u0131r\u0131lm\u0131\u015f Loglama Kullanmal\u0131y\u0131z?","text":"<p>\u2714 Loglar\u0131n indekslenmesini ve analiz edilmesini kolayla\u015ft\u0131r\u0131r. \u2714 Merkezi log y\u00f6netim sistemleriyle daha iyi entegrasyon sa\u011flar. \u2714 Kritik olaylar\u0131 (hatalar, kullan\u0131c\u0131 i\u015flemleri) filtrelemeyi m\u00fcmk\u00fcn k\u0131lar. \u2714 Da\u011f\u0131t\u0131k sistemlerde olaylar\u0131 ili\u015fkilendirerek hata tespitini h\u0131zland\u0131r\u0131r. </p> <p>\u00d6zellikle mikroservis mimarilerinde, yap\u0131land\u0131r\u0131lm\u0131\u015f loglama hata y\u00f6netimi ve performans analizleri i\u00e7in b\u00fcy\u00fck avantaj sa\u011flar.</p>"},{"location":"observability/structured-logging/#2-net-uygulamalarnda-yaplandrlms-loglama-kullanm","title":"2. .NET Uygulamalar\u0131nda Yap\u0131land\u0131r\u0131lm\u0131\u015f Loglama Kullan\u0131m\u0131","text":""},{"location":"observability/structured-logging/#1-serilog-ile-json-formatnda-loglama","title":"1. Serilog ile JSON Format\u0131nda Loglama","text":"<p>Serilog, yap\u0131land\u0131r\u0131lm\u0131\u015f loglama i\u00e7in en pop\u00fcler .NET k\u00fct\u00fcphanelerinden biridir.</p> <p>\ud83d\udccc Gerekli Paketleri Y\u00fckleyin:</p> <pre><code>dotnet add package Serilog.AspNetCore\ndotnet add package Serilog.Sinks.Console\ndotnet add package Serilog.Sinks.File\ndotnet add package Serilog.Sinks.Seq\n</code></pre> <p>\ud83d\udccc Serilog\u2019u Yap\u0131land\u0131rma:</p> <pre><code>using Serilog;\n\nLog.Logger = new LoggerConfiguration()\n    .Enrich.FromLogContext()\n    .WriteTo.Console(new Serilog.Formatting.Json.JsonFormatter())\n    .WriteTo.File(\"logs/log.json\", rollingInterval: RollingInterval.Day, formatter: new Serilog.Formatting.Json.JsonFormatter())\n    .WriteTo.Seq(\"http://localhost:5341\")\n    .CreateLogger();\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Host.UseSerilog();\n</code></pre> <p>\u2705 Bu yap\u0131land\u0131rma: - Console ve JSON dosyalar\u0131na loglar\u0131 yazd\u0131r\u0131r. - Seq sunucusuna loglar\u0131 g\u00f6ndererek merkezi izleme sa\u011flar. </p> <p>\ud83d\udccc \u00d6rnek JSON Log \u00c7\u0131kt\u0131s\u0131:</p> <pre><code>{\n    \"Timestamp\": \"2024-02-12T14:23:45.678Z\",\n    \"Level\": \"Information\",\n    \"Message\": \"Kullan\u0131c\u0131 giri\u015f yapt\u0131\",\n    \"Properties\": {\n        \"UserId\": \"12345\",\n        \"IpAddress\": \"192.168.1.10\",\n        \"Location\": \"Istanbul, Turkey\"\n    }\n}\n</code></pre> <p>\u2705 Bu yap\u0131land\u0131rma sayesinde: - Loglar merkezi bir sistemde kolayca aranabilir hale gelir. - \u0130lgili loglar\u0131 belirli filtreler ile analiz etmek m\u00fcmk\u00fcn olur. </p>"},{"location":"observability/structured-logging/#2-yaplandrlms-loglara-correlation-id-dahil-etme","title":"2. Yap\u0131land\u0131r\u0131lm\u0131\u015f Loglara Correlation ID Dahil Etme","text":"<p>Servisler aras\u0131 istekleri takip edebilmek i\u00e7in loglara Correlation ID eklemek \u00f6nemlidir.</p> <p>\ud83d\udccc Middleware ile Correlation ID Entegrasyonu:</p> <pre><code>public class CorrelationIdMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public CorrelationIdMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (!context.Request.Headers.TryGetValue(\"X-Correlation-ID\", out var correlationId))\n        {\n            correlationId = Guid.NewGuid().ToString();\n            context.Request.Headers.Append(\"X-Correlation-ID\", correlationId);\n        }\n\n        context.Items[\"CorrelationId\"] = correlationId;\n        await _next(context);\n    }\n}\n</code></pre> <p>\ud83d\udccc Correlation ID\u2019yi Loglara Ekleyin:</p> <pre><code>public class LoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public LoggingMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context, ILogger&lt;LoggingMiddleware&gt; logger)\n    {\n        var correlationId = context.Items[\"CorrelationId\"]?.ToString() ?? Guid.NewGuid().ToString();\n        using (logger.BeginScope(new Dictionary&lt;string, object&gt; { { \"CorrelationId\", correlationId } }))\n        {\n            await _next(context);\n        }\n    }\n}\n</code></pre> <p>\u2705 Bu yap\u0131land\u0131rma: - Loglar\u0131n Correlation ID ile ili\u015fkilendirilmesini sa\u011flar. - T\u00fcm mikroservislerde bir iste\u011fe ait loglar\u0131 kolayca takip edilebilir hale getirir. </p>"},{"location":"observability/structured-logging/#3-yaplandrlms-loglar-elasticsearch-ve-kibana-ile-gorsellestirme","title":"3. Yap\u0131land\u0131r\u0131lm\u0131\u015f Loglar\u0131 Elasticsearch ve Kibana ile G\u00f6rselle\u015ftirme","text":"<p>Yap\u0131land\u0131r\u0131lm\u0131\u015f loglar Elasticsearch ve Kibana ile analiz edilebilir.</p> <p>\ud83d\udccc Elasticsearch ve Kibana\u2019y\u0131 Docker ile \u00c7al\u0131\u015ft\u0131rma:</p> <pre><code>docker network create elk\n\ndocker run -d --name elasticsearch --net elk -p 9200:9200 -e \"discovery.type=single-node\" elasticsearch:7.10.0\n\ndocker run -d --name kibana --net elk -p 5601:5601 kibana:7.10.0\n</code></pre> <p>\ud83d\udccc Serilog ile Elasticsearch\u2019e Log G\u00f6nderme:</p> <pre><code>.WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri(\"http://localhost:9200\"))\n{\n    AutoRegisterTemplate = true,\n    IndexFormat = \"logs-dotnet-{0:yyyy.MM}\"\n})\n</code></pre> <p>\u2705 Bu sayede: - Elasticsearch loglar\u0131 indeksleyerek analiz edilebilir hale getirir. - Kibana\u2019da loglar\u0131 g\u00f6rselle\u015ftirerek detayl\u0131 analiz yap\u0131labilir. </p> <p>\ud83d\udccc Kibana\u2019da Loglar\u0131 Filtreleme: </p> <pre><code>{\n    \"query\": {\n        \"match\": {\n            \"correlation.id\": \"12345-abcde\"\n        }\n    }\n}\n</code></pre> <p>\u2705 Bu sayede belirli bir Correlation ID\u2019ye sahip loglar analiz edilebilir. </p>"},{"location":"observability/structured-logging/#4-yaplandrlms-loglama-en-iyi-pratikleri","title":"4. Yap\u0131land\u0131r\u0131lm\u0131\u015f Loglama En \u0130yi Pratikleri","text":"<p>\u2714 T\u00fcm loglar\u0131 JSON format\u0131nda olu\u015fturun. \u2714 Loglara Correlation ID ekleyerek istekleri ili\u015fkilendirin. \u2714 Loglar\u0131 merkezi bir sunucuya y\u00f6nlendirin (Elasticsearch, Seq, Prometheus). \u2714 Log seviyelerini do\u011fru kullan\u0131n (<code>Debug</code>, <code>Info</code>, <code>Warning</code>, <code>Error</code>). \u2714 Performans kayb\u0131n\u0131 \u00f6nlemek i\u00e7in asenkron loglama mekanizmalar\u0131 kullan\u0131n.</p>"},{"location":"observability/tracing-correlation-id/","title":"Tracing ve Correlation ID Y\u00f6netimi","text":"<p>Mikroservis mimarilerinde Tracing (\u0130zleme) ve Correlation ID kullan\u0131m\u0131, sistemde ger\u00e7ekle\u015fen isteklerin hangi servisten hangi servise ge\u00e7ti\u011fini anlamak i\u00e7in kritik bir \u00f6neme sahiptir. Bir iste\u011fin t\u00fcm s\u00fcre\u00e7 boyunca izlenebilmesi ve hata tespitinin kolayla\u015fmas\u0131 i\u00e7in Correlation ID kullan\u0131m\u0131 bir zorunluluktur.</p>"},{"location":"observability/tracing-correlation-id/#1-correlation-id-nedir","title":"1. Correlation ID Nedir?","text":"<p>Correlation ID, bir istemciden gelen iste\u011fe ba\u011fl\u0131 olarak olu\u015fturulan ve iste\u011fin t\u00fcm ya\u015fam d\u00f6ng\u00fcs\u00fc boyunca ta\u015f\u0131nan benzersiz bir kimliktir. T\u00fcm mikroservislerde bu ID ta\u015f\u0131narak loglar\u0131n ve tracing verilerinin ili\u015fkilendirilmesi sa\u011flan\u0131r.</p> <p>\u2705 Correlation ID\u2019nin Sa\u011flad\u0131klar\u0131: - Servisler aras\u0131nda ge\u00e7en istekleri izleme ve hata ay\u0131klama - Da\u011f\u0131t\u0131k sistemlerde loglar\u0131 birle\u015ftirme ve analiz etme - Performans darbo\u011fazlar\u0131n\u0131 tespit etme - Servis \u00e7a\u011fr\u0131lar\u0131n\u0131 anlamland\u0131rarak istekleri takip etme </p>"},{"location":"observability/tracing-correlation-id/#2-net-uygulamalarnda-correlation-id-kullanm","title":"2. .NET Uygulamalar\u0131nda Correlation ID Kullan\u0131m\u0131","text":""},{"location":"observability/tracing-correlation-id/#1-middleware-ile-correlation-id-yonetimi","title":"1. Middleware ile Correlation ID Y\u00f6netimi","text":"<p>ASP.NET Core\u2019da bir middleware yazarak, her iste\u011fin bir Correlation ID ta\u015f\u0131mas\u0131n\u0131 sa\u011flayabiliriz.</p> <p>\ud83d\udccc Middleware Tan\u0131mlama:</p> <pre><code>public class CorrelationIdMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public CorrelationIdMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (!context.Request.Headers.TryGetValue(\"X-Correlation-ID\", out var correlationId))\n        {\n            correlationId = Guid.NewGuid().ToString();\n            context.Request.Headers.Append(\"X-Correlation-ID\", correlationId);\n        }\n\n        context.Response.Headers.Append(\"X-Correlation-ID\", correlationId);\n        context.Items[\"CorrelationId\"] = correlationId;\n\n        await _next(context);\n    }\n}\n</code></pre> <p>\ud83d\udccc Middleware\u2019i Uygulamaya Dahil Etme:</p> <pre><code>var builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.UseMiddleware&lt;CorrelationIdMiddleware&gt;();\n</code></pre> <p>\u2705 Bu middleware: - Gelen isteklerde X-Correlation-ID ba\u015fl\u0131\u011f\u0131n\u0131 kontrol eder. - Yoksa yeni bir Correlation ID olu\u015fturur ve iste\u011fe ekler. - Yan\u0131t ba\u015fl\u0131\u011f\u0131na ayn\u0131 ID\u2019yi ekleyerek istemcinin ID\u2019yi almas\u0131n\u0131 sa\u011flar.  </p>"},{"location":"observability/tracing-correlation-id/#2-serilog-ile-correlation-id-kullanm","title":"2. Serilog ile Correlation ID Kullan\u0131m\u0131","text":"<p>Serilog gibi bir loglama framework\u2019\u00fc ile Correlation ID\u2019yi loglara otomatik olarak dahil edebiliriz.</p> <p>\ud83d\udccc Serilog Konfig\u00fcrasyonu:</p> <pre><code>Log.Logger = new LoggerConfiguration()\n    .Enrich.FromLogContext()\n    .WriteTo.Console(outputTemplate: \"{Timestamp:HH:mm:ss} [{Level:u3}] {CorrelationId} {Message:lj}{NewLine}{Exception}\")\n    .CreateLogger();\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Host.UseSerilog();\n</code></pre> <p>\ud83d\udccc Correlation ID\u2019nin Loglara Eklenmesi:</p> <pre><code>public class LoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public LoggingMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context, ILogger&lt;LoggingMiddleware&gt; logger)\n    {\n        var correlationId = context.Items[\"CorrelationId\"]?.ToString() ?? Guid.NewGuid().ToString();\n        using (logger.BeginScope(new Dictionary&lt;string, object&gt; { { \"CorrelationId\", correlationId } }))\n        {\n            await _next(context);\n        }\n    }\n}\n</code></pre> <p>\ud83d\udccc Middleware\u2019i Kullan\u0131ma Dahil Etme:</p> <pre><code>app.UseMiddleware&lt;LoggingMiddleware&gt;();\n</code></pre> <p>\u2705 Bu yap\u0131land\u0131rma: - T\u00fcm loglarda Correlation ID\u2019nin g\u00f6r\u00fcnmesini sa\u011flar. - Servisler aras\u0131 \u00e7a\u011fr\u0131lar ba\u011flam\u0131n\u0131 kaybetmeden takip edilir. </p>"},{"location":"observability/tracing-correlation-id/#3-opentelemetry-ile-correlation-id-kullanm","title":"3. OpenTelemetry ile Correlation ID Kullan\u0131m\u0131","text":"<p>E\u011fer da\u011f\u0131t\u0131k sistemler i\u00e7in OpenTelemetry kullan\u0131yorsan\u0131z, Correlation ID\u2019yi tracing verilerine dahil edebilirsiniz.</p> <p>\ud83d\udccc OpenTelemetry Konfig\u00fcrasyonu:</p> <pre><code>var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddAspNetCoreInstrumentation()\n    .AddHttpClientInstrumentation()\n    .AddConsoleExporter()\n    .Build();\n</code></pre> <p>\ud83d\udccc Correlation ID\u2019nin Span \u0130\u00e7inde Kullan\u0131m\u0131:</p> <pre><code>using System.Diagnostics;\n\nvar activitySource = new ActivitySource(\"MyApp.Tracing\");\n\nusing (var activity = activitySource.StartActivity(\"ProcessOrder\"))\n{\n    activity?.SetTag(\"correlation.id\", \"12345-abcde\");\n}\n</code></pre> <p>\u2705 Bu sayede: - T\u00fcm tracing span\u2019lerine Correlation ID dahil edilir. - Jaeger, Zipkin gibi ara\u00e7larla ili\u015fkilendirme sa\u011flan\u0131r. </p>"},{"location":"observability/tracing-correlation-id/#4-dagtk-loglama-icin-correlation-id-kullanm","title":"4. Da\u011f\u0131t\u0131k Loglama \u0130\u00e7in Correlation ID Kullan\u0131m\u0131","text":"<p>Mikroservislerde Kibana, Elasticsearch, Grafana gibi ara\u00e7lar kullanarak loglar\u0131 tek merkezde toplayabilirsiniz.</p> <p>\ud83d\udccc Kibana\u2019da Correlation ID ile Log Arama: </p> <pre><code>{\n    \"query\": {\n        \"match\": {\n            \"correlation.id\": \"12345-abcde\"\n        }\n    }\n}\n</code></pre> <p>\ud83d\udccc Grafana\u2019da Correlation ID Filtreleme: </p> <pre><code>datasources:\n  - name: logs\n    type: elasticsearch\n    url: http://elasticsearch:9200\n    jsonData:\n      index: \"logs-*\"\n</code></pre> <p>\u2705 Bu sayede: - Mikroservisler aras\u0131 istekler tek bir panelden izlenebilir. - Belirli bir iste\u011fe ait t\u00fcm loglar filtrelenerek analiz edilebilir. </p>"},{"location":"observability/tracing-correlation-id/#5-correlation-id-en-iyi-pratikleri","title":"5. Correlation ID En \u0130yi Pratikleri","text":"<p>\u2714 T\u00fcm HTTP isteklerinde <code>X-Correlation-ID</code> ba\u015fl\u0131\u011f\u0131 kullan\u0131lmal\u0131d\u0131r. \u2714 E\u011fer istemciden gelmiyorsa, API kendisi olu\u015fturmal\u0131d\u0131r. \u2714 Servisler aras\u0131 \u00e7a\u011fr\u0131larda Correlation ID ta\u015f\u0131nmal\u0131d\u0131r. \u2714 Loglar merkezi bir sistemde (ELK, Grafana, Seq) saklanmal\u0131 ve aranabilir olmal\u0131d\u0131r. \u2714 Tracing ve monitoring ara\u00e7lar\u0131 ile Correlation ID ili\u015fkilendirilmelidir.</p>"},{"location":"resiliency/api-gateway-resiliency/","title":"API Gateway ile Resiliency","text":"<p>API Gateway, mikroservis mimarilerinde bir giri\u015f noktas\u0131 g\u00f6revi g\u00f6rerek talepleri y\u00f6nlendirir, g\u00fcvenli\u011fi sa\u011flar ve dayan\u0131kl\u0131l\u0131\u011f\u0131 art\u0131r\u0131r. Resiliency uygulamalar\u0131nda API Gateway kullan\u0131m\u0131, sistemin genel kararl\u0131l\u0131\u011f\u0131n\u0131 ve \u00f6l\u00e7eklenebilirli\u011fini art\u0131r\u0131r.</p>"},{"location":"resiliency/api-gateway-resiliency/#1-api-gateway-nedir","title":"1. API Gateway Nedir?","text":"<p>API Gateway, bir istemci ile mikroservisler aras\u0131nda bir ara katman olarak \u00e7al\u0131\u015f\u0131r. - Fonksiyonlar: \u0130stek y\u00f6nlendirme, y\u00fck dengeleme, g\u00fcvenlik kontrol\u00fc, hata y\u00f6netimi. - Avantajlar: Merkezi hata y\u00f6netimi, performans optimizasyonu, g\u00fcvenlik.</p>"},{"location":"resiliency/api-gateway-resiliency/#2-polly-ile-api-gateway-resiliency-stratejileri","title":"2. Polly ile API Gateway Resiliency Stratejileri","text":"<p>API Gateway\u2019de Polly kullanarak hata y\u00f6netimi ve dayan\u0131kl\u0131l\u0131k mekanizmalar\u0131 olu\u015fturabilirsiniz.</p>"},{"location":"resiliency/api-gateway-resiliency/#retry-politikas","title":"Retry Politikas\u0131","text":"<p>\u2705 \u00d6rnek: Polly ile yeniden deneme mekanizmas\u0131</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nawait retryPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Forwarding request to microservice...\");\n    await ForwardRequestToMicroserviceAsync();\n});\n</code></pre>"},{"location":"resiliency/api-gateway-resiliency/#circuit-breaker-kullanm","title":"Circuit Breaker Kullan\u0131m\u0131","text":"<p>Circuit Breaker, hatal\u0131 bir servise yap\u0131lan isteklerin say\u0131s\u0131n\u0131 s\u0131n\u0131rland\u0131rarak sistemi korur.</p> <p>\u2705 \u00d6rnek: Circuit Breaker ile hata y\u00f6netimi</p> <pre><code>var circuitBreakerPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .CircuitBreakerAsync(\n        exceptionsAllowedBeforeBreaking: 3,\n        durationOfBreak: TimeSpan.FromSeconds(30));\n\nawait circuitBreakerPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Processing request...\");\n    await ForwardRequestToMicroserviceAsync();\n});\n</code></pre>"},{"location":"resiliency/api-gateway-resiliency/#3-cache-kullanm-ile-performans-iyilestirme","title":"3. Cache Kullan\u0131m\u0131 ile Performans \u0130yile\u015ftirme","text":"<p>API Gateway\u2019de s\u0131k kullan\u0131lan verileri \u00f6nbelle\u011fe alarak hem performans\u0131 art\u0131rabilir hem de mikroservislerin y\u00fck\u00fcn\u00fc azaltabilirsiniz.</p> <p>\u2705 \u00d6rnek: Polly ile Cache</p> <pre><code>var cachePolicy = Policy.CacheAsync&lt;string&gt;(\n    cacheProvider: new MemoryCacheProvider(new MemoryCache(new MemoryCacheOptions())),\n    ttl: TimeSpan.FromMinutes(5));\n\nawait cachePolicy.ExecuteAsync(async context =&gt;\n{\n    return await GetDataFromMicroserviceAsync();\n}, new Context(\"cache-key\"));\n</code></pre>"},{"location":"resiliency/api-gateway-resiliency/#4-timeout-yonetimi","title":"4. Timeout Y\u00f6netimi","text":"<p>API Gateway, mikroservislerden yan\u0131t beklerken belirli bir s\u00fcre i\u00e7inde i\u015flemi sonland\u0131rmal\u0131d\u0131r.</p> <p>\u2705 \u00d6rnek: Polly ile Timeout Politikas\u0131</p> <pre><code>var timeoutPolicy = Policy\n    .TimeoutAsync(TimeSpan.FromSeconds(10));\n\nawait timeoutPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Calling microservice with timeout...\");\n    await ForwardRequestToMicroserviceAsync();\n});\n</code></pre>"},{"location":"resiliency/api-gateway-resiliency/#5-load-balancing-ve-rate-limiting","title":"5. Load Balancing ve Rate Limiting","text":"<p>API Gateway, y\u00fck dengeleme ve istek s\u0131n\u0131rland\u0131rma mekanizmalar\u0131n\u0131 etkin bir \u015fekilde kullanmal\u0131d\u0131r.</p> <p>\u2705 \u00d6rnek: Rate Limiting</p> <pre><code>services.AddRateLimiter(options =&gt;\n{\n    options.GlobalLimiter = PartitionedRateLimiter.Create&lt;HttpContext, string&gt;(context =&gt;\n    {\n        return RateLimitPartition.GetFixedWindowLimiter(\n            partitionKey: context.Connection.RemoteIpAddress?.ToString() ?? \"global\",\n            factory: _ =&gt; new FixedWindowRateLimiterOptions\n            {\n                PermitLimit = 100,\n                Window = TimeSpan.FromMinutes(1)\n            });\n    });\n});\n\napp.UseRateLimiter();\n</code></pre>"},{"location":"resiliency/api-gateway-resiliency/#6-hata-yonetimi-ve-fallback-stratejileri","title":"6. Hata Y\u00f6netimi ve Fallback Stratejileri","text":"<p>Mikroservisler hata verdi\u011finde API Gateway\u2019in yedek bir yan\u0131t d\u00f6nd\u00fcrmesi gerekebilir.</p> <p>\u2705 \u00d6rnek: Fallback ile Yedek Yan\u0131t</p> <pre><code>var fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;Exception&gt;()\n    .FallbackAsync(\n        fallbackValue: \"Service is temporarily unavailable.\",\n        onFallbackAsync: async (exception, context) =&gt;\n        {\n            Console.WriteLine($\"Fallback triggered: {exception.Message}\");\n            await Task.CompletedTask;\n        });\n\nvar result = await fallbackPolicy.ExecuteAsync(async () =&gt;\n{\n    throw new Exception(\"Microservice failure!\");\n});\n\nConsole.WriteLine($\"API Gateway Response: {result}\");\n</code></pre>"},{"location":"resiliency/api-gateway-resiliency/#7-izleme-ve-loglama","title":"7. \u0130zleme ve Loglama","text":"<p>API Gateway\u2019de t\u00fcm istek ve hata durumlar\u0131n\u0131 izleyerek sistemin dayan\u0131kl\u0131l\u0131\u011f\u0131n\u0131 art\u0131rabilirsiniz.</p> <p>\u2705 \u00d6rnek: OpenTelemetry ile \u0130zleme</p> <pre><code>using var tracer = new ActivitySource(\"APIGateway\");\n\nusing var activity = tracer.StartActivity(\"ProcessRequest\");\nactivity?.AddTag(\"Route\", \"/api/data\");\nactivity?.AddTag(\"Method\", \"GET\");\n\nawait ForwardRequestToMicroserviceAsync();\n</code></pre>"},{"location":"resiliency/bulkhead-isolation/","title":"Bulkhead Isolation: Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":"<p>Bulkhead Isolation, sistemdeki kaynaklar\u0131n belirli bir k\u0131sm\u0131n\u0131 ay\u0131rarak bir bile\u015fenin ar\u0131zalanmas\u0131n\u0131n di\u011fer bile\u015fenleri etkilemesini \u00f6nlemeyi ama\u00e7lar. Polly, bu stratejiyi uygulamak i\u00e7in etkili ara\u00e7lar sunar.</p>"},{"location":"resiliency/bulkhead-isolation/#1-bulkhead-isolationn-onemi","title":"1. Bulkhead Isolation\u2019\u0131n \u00d6nemi","text":"<p>Bulkhead Isolation, bir sistemdeki hatalar\u0131n yay\u0131lmas\u0131n\u0131 \u00f6nler. \u00d6rne\u011fin, yo\u011fun bir API \u00e7a\u011fr\u0131s\u0131 trafi\u011fi di\u011fer i\u015flemlerin performans\u0131n\u0131 d\u00fc\u015f\u00fcrmemelidir.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Kaynaklar\u0131n kontrols\u00fcz \u015fekilde payla\u015f\u0131lmas\u0131.</p> <pre><code>Parallel.For(0, 100, async i =&gt;\n{\n    await MakeHttpRequestAsync(); // T\u00fcm \u00e7a\u011fr\u0131lar s\u0131n\u0131rs\u0131z kaynak t\u00fcketir\n});\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Polly ile kaynak s\u0131n\u0131rlar\u0131n\u0131 kontrol alt\u0131na al\u0131n.</p> <pre><code>var bulkheadPolicy = Policy.BulkheadAsync(10, int.MaxValue);\n\nawait bulkheadPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/bulkhead-isolation/#2-bulkhead-ile-kuyruklama","title":"2. Bulkhead ile Kuyruklama","text":"<p>Bulkhead Isolation, a\u015f\u0131r\u0131 y\u00fcklenme durumunda gelen i\u015flemleri bir kuyru\u011fa alabilir.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var bulkheadPolicy = Policy.BulkheadAsync(\n    maxParallelization: 10,\n    maxQueuingActions: 20,\n    onBulkheadRejectedAsync: context =&gt;\n    {\n        Console.WriteLine(\"Request rejected due to bulkhead limit.\");\n        return Task.CompletedTask;\n    });\n\nawait bulkheadPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/bulkhead-isolation/#3-bulkhead-ve-diger-politikalarla-kombinasyon","title":"3. Bulkhead ve Di\u011fer Politikalarla Kombinasyon","text":"<p>Bulkhead Isolation, di\u011fer Polly politikalar\u0131 ile birle\u015ftirilerek daha dayan\u0131kl\u0131 sistemler olu\u015fturulabilir.</p> <p>\u2705 \u00d6rnek: Retry ve Circuit Breaker ile Bulkhead kullan\u0131m\u0131.</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nvar circuitBreakerPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .CircuitBreakerAsync(2, TimeSpan.FromSeconds(30));\n\nvar bulkheadPolicy = Policy.BulkheadAsync(10, 20);\n\nvar combinedPolicy = Policy.WrapAsync(retryPolicy, circuitBreakerPolicy, bulkheadPolicy);\n\nawait combinedPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/bulkhead-isolation/#4-performans-ve-izleme","title":"4. Performans ve \u0130zleme","text":"<ul> <li>Metrik \u0130zleme: Bulkhead s\u0131n\u0131rlar\u0131na ula\u015f\u0131l\u0131p ula\u015f\u0131lmad\u0131\u011f\u0131n\u0131 izleyin.</li> <li>Do\u011fru Parametre Se\u00e7imi: <code>maxParallelization</code> ve <code>maxQueuingActions</code> de\u011ferlerini sistem kapasitesine uygun belirleyin.</li> </ul> <p>\u2705 \u00d6rnek:</p> <pre><code>var bulkheadPolicy = Policy.BulkheadAsync(\n    maxParallelization: 5,\n    maxQueuingActions: 10,\n    onBulkheadRejectedAsync: context =&gt;\n    {\n        Console.WriteLine(\"Bulkhead limit exceeded. Request rejected.\");\n        return Task.CompletedTask;\n    });\n\nawait bulkheadPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/chaos-engineering/","title":"Chaos Engineering","text":"<p>Chaos Engineering, bir sistemin dayan\u0131kl\u0131l\u0131\u011f\u0131n\u0131 test etmek ve hatalara kar\u015f\u0131 nas\u0131l davrand\u0131\u011f\u0131n\u0131 anlamak i\u00e7in tasarlanm\u0131\u015f bir disiplindir. Polly ile hata sim\u00fclasyonu, gecikme enjekte etme ve ba\u015far\u0131s\u0131zl\u0131k oranlar\u0131n\u0131 art\u0131rma gibi stratejiler uygulanabilir.</p>"},{"location":"resiliency/chaos-engineering/#1-polly-ile-ag-gecikmesi-simulasyonu","title":"1. Polly ile A\u011f Gecikmesi Sim\u00fclasyonu","text":"<p>Gecikme enjekte ederek sistemi y\u00fcksek gecikme ko\u015fullar\u0131nda test edin.</p> <p>\u2705 \u00d6rnek: Rastgele Gecikme Ekleme</p> <pre><code>var latencyPolicy = Policy\n    .InjectLatencyAsync(\n        enabled: _ =&gt; true,\n        injectionRate: 0.4, // %40 olas\u0131l\u0131kla gecikme\n        latency: _ =&gt; TimeSpan.FromMilliseconds(new Random().Next(500, 2000))); // 500ms - 2000ms aras\u0131nda gecikme\n\nawait latencyPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Request started...\");\n    await Task.Delay(100); // Ger\u00e7ek i\u015f mant\u0131\u011f\u0131\n    Console.WriteLine(\"Request completed.\");\n});\n</code></pre>"},{"location":"resiliency/chaos-engineering/#2-polly-ile-hata-enjeksiyonu","title":"2. Polly ile Hata Enjeksiyonu","text":"<p>Belirli bir olas\u0131l\u0131kla hata olu\u015fturun ve sistemin nas\u0131l tepki verdi\u011fini analiz edin.</p> <p>\u2705 \u00d6rnek: Sim\u00fcle Edilmi\u015f Hatalar</p> <pre><code>var faultPolicy = Policy\n    .InjectFaultAsync(\n        enabled: _ =&gt; true,\n        injectionRate: 0.3, // %30 olas\u0131l\u0131kla hata\n        fault: _ =&gt; new Exception(\"Simulated fault!\"));\n\nawait faultPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Processing request...\");\n    await Task.Delay(200); // Ger\u00e7ek i\u015f mant\u0131\u011f\u0131\n    Console.WriteLine(\"Request successfully processed.\");\n});\n</code></pre>"},{"location":"resiliency/chaos-engineering/#3-polly-ile-gecikme-ve-hata-kombinasyonu","title":"3. Polly ile Gecikme ve Hata Kombinasyonu","text":"<p>Gecikme ve hata enjeksiyonunu birle\u015ftirerek daha karma\u015f\u0131k senaryolar olu\u015fturabilirsiniz.</p> <p>\u2705 \u00d6rnek: Karma\u015f\u0131k Sim\u00fclasyon</p> <pre><code>var combinedPolicy = Policy.WrapAsync(\n    Policy.InjectLatencyAsync(\n        enabled: _ =&gt; true,\n        injectionRate: 0.3,\n        latency: _ =&gt; TimeSpan.FromSeconds(2)), // 2 saniye gecikme\n    Policy.InjectFaultAsync(\n        enabled: _ =&gt; true,\n        injectionRate: 0.2, // %20 olas\u0131l\u0131kla hata\n        fault: _ =&gt; new Exception(\"Simulated fault!\"))\n);\n\nawait combinedPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Executing operation...\");\n    await Task.Delay(150); // Ger\u00e7ek i\u015f mant\u0131\u011f\u0131\n    Console.WriteLine(\"Operation completed.\");\n});\n</code></pre>"},{"location":"resiliency/chaos-engineering/#4-polly-ile-calsma-yuku-testi","title":"4. Polly ile \u00c7al\u0131\u015fma Y\u00fck\u00fc Testi","text":"<p>Sistemi y\u00fcksek y\u00fck alt\u0131nda test etmek i\u00e7in Chaos Engineering stratejileri kullanabilirsiniz.</p> <p>\u2705 \u00d6rnek: Toplu \u0130stekler ve Hata Sim\u00fclasyonu</p> <pre><code>var bulkPolicy = Policy.InjectFaultAsync(\n    enabled: _ =&gt; true,\n    injectionRate: 0.2,\n    fault: _ =&gt; new Exception(\"Random fault injected!\"));\n\nvar tasks = Enumerable.Range(1, 50).Select(async i =&gt;\n{\n    try\n    {\n        await bulkPolicy.ExecuteAsync(async () =&gt;\n        {\n            Console.WriteLine($\"Processing request #{i}\");\n            await Task.Delay(100);\n            Console.WriteLine($\"Request #{i} completed.\");\n        });\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"Request #{i} failed: {ex.Message}\");\n    }\n});\n\nawait Task.WhenAll(tasks);\n</code></pre>"},{"location":"resiliency/chaos-engineering/#5-polly-ile-graceful-degradation-kademeli-azalma","title":"5. Polly ile Graceful Degradation (Kademeli Azalma)","text":"<p>Hizmetin t\u00fcmden \u00e7\u00f6kmesini engellemek i\u00e7in hata durumunda s\u0131n\u0131rl\u0131 bir hizmet sunabilirsiniz.</p> <p>\u2705 \u00d6rnek: Hata Durumunda Varsay\u0131lan De\u011fer D\u00f6nd\u00fcrme</p> <pre><code>var fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;Exception&gt;()\n    .FallbackAsync(\n        fallbackValue: \"Default value due to failure\",\n        onFallbackAsync: async (result, context) =&gt;\n        {\n            Console.WriteLine(\"Fallback triggered: Returning default value.\");\n            await Task.CompletedTask;\n        });\n\nvar result = await fallbackPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Processing request...\");\n    throw new Exception(\"Simulated failure!\"); // Hata olu\u015ftur\n});\n\nConsole.WriteLine($\"Result: {result}\");\n</code></pre>"},{"location":"resiliency/chaos-engineering/#6-polly-ile-gecikmeli-yant-ve-retry-politikalar","title":"6. Polly ile Gecikmeli Yan\u0131t ve Retry Politikalar\u0131","text":"<p>Kaotik ko\u015fullar alt\u0131nda tekrar denemeyi ve gecikmeli yan\u0131tlar\u0131 birle\u015ftirin.</p> <p>\u2705 \u00d6rnek: Retry + Latency</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;Exception&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nvar latencyPolicy = Policy\n    .InjectLatencyAsync(\n        enabled: _ =&gt; true,\n        injectionRate: 0.5, // %50 olas\u0131l\u0131kla gecikme\n        latency: _ =&gt; TimeSpan.FromSeconds(1)); // 1 saniye gecikme\n\nvar combinedPolicy = Policy.WrapAsync(retryPolicy, latencyPolicy);\n\nawait combinedPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Attempting operation...\");\n    await Task.Delay(200); // Ger\u00e7ek i\u015f mant\u0131\u011f\u0131\n    Console.WriteLine(\"Operation completed.\");\n});\n</code></pre>"},{"location":"resiliency/circuit-breaker-state-management/","title":"Circuit Breaker State Management","text":"<p>Circuit Breaker, bir hizmetin hatalar\u0131 kontrol alt\u0131na almas\u0131n\u0131 sa\u011flayarak sistemin a\u015f\u0131r\u0131 y\u00fcklenmesini \u00f6nleyen bir dayan\u0131kl\u0131l\u0131k mekanizmas\u0131d\u0131r. Polly ile Circuit Breaker\u2019\u0131n durumlar\u0131n\u0131 y\u00f6netmek, daha hassas ve etkili bir hata kontrol\u00fc sa\u011flar.</p>"},{"location":"resiliency/circuit-breaker-state-management/#1-circuit-breaker-nedir","title":"1. Circuit Breaker Nedir?","text":"<p>Circuit Breaker, sistemin \u00fc\u00e7 ana durumda \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flar: - Closed: T\u00fcm istekler i\u015flenir ve hata oran\u0131 izlenir. - Open: Hata e\u015fi\u011fi a\u015f\u0131ld\u0131\u011f\u0131nda t\u00fcm istekler reddedilir. - Half-Open: K\u0131s\u0131tl\u0131 say\u0131da iste\u011fe izin verilir ve sistemin durumuna g\u00f6re tekrar kapal\u0131 duruma ge\u00e7ilebilir.  </p>"},{"location":"resiliency/circuit-breaker-state-management/#2-polly-ile-circuit-breaker-kullanm","title":"2. Polly ile Circuit Breaker Kullan\u0131m\u0131","text":"<p>Polly ile Circuit Breaker mekanizmas\u0131 kurarak sistemi a\u015f\u0131r\u0131 y\u00fcklenmekten koruyabilirsiniz.</p> <p>\u2705 \u00d6rnek: Basit Circuit Breaker</p> <pre><code>var circuitBreakerPolicy = Policy\n    .Handle&lt;Exception&gt;()\n    .CircuitBreakerAsync(\n        exceptionsAllowedBeforeBreaking: 3,\n        durationOfBreak: TimeSpan.FromSeconds(30));\n\nawait circuitBreakerPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Processing request...\");\n    await Task.Delay(100); // \u0130\u015f mant\u0131\u011f\u0131\n    throw new Exception(\"Simulated failure!\");\n});\n</code></pre>"},{"location":"resiliency/circuit-breaker-state-management/#3-circuit-breaker-durumlarnn-yonetimi","title":"3. Circuit Breaker Durumlar\u0131n\u0131n Y\u00f6netimi","text":"<p>Polly, Circuit Breaker\u2019\u0131n durumlar\u0131n\u0131 izlemek ve olaylara tepki vermek i\u00e7in kullan\u0131\u015fl\u0131 geri bildirim mekanizmalar\u0131 sunar.</p> <p>\u2705 \u00d6rnek: Durum De\u011fi\u015fikliklerini \u0130zleme</p> <pre><code>var circuitBreakerPolicy = Policy\n    .Handle&lt;Exception&gt;()\n    .CircuitBreakerAsync(\n        exceptionsAllowedBeforeBreaking: 3,\n        durationOfBreak: TimeSpan.FromSeconds(30),\n        onBreak: (exception, timespan) =&gt;\n        {\n            Console.WriteLine($\"Circuit opened for {timespan.TotalSeconds} seconds due to: {exception.Message}\");\n        },\n        onReset: () =&gt;\n        {\n            Console.WriteLine(\"Circuit reset to Closed state.\");\n        },\n        onHalfOpen: () =&gt;\n        {\n            Console.WriteLine(\"Circuit in Half-Open state. Testing system health...\");\n        });\n\nawait circuitBreakerPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Attempting operation...\");\n    await Task.Delay(100);\n    throw new Exception(\"Simulated error.\");\n});\n</code></pre>"},{"location":"resiliency/circuit-breaker-state-management/#4-half-open-durumu-yonetimi","title":"4. Half-Open Durumu Y\u00f6netimi","text":"<p>Half-Open durumunda belirli bir i\u015flem test edilir. Ba\u015far\u0131l\u0131 sonu\u00e7lar, devreyi kapal\u0131 duruma getirir.</p> <p>\u2705 \u00d6rnek: Half-Open Testi</p> <pre><code>var circuitBreakerPolicy = Policy\n    .Handle&lt;Exception&gt;()\n    .CircuitBreakerAsync(\n        exceptionsAllowedBeforeBreaking: 2,\n        durationOfBreak: TimeSpan.FromSeconds(20),\n        onHalfOpen: () =&gt;\n        {\n            Console.WriteLine(\"Half-Open: Testing health with a limited operation.\");\n        });\n\nawait circuitBreakerPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Performing health check...\");\n    await Task.Delay(200); // Test mant\u0131\u011f\u0131\n});\n</code></pre>"},{"location":"resiliency/circuit-breaker-state-management/#5-circuit-breaker-ve-retry-kombinasyonu","title":"5. Circuit Breaker ve Retry Kombinasyonu","text":"<p>Circuit Breaker ve Retry politikalar\u0131n\u0131 birle\u015ftirerek daha dayan\u0131kl\u0131 bir \u00e7\u00f6z\u00fcm olu\u015fturabilirsiniz.</p> <p>\u2705 \u00d6rnek: Retry ve Circuit Breaker</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;Exception&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nvar circuitBreakerPolicy = Policy\n    .Handle&lt;Exception&gt;()\n    .CircuitBreakerAsync(3, TimeSpan.FromSeconds(30));\n\nvar combinedPolicy = Policy.WrapAsync(retryPolicy, circuitBreakerPolicy);\n\nawait combinedPolicy.ExecuteAsync(async () =&gt;\n{\n    Console.WriteLine(\"Executing combined policy...\");\n    await Task.Delay(150);\n    throw new Exception(\"Simulated failure.\");\n});\n</code></pre>"},{"location":"resiliency/fallback-strategies/","title":"Fallback Stratejileri: Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":"<p>Fallback stratejileri, bir i\u015flemin ba\u015far\u0131s\u0131z olmas\u0131 durumunda alternatif bir \u00e7\u00f6z\u00fcm sa\u011flamay\u0131 ama\u00e7lar. Polly, hata durumlar\u0131nda sistemin do\u011fru bir \u015fekilde \u00e7al\u0131\u015fmaya devam etmesini sa\u011flayan g\u00fc\u00e7l\u00fc fallback mekanizmalar\u0131 sunar.</p>"},{"location":"resiliency/fallback-strategies/#1-temel-fallback-kullanm","title":"1. Temel Fallback Kullan\u0131m\u0131","text":"<p>Fallback stratejisi, belirli bir i\u015flem ba\u015far\u0131s\u0131z oldu\u011funda bir varsay\u0131lan de\u011fer d\u00f6nd\u00fcrmeyi sa\u011flar.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hatalar\u0131 ele almadan varsay\u0131lan de\u011fer d\u00f6nd\u00fcrmek.</p> <pre><code>try\n{\n    var result = await MakeHttpRequestAsync();\n}\ncatch\n{\n    var result = \"Default Value\"; // Kontrols\u00fcz fallback\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Polly ile fallback stratejisi tan\u0131mlay\u0131n.</p> <pre><code>var fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;HttpRequestException&gt;()\n    .FallbackAsync(\"Default Value\");\n\nvar result = await fallbackPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/fallback-strategies/#2-fallback-ve-retry-kombinasyonu","title":"2. Fallback ve Retry Kombinasyonu","text":"<p>Fallback ve Retry politikalar\u0131n\u0131 birle\u015ftirerek daha dayan\u0131kl\u0131 bir \u00e7\u00f6z\u00fcm olu\u015fturabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nvar fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;HttpRequestException&gt;()\n    .FallbackAsync(\"Fallback Value\");\n\nvar combinedPolicy = Policy.WrapAsync(fallbackPolicy, retryPolicy);\n\nvar result = await combinedPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/fallback-strategies/#3-fallback-stratejisi-ile-dinamik-yantlar","title":"3. Fallback Stratejisi ile Dinamik Yan\u0131tlar","text":"<p>Fallback s\u0131ras\u0131nda dinamik olarak hesaplanan bir yan\u0131t d\u00f6nd\u00fcrebilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;HttpRequestException&gt;()\n    .FallbackAsync(\n        fallbackAction: async (cancellationToken) =&gt;\n        {\n            Console.WriteLine(\"Fallback triggered. Returning default value.\");\n            return await Task.FromResult(\"Dynamically Calculated Value\");\n        });\n\nvar result = await fallbackPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/fallback-strategies/#4-performans-ve-izleme","title":"4. Performans ve \u0130zleme","text":"<ul> <li>Loglama: Fallback tetiklendi\u011finde loglama yaparak hangi durumlarda devreye girdi\u011fini izleyin.</li> <li>Metrikler: Hangi i\u015flemlerin fallback stratejisine ihtiya\u00e7 duydu\u011funu \u00f6l\u00e7mek i\u00e7in metrikler ekleyin.</li> </ul> <p>\u2705 \u00d6rnek:</p> <pre><code>var fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;HttpRequestException&gt;()\n    .FallbackAsync(\n        fallbackAction: async (cancellationToken) =&gt;\n        {\n            Console.WriteLine(\"Using fallback due to exception.\");\n            return \"Fallback Result\";\n        },\n        onFallbackAsync: async (exception, context) =&gt;\n        {\n            Console.WriteLine($\"Fallback executed: {exception.Exception.Message}\");\n            await Task.CompletedTask;\n        });\n\nvar result = await fallbackPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/graceful-degradation/","title":"Graceful Degradation","text":"<p>Graceful Degradation, bir sistemin k\u0131smi bir hata durumunda bile hizmet sunmaya devam etmesini sa\u011flayan bir dayan\u0131kl\u0131l\u0131k stratejisidir. Bu strateji, kritik olmayan \u00f6zelliklerin ge\u00e7ici olarak kapat\u0131lmas\u0131n\u0131 veya azalt\u0131lm\u0131\u015f bir hizmet sunulmas\u0131n\u0131 i\u00e7erir.</p>"},{"location":"resiliency/graceful-degradation/#1-graceful-degradation-nedir","title":"1. Graceful Degradation Nedir?","text":"<ul> <li>Ama\u00e7: Kullan\u0131c\u0131 deneyimini koruyarak, sistemin tamamen \u00e7\u00f6kmesini \u00f6nlemek.  </li> <li>Kullan\u0131m Alanlar\u0131: Y\u00fcksek trafi\u011fe sahip web siteleri, mikroservis mimarileri, da\u011f\u0131t\u0131k sistemler.  </li> </ul> <p>\u00d6rne\u011fin, bir e-ticaret sitesinde \u00f6deme hizmeti ge\u00e7ici olarak kullan\u0131lam\u0131yorsa, kullan\u0131c\u0131lar\u0131n \u00fcr\u00fcn incelemesi yapmaya devam etmesi sa\u011flanabilir.</p>"},{"location":"resiliency/graceful-degradation/#2-polly-ile-graceful-degradation","title":"2. Polly ile Graceful Degradation","text":"<p>Polly\u2019nin Fallback politikas\u0131, Graceful Degradation stratejisini uygulamak i\u00e7in etkili bir ara\u00e7t\u0131r.</p> <p>\u2705 \u00d6rnek: Fallback ile Alternatif Yan\u0131t D\u00f6nd\u00fcrme</p> <pre><code>var fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;Exception&gt;()\n    .FallbackAsync(\n        fallbackValue: \"Reduced functionality: Please try again later.\",\n        onFallbackAsync: async (exception, context) =&gt;\n        {\n            Console.WriteLine($\"Fallback triggered: {exception.Message}\");\n            await Task.CompletedTask;\n        });\n\nvar result = await fallbackPolicy.ExecuteAsync(async () =&gt;\n{\n    throw new Exception(\"Primary service unavailable!\");\n});\n\nConsole.WriteLine($\"Response: {result}\");\n</code></pre>"},{"location":"resiliency/graceful-degradation/#3-ozellik-azaltma-feature-reduction","title":"3. \u00d6zellik Azaltma (Feature Reduction)","text":"<p>Bir sistemin baz\u0131 \u00f6zelliklerini ge\u00e7ici olarak kapatarak hizmet vermeye devam etmesi sa\u011flanabilir.</p> <p>\u2705 \u00d6rnek: Kritik Olmayan \u00d6zellikleri Devre D\u0131\u015f\u0131 B\u0131rakma</p> <pre><code>if (!IsCriticalFeatureAvailable())\n{\n    Console.WriteLine(\"Critical feature unavailable. Displaying limited functionality.\");\n    DisplayBasicFeatures();\n}\nelse\n{\n    DisplayFullFeatures();\n}\n</code></pre>"},{"location":"resiliency/graceful-degradation/#4-graceful-degradation-ile-cache-kullanm","title":"4. Graceful Degradation ile Cache Kullan\u0131m\u0131","text":"<p>Ge\u00e7ici bir hata durumunda, \u00f6nceden \u00f6nbelle\u011fe al\u0131nm\u0131\u015f veriler kullan\u0131labilir.</p> <p>\u2705 \u00d6rnek: Cache ile Yedekleme</p> <pre><code>var fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;Exception&gt;()\n    .FallbackAsync(\n        fallbackAction: async cancellationToken =&gt;\n        {\n            Console.WriteLine(\"Using cached data due to failure.\");\n            return \"Cached Data\";\n        });\n\nvar result = await fallbackPolicy.ExecuteAsync(async () =&gt;\n{\n    throw new Exception(\"Primary service failed!\");\n});\n\nConsole.WriteLine($\"Result: {result}\");\n</code></pre>"},{"location":"resiliency/graceful-degradation/#5-graceful-degradation-ve-retry-kombinasyonu","title":"5. Graceful Degradation ve Retry Kombinasyonu","text":"<p>Hatalar\u0131 y\u00f6netmek i\u00e7in Retry ve Graceful Degradation stratejilerini birle\u015ftirebilirsiniz.</p> <p>\u2705 \u00d6rnek: Retry ve Fallback Kombinasyonu</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;Exception&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nvar fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;Exception&gt;()\n    .FallbackAsync(\n        fallbackValue: \"Service is temporarily unavailable.\");\n\nvar combinedPolicy = Policy.WrapAsync(fallbackPolicy, retryPolicy);\n\nvar result = await combinedPolicy.ExecuteAsync(async () =&gt;\n{\n    throw new Exception(\"Service failed!\");\n});\n\nConsole.WriteLine($\"Response: {result}\");\n</code></pre>"},{"location":"resiliency/graceful-degradation/#6-performans-ve-izleme","title":"6. Performans ve \u0130zleme","text":"<p>Graceful Degradation s\u0131ras\u0131nda sistem performans\u0131n\u0131 izlemek \u00f6nemlidir: - Metrikler: Azalt\u0131lm\u0131\u015f hizmetlerin ne s\u0131kl\u0131kta kullan\u0131ld\u0131\u011f\u0131n\u0131 izleyin. - Loglama: Fallback ve di\u011fer stratejilerin ne zaman devreye girdi\u011fini takip edin.  </p> <p>\u2705 \u00d6rnek: Loglama ile \u0130zleme</p> <pre><code>var fallbackPolicy = Policy&lt;string&gt;\n    .Handle&lt;Exception&gt;()\n    .FallbackAsync(\n        fallbackValue: \"Limited functionality is active.\",\n        onFallbackAsync: async (exception, context) =&gt;\n        {\n            Console.WriteLine($\"Fallback triggered due to: {exception.Message}\");\n            await Task.CompletedTask;\n        });\n\nawait fallbackPolicy.ExecuteAsync(async () =&gt;\n{\n    throw new Exception(\"Simulated failure!\");\n});\n</code></pre>"},{"location":"resiliency/idempotency-key-data-consistency/","title":"Idempotency Key ve Veri Tutarl\u0131l\u0131\u011f\u0131","text":"<p>Idempotency, bir i\u015flemin birden fazla kez \u00e7a\u011fr\u0131ld\u0131\u011f\u0131nda ayn\u0131 sonucu garanti etmesi anlam\u0131na gelir. Bu \u00f6zellik, da\u011f\u0131t\u0131k sistemlerde veri tutarl\u0131l\u0131\u011f\u0131n\u0131 sa\u011flamak ve yinelenen i\u015flemleri \u00f6nlemek i\u00e7in kritik bir stratejidir.</p>"},{"location":"resiliency/idempotency-key-data-consistency/#1-idempotency-nedir","title":"1. Idempotency Nedir?","text":"<ul> <li>Ama\u00e7: Ayn\u0131 i\u015flem birden fazla kez tekrarland\u0131\u011f\u0131nda sistemin durumu de\u011fi\u015ftirmeden ayn\u0131 sonucu d\u00f6nd\u00fcrmesi.</li> <li>Kullan\u0131m Alanlar\u0131: API \u00e7a\u011fr\u0131lar\u0131, \u00f6deme sistemleri, mesajla\u015fma.</li> </ul> <p>\u00d6rne\u011fin, bir \u00f6deme i\u015flemi yinelenen bir API \u00e7a\u011fr\u0131s\u0131 nedeniyle birden fazla kez i\u015flenmemelidir.</p>"},{"location":"resiliency/idempotency-key-data-consistency/#2-idempotency-key-kullanm","title":"2. Idempotency Key Kullan\u0131m\u0131","text":"<p>Idempotency Key, bir iste\u011fi benzersiz \u015fekilde tan\u0131mlayan bir anahtard\u0131r. Bu anahtar, istemciden gelen iste\u011fin tekrar i\u015flenmesini engeller.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Idempotency Key olmadan istek i\u015fleme</p> <pre><code>public async Task ProcessPaymentAsync(PaymentRequest request)\n{\n    // Tekrar eden istekleri kontrol etmeden i\u015fleme\n    await SavePaymentToDatabaseAsync(request);\n    await ChargeCustomerAsync(request);\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Idempotency Key ile kontrol</p> <pre><code>public async Task ProcessPaymentAsync(PaymentRequest request)\n{\n    if (await IsRequestAlreadyProcessedAsync(request.IdempotencyKey))\n    {\n        Console.WriteLine(\"Request already processed. Skipping.\");\n        return;\n    }\n\n    await SavePaymentToDatabaseAsync(request);\n    await ChargeCustomerAsync(request);\n    await MarkRequestAsProcessedAsync(request.IdempotencyKey);\n}\n</code></pre>"},{"location":"resiliency/idempotency-key-data-consistency/#3-idempotency-key-ve-veritaban-kullanm","title":"3. Idempotency Key ve Veritaban\u0131 Kullan\u0131m\u0131","text":"<p>Idempotency Key genellikle bir veritaban\u0131nda saklan\u0131r ve her iste\u011fin benzersiz oldu\u011funu garanti eder.</p> <p>\u2705 \u00d6rnek: Veritaban\u0131 ile Idempotency Key kontrol\u00fc</p> <pre><code>public async Task&lt;bool&gt; IsRequestAlreadyProcessedAsync(string idempotencyKey)\n{\n    return await _dbContext.IdempotencyKeys.AnyAsync(k =&gt; k.Key == idempotencyKey);\n}\n\npublic async Task MarkRequestAsProcessedAsync(string idempotencyKey)\n{\n    await _dbContext.IdempotencyKeys.AddAsync(new IdempotencyKey { Key = idempotencyKey });\n    await _dbContext.SaveChangesAsync();\n}\n</code></pre>"},{"location":"resiliency/idempotency-key-data-consistency/#4-mesajlasma-sistemlerinde-idempotency","title":"4. Mesajla\u015fma Sistemlerinde Idempotency","text":"<p>Mesajlar birden fazla kez i\u015flenebilir, bu y\u00fczden idempotent bir tasar\u0131m kullanmak \u00f6nemlidir.</p> <p>\u2705 \u00d6rnek: Mesaj i\u015fleme</p> <pre><code>public async Task ProcessMessageAsync(Message message)\n{\n    if (await IsMessageAlreadyProcessedAsync(message.Id))\n    {\n        Console.WriteLine(\"Message already processed.\");\n        return;\n    }\n\n    await HandleMessageAsync(message);\n    await MarkMessageAsProcessedAsync(message.Id);\n}\n</code></pre>"},{"location":"resiliency/idempotency-key-data-consistency/#5-idempotency-ve-api-tasarm","title":"5. Idempotency ve API Tasar\u0131m\u0131","text":"<p>REST API\u2019lerde idempotency, istemcilerin g\u00fcvenilir bir \u015fekilde veri g\u00f6nderip almas\u0131n\u0131 sa\u011flar.</p> <p>\u2705 \u00d6rnek: Idempotency Key ile API \u00c7a\u011fr\u0131s\u0131</p> <pre><code>POST /payments HTTP/1.1\nContent-Type: application/json\nIdempotency-Key: 12345\n\n{\n    \"amount\": 100,\n    \"currency\": \"USD\"\n}\n</code></pre> <p>Sunucu taraf\u0131nda:</p> <pre><code>if (await IsRequestAlreadyProcessedAsync(request.Headers[\"Idempotency-Key\"]))\n{\n    return Ok(\"Request already processed.\");\n}\n</code></pre>"},{"location":"resiliency/idempotency-key-data-consistency/#6-loglama-ve-izleme","title":"6. Loglama ve \u0130zleme","text":"<p>Idempotency sistemlerinin d\u00fczg\u00fcn \u00e7al\u0131\u015ft\u0131\u011f\u0131ndan emin olmak i\u00e7in loglama ve izleme ara\u00e7lar\u0131 kullan\u0131n.</p> <p>\u2705 \u00d6rnek: Loglama ile idempotency izleme</p> <pre><code>public async Task ProcessPaymentAsync(PaymentRequest request)\n{\n    if (await IsRequestAlreadyProcessedAsync(request.IdempotencyKey))\n    {\n        Console.WriteLine($\"Duplicate request detected: {request.IdempotencyKey}\");\n        return;\n    }\n\n    await SavePaymentToDatabaseAsync(request);\n    Console.WriteLine($\"Processed request: {request.IdempotencyKey}\");\n    await MarkRequestAsProcessedAsync(request.IdempotencyKey);\n}\n</code></pre>"},{"location":"resiliency/polly-retry-circuit-breaker/","title":"Polly ile Retry ve Circuit Breaker","text":"<p>Polly, dayan\u0131kl\u0131 ve g\u00fcvenilir uygulamalar geli\u015ftirmek i\u00e7in kullan\u0131lan g\u00fc\u00e7l\u00fc bir .NET k\u00fct\u00fcphanesidir. A\u011f hatalar\u0131na, ge\u00e7ici sorunlara veya zaman a\u015f\u0131m\u0131 hatalar\u0131na kar\u015f\u0131 stratejiler sunarak uygulaman\u0131z\u0131n daha kararl\u0131 \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flar.</p>"},{"location":"resiliency/polly-retry-circuit-breaker/#1-retry-tekrar-deneme-politikas","title":"1. Retry (Tekrar Deneme) Politikas\u0131","text":"<p>Retry politikas\u0131, belirli hata t\u00fcrlerinde i\u015flemi tekrar denemeye olanak tan\u0131r.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Belirli bir politika tan\u0131mlamadan tekrar denemek.</p> <pre><code>for (int i = 0; i &lt; 3; i++)\n{\n    try\n    {\n        await MakeHttpRequestAsync();\n        break;\n    }\n    catch\n    {\n        if (i == 2) throw;\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Polly ile tekrar deneme stratejisi tan\u0131mlay\u0131n.</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)));\n\nawait retryPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/polly-retry-circuit-breaker/#2-circuit-breaker-devre-kesici-politikas","title":"2. Circuit Breaker (Devre Kesici) Politikas\u0131","text":"<p>Circuit Breaker, bir i\u015flemde belirli say\u0131da hata meydana geldikten sonra ge\u00e7ici olarak i\u015flemleri durdurur.</p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hatalar\u0131 kontrols\u00fcz bir \u015fekilde biriktirmek.</p> <pre><code>int failureCount = 0;\n\ntry\n{\n    await MakeHttpRequestAsync();\n}\ncatch\n{\n    failureCount++;\n    if (failureCount &gt; 5)\n    {\n        throw new Exception(\"Too many failures!\");\n    }\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Polly ile Circuit Breaker stratejisi tan\u0131mlay\u0131n.</p> <pre><code>var circuitBreakerPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .CircuitBreakerAsync(5, TimeSpan.FromMinutes(1));\n\nawait circuitBreakerPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/polly-retry-circuit-breaker/#3-retry-ve-circuit-breaker-kombinasyonu","title":"3. Retry ve Circuit Breaker Kombinasyonu","text":"<p>Polly, birden fazla stratejiyi birle\u015ftirerek daha esnek politikalar olu\u015fturman\u0131za olanak tan\u0131r.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nvar circuitBreakerPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .CircuitBreakerAsync(2, TimeSpan.FromSeconds(30));\n\nvar combinedPolicy = Policy.WrapAsync(retryPolicy, circuitBreakerPolicy);\n\nawait combinedPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/polly-retry-circuit-breaker/#4-performans-ve-izleme","title":"4. Performans ve \u0130zleme","text":"<ul> <li>Loglama: Polly politikalar\u0131n\u0131 kullan\u0131rken loglama yaparak hata ve ba\u015far\u0131 durumlar\u0131n\u0131 izleyin.</li> <li>Metrics: Ba\u015far\u0131s\u0131zl\u0131k oranlar\u0131n\u0131 ve devre kesici durumlar\u0131n\u0131 \u00f6l\u00e7mek i\u00e7in metrikler ekleyin.</li> </ul> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt;\n    {\n        Console.WriteLine($\"Retry attempt: {retryAttempt}\");\n        return TimeSpan.FromSeconds(retryAttempt);\n    });\n</code></pre>"},{"location":"resiliency/timeout-management/","title":"Timeout Y\u00f6netimi","text":"<p>Timeout, uygulamalarda uzun s\u00fcreli i\u015flemleri s\u0131n\u0131rlamak ve kullan\u0131c\u0131 deneyimini korumak i\u00e7in \u00f6nemli bir stratejidir. Polly, i\u015flemlerinizde zaman a\u015f\u0131m\u0131 kontrol\u00fc i\u00e7in etkili bir \u00e7\u00f6z\u00fcm sunar.</p>"},{"location":"resiliency/timeout-management/#1-temel-timeout-yonetimi","title":"1. Temel Timeout Y\u00f6netimi","text":"<p>\u274c Yanl\u0131\u015f Kullan\u0131m: Timeout kontrol\u00fc olmadan uzun s\u00fcre beklemek.</p> <pre><code>await MakeHttpRequestAsync(); // Potansiyel olarak sonsuza kadar bekleyebilir\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Polly ile zaman a\u015f\u0131m\u0131 kontrol\u00fc ekleyin.</p> <pre><code>var timeoutPolicy = Policy\n    .TimeoutAsync(TimeSpan.FromSeconds(5));\n\nawait timeoutPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/timeout-management/#2-timeout-ve-retry-kombinasyonu","title":"2. Timeout ve Retry Kombinasyonu","text":"<p>Timeout ve Retry politikalar\u0131n\u0131 birle\u015ftirerek hem i\u015flemi belirli bir s\u00fcreyle s\u0131n\u0131rlayabilir hem de hata durumunda tekrar deneme yapabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nvar timeoutPolicy = Policy\n    .TimeoutAsync(TimeSpan.FromSeconds(5));\n\nvar combinedPolicy = Policy.WrapAsync(retryPolicy, timeoutPolicy);\n\nawait combinedPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/timeout-management/#3-cancellationtoken-ile-timeout-yonetimi","title":"3. CancellationToken ile Timeout Y\u00f6netimi","text":"<p>Polly, <code>CancellationToken</code> ile entegre \u00e7al\u0131\u015farak i\u015flemleri iptal etmenizi sa\u011flar.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));\n\nvar timeoutPolicy = Policy\n    .TimeoutAsync(TimeSpan.FromSeconds(10));\n\nawait timeoutPolicy.ExecuteAsync(\n    async token =&gt; await MakeHttpRequestAsync(token),\n    cts.Token);\n</code></pre>"},{"location":"resiliency/timeout-management/#4-performans-ve-izleme","title":"4. Performans ve \u0130zleme","text":"<ul> <li>Loglama: Timeout durumlar\u0131n\u0131 izlemek i\u00e7in log ekleyin.</li> <li>Uyarlanabilir S\u00fcreler: Farkl\u0131 i\u015flemler i\u00e7in farkl\u0131 timeout s\u00fcreleri belirleyin.</li> </ul> <p>\u2705 \u00d6rnek:</p> <pre><code>var timeoutPolicy = Policy\n    .TimeoutAsync(TimeSpan.FromSeconds(5), (context, timespan, task) =&gt;\n    {\n        Console.WriteLine($\"Timeout after {timespan.TotalSeconds} seconds.\");\n        return Task.CompletedTask;\n    });\n\nawait timeoutPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/transient-fault-handling/","title":"Transient Fault Handling: Yanl\u0131\u015f ve \u0130deal Kullan\u0131m","text":"<p>Ge\u00e7ici hatalar (transient faults), a\u011f ba\u011flant\u0131lar\u0131 veya harici hizmetlerle ileti\u015fim s\u0131ras\u0131nda zaman zaman ortaya \u00e7\u0131kan k\u0131sa s\u00fcreli sorunlard\u0131r. Polly, ge\u00e7ici hatalar\u0131 ele almak i\u00e7in g\u00fc\u00e7l\u00fc ara\u00e7lar sunarak uygulamalar\u0131n\u0131z\u0131n dayan\u0131kl\u0131l\u0131\u011f\u0131n\u0131 art\u0131r\u0131r.</p>"},{"location":"resiliency/transient-fault-handling/#1-transient-fault-nedir","title":"1. Transient Fault Nedir?","text":"<p>Ge\u00e7ici hatalar, genellikle yeniden deneme ile \u00e7\u00f6z\u00fclebilen k\u0131sa s\u00fcreli sorunlard\u0131r. \u00d6rne\u011fin: - Zaman a\u015f\u0131m\u0131 hatalar\u0131 - Ge\u00e7ici a\u011f kesintileri - Harici hizmetin ge\u00e7ici olarak kullan\u0131lamamas\u0131  </p> <p>\u274c Yanl\u0131\u015f Kullan\u0131m: Hatalar\u0131 ele almadan i\u015flemleri tekrar denemek.</p> <pre><code>try\n{\n    await MakeHttpRequestAsync();\n}\ncatch\n{\n    await MakeHttpRequestAsync(); // Kontrols\u00fcz yeniden deneme\n}\n</code></pre> <p>\u2705 \u0130deal Kullan\u0131m: Polly ile retry politikas\u0131 uygulay\u0131n.</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(retryAttempt));\n\nawait retryPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/transient-fault-handling/#2-retry-politikalar","title":"2. Retry Politikalar\u0131","text":"<p>Ge\u00e7ici hatalar\u0131 ele almak i\u00e7in Polly ile farkl\u0131 retry stratejileri tan\u0131mlayabilirsiniz.</p>"},{"location":"resiliency/transient-fault-handling/#sabit-gecikmeli-retry","title":"Sabit Gecikmeli Retry:","text":"<p>\u2705 \u00d6rnek:</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, _ =&gt; TimeSpan.FromSeconds(2));\n\nawait retryPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/transient-fault-handling/#artan-gecikmeli-retry","title":"Artan Gecikmeli Retry:","text":"<p>\u2705 \u00d6rnek:</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)));\n\nawait retryPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/transient-fault-handling/#jitter-rastgele-gecikme","title":"Jitter (Rastgele Gecikme):","text":"<p>Jitter, sabit gecikmenin neden oldu\u011fu y\u00fck yo\u011funlu\u011funu azalt\u0131r.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt;\n    {\n        var jitter = new Random().NextDouble();\n        return TimeSpan.FromSeconds(retryAttempt + jitter);\n    });\n\nawait retryPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/transient-fault-handling/#3-timeout-ve-retry-kombinasyonu","title":"3. Timeout ve Retry Kombinasyonu","text":"<p>Timeout ve retry politikalar\u0131n\u0131 birle\u015ftirerek daha dayan\u0131kl\u0131 bir \u00e7\u00f6z\u00fcm olu\u015fturabilirsiniz.</p> <p>\u2705 \u00d6rnek:</p> <pre><code>var timeoutPolicy = Policy\n    .TimeoutAsync(TimeSpan.FromSeconds(10));\n\nvar retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(2));\n\nvar combinedPolicy = Policy.WrapAsync(retryPolicy, timeoutPolicy);\n\nawait combinedPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"},{"location":"resiliency/transient-fault-handling/#4-performans-ve-izleme","title":"4. Performans ve \u0130zleme","text":"<ul> <li>Loglama: Retry i\u015flemlerini izlemek i\u00e7in loglar ekleyin.  </li> <li>Metrikler: Hangi i\u015flemlerin ge\u00e7ici hatalara neden oldu\u011funu belirlemek i\u00e7in metrik toplay\u0131n.  </li> </ul> <p>\u2705 \u00d6rnek:</p> <pre><code>var retryPolicy = Policy\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt;\n    {\n        Console.WriteLine($\"Retrying attempt {retryAttempt}...\");\n        return TimeSpan.FromSeconds(retryAttempt);\n    });\n\nawait retryPolicy.ExecuteAsync(() =&gt; MakeHttpRequestAsync());\n</code></pre>"}]}